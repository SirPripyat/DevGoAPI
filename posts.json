[
  {
    "mainImage": {
      "tag": "IMG",
      "src": "https://cdn.hashnode.com/res/hashnode/image/upload/v1684160461263/eab383f3-b96c-4208-956f-8d54553659ee.png?w=1600&h=840&fit=crop&crop=entropy&auto=compress,format&format=webp",
      "alt": "NextJS Server Actions e monorepositórios",
      "decoding": "async",
      "dataNimg": "responsive",
      "style": "position: absolute; inset: 0px; box-sizing: border-box; padding: 0px; border: none; margin: auto; display: block; width: 0px; height: 0px; min-width: 100%; max-width: 100%; min-height: 100%; max-height: 100%;"
    },
    "title": {
      "tag": "H1",
      "text": "NextJS Server Actions e monorepositórios"
    },
    "authorInfo": {
      "name": "Paulo Vitor Cruz",
      "profile": "https://hashnode.com/@paulovitorcs",
      "image": {
        "tag": "IMG",
        "src": "https://cdn.hashnode.com/res/hashnode/image/upload/v1627584398465/UPvyr0vKeP.jpeg?w=200&h=200&fit=crop&crop=faces&auto=compress,format&format=webp",
        "alt": "Paulo Vitor Cruz's photo",
        "decoding": "async",
        "dataNimg": "intrinsic",
        "style": "position:absolute;top:0;left:0;bottom:0;right:0;box-sizing:border-box;padding:0;border:none;margin:auto;display:block;width:0;height:0;min-width:100%;max-width:100%;min-height:100%;max-height:100%"
      }
    },
    "data": {
      "hour": "17:00",
      "data": "May 15, 2023"
    },
    "contentText": [
      "Com a última versão no NextJS e a possibilidade de criar funções do lado do servidor, a comunidade de desenvolvedores ficou bastante animada com a possibilidade de manter todo o projeto dentro de um mesmo código —inclusive, uma conexão com o banco de dados. Mas calma lá, isso não é nem tão inovador assim. E será que é bom mesmo?",
      "O que é um monorepositório?",
      "Hoje em dia estamos acostumados a desenvolver uma API, e desenvolver uma interface em projetos e repositórios separados —backend e frontend. Mas, a depender do projeto, ou da tecnologia, existe a possibilidade de desenvolver tudo em um único projeto, sem essa divisão de backend e frontend. Isso é tal do “monorepositório”.",
      "Com apenas um repositório você terá uma facilidade maior de manuntenção e o código fica mais visível e acessível durante o desenvolvimento. É interessante para quem está começando com programação e fica bem legal quando é um pequeno projeto, ou algum estudo ou experimentação de tecnologia que você está fazendo.",
      "Usar monorepositório é uma boa prática?",
      "Sendo bastante sincero, existe um motivo para monorepositórios não serem mais tão populares.",
      "Dividir seu projeto, em diferentes repositórios e códigos, não só pode adicionar uma boa camada de segurança, como também melhora a divisão de responsabilidades em uma aplicação, e isso sim é uma boa prática de programação.",
      "Ter tudo em um único lugar torna seu projeto um “monstro”. Por mais que até certo nível seja até amigável quanto mais o seu projeto cresce, essa junção de responsabilidades torna o seu código extremamente complexo, e até dificulta a manutenção —que deveria ser um dos pontos positivos de um projeto com monorepositório.",
      "Hoje em dia, quando discutimos bastante monolitos e microserviços, digo que utilizar um monorepositório é até contra intuitivo.",
      "Como está voltando aos holofotes?",
      "A algum tempo atrás eram assim que sites e aplicações funcionavam, backend e frontend todos em um mesmo código. Projetos em monorepositórios chegaram ser bastante populares, principalmente no “boom” do PHP.",
      "Hoje, o monorepositório volta a discussão pois tecnologias mais recentes, como o React e o framework NextJS, estão trazendo um novo recurso de “Server Actions” que permite trazer funções hoje já bastante comuns ao backend, como uma conexão ao banco de dados, para o mesmo repositório que estão seus componentes em React.",
      "Olha só um componente React chamando uma função que insere um dado em um banco de dados:",
      "import db from './db';",
      "import { redirect } from 'next/navigation';",
      "",
      "async function create(formData: FormData) {",
      "  'use server';",
      "  const post = await db.post.insert({",
      "    title: formData.get('title'),",
      "    content: formData.get('content'),",
      "  });",
      "  redirect(`/blog/${post.slug}`);",
      "}",
      "",
      "export default function Page() {",
      "  return (",
      "    &lt;form action={create}&gt;",
      "      &lt;input type=\"text\" name=\"title\" /&gt;",
      "      &lt;textarea name=\"content\" /&gt;",
      "      &lt;button type=\"submit\"&gt;Submit&lt;/button&gt;",
      "    &lt;/form&gt;",
      "  );",
      "}",
      "",
      "Todo recurso é útil",
      "Por mais que eu pessoalmente ainda ache estranho, todo recurso é realmente útil. Os benefícios ainda existem, basta sabermos usá-los. Além disso, ainda é um recurso bastante novo em fase Alpha no NextJS, o que mais ainda pode estar por vir até a versão final?",
      "E você? O que acha de Server Actions e de monorepositorios? Participe de nosso canal no Discord e conte pra gente!"
    ]
  },
  {
    "mainImage": {
      "tag": "IMG",
      "src": "https://cdn.hashnode.com/res/hashnode/image/upload/v1682983272028/f543a1db-3334-4e66-a575-20a4f35034fc.png?w=1600&h=840&fit=crop&crop=entropy&auto=compress,format&format=webp",
      "alt": "Não existem desenvolvedores de framework",
      "decoding": "async",
      "dataNimg": "responsive",
      "style": "position:absolute;top:0;left:0;bottom:0;right:0;box-sizing:border-box;padding:0;border:none;margin:auto;display:block;width:0;height:0;min-width:100%;max-width:100%;min-height:100%;max-height:100%;background-size:cover;background-position:0% 0%;filter:blur(20px);background-image:url(\"https://cdn.hashnode.com/res/hashnode/image/upload/v1682983272028/f543a1db-3334-4e66-a575-20a4f35034fc.png?w=400&h=210&fit=crop&crop=entropy&auto=compress,format&format=webp&fm=blurhash\")"
    },
    "title": {
      "tag": "H1",
      "text": "Não existem desenvolvedores de framework"
    },
    "authorInfo": {
      "name": "Paulo Vitor Cruz",
      "profile": "https://hashnode.com/@paulovitorcs",
      "image": {
        "tag": "IMG",
        "src": "https://cdn.hashnode.com/res/hashnode/image/upload/v1627584398465/UPvyr0vKeP.jpeg?w=200&h=200&fit=crop&crop=faces&auto=compress,format&format=webp",
        "alt": "Paulo Vitor Cruz's photo",
        "decoding": "async",
        "dataNimg": "intrinsic",
        "style": "position:absolute;top:0;left:0;bottom:0;right:0;box-sizing:border-box;padding:0;border:none;margin:auto;display:block;width:0;height:0;min-width:100%;max-width:100%;min-height:100%;max-height:100%"
      }
    },
    "data": {
      "hour": "12:00",
      "data": "May 2, 2023"
    },
    "contentText": [
      "Ou pelo menos, não deveria existir. Se você é desenvolvedor e foca em trabalhar somente com um framework específico, para tudo que está fazendo! Tá tudo errado! Vem que eu vou te explicar porque isso é o pior que você pode fazer para sua carreira.",
      "Eu te entendo…",
      "São milhares de coisas para você estudar. O mercado de trabalho te pede um framework específico. É claro que você, que está apenas começando neste mundo, iria focar em um framework. É mesmo o jeito mais rápido de conseguir um trabalho. Mas também é o pior jeito. Você vai mesmo ficar refém de um único framework?",
      "Frameworks vem e vão",
      "Houve o tempo em que nem frameworks existiam. Houve o tempo em que uma página na internet era toda feita de tabelas. Houve o tempo em que desenvolvimento frontend era praticamente só CSS, o Bootstrap era bem famoso. O jQuery também tinha o seu espaço garantido. AngularJS surgiu e foi completamente substituído por uma nova versão. No mobile, os frameworks nativas eram até a única solução disponível para criar um aplicativo. Hoje o mundo já é bem diferente. E o que será do React, Vue, Flutter, Nest e Laravel no futuro?",
      "Frameworks vem e vão, mas o conhecimento que você tem na linguagem de programação fica.",
      "Se você sabe bem uma linguagem, vai conseguir trabalhar bem em um framework",
      "Nós já te explicamos o que é um framework, mas nada custa lembrar: framework é um conjunto de funções e ferramentas de uma linguagem de programação estruturadas de uma forma que facilite o seu desenvolvimento. E é isso mesmo, é apenas uma biblioteca de funções que utiliza a mesma linguagem de programação que você tem negligenciado seus estudos.",
      "A lógica é muito simples: se um framework tem como base uma linguagem de programação, basta conhecer bem essa linguagem de programação e você conseguirá utilizar o framework —com uma capacidade até maior do aqueles que se limitam a estudar somente o framework.",
      "O framework ficou decadente, ou surgiu uma opção melhor no mercado? Tudo bem, você ainda terá o conhecimento da linguagem de programação. Por isso, os desenvolvedores que passado desenvolviam bastante com jQuery e foram para os novos frameworks de Javascript, como o próprio React, Vue e Angular. O mesmo vale para os desenvolvedores PHP que se adaptaram extremamente bem do Zend para o Laravel. E se acha que isso é válido somente quando um framework é depreciado pela comunidade, que tal tentar migrar do React para Vue? Como ambos tem a mesma base em Javascript será muito mais fácil!",
      "Estude certo",
      "Você precisa saber onde investir os seus estudos. E a resposta certa, é estudar a linguagem de programação, entender os conceitos, aprender a lógica. Use o framework apenas como um facilitador, afinal, é até esse o objetivo proposto pelos frameworks.",
      "Por aqui na devGo, essa é a nossa metodologia e é assim que trataremos em nossos próximos artigos. Se você quer continuar bem nos estudos, participe de nosso canal no Discord e acompanhe em nossos próximos artigos."
    ]
  },
  {
    "mainImage": {
      "tag": "IMG",
      "src": "https://cdn.hashnode.com/res/hashnode/image/upload/v1681739415899/ee038b9e-a208-4ba4-8988-b53d7c16edc2.png?w=1600&h=840&fit=crop&crop=entropy&auto=compress,format&format=webp",
      "alt": "Como cuidar de um projeto em produção",
      "decoding": "async",
      "dataNimg": "responsive",
      "style": "position:absolute;top:0;left:0;bottom:0;right:0;box-sizing:border-box;padding:0;border:none;margin:auto;display:block;width:0;height:0;min-width:100%;max-width:100%;min-height:100%;max-height:100%;background-size:cover;background-position:0% 0%;filter:blur(20px);background-image:url(\"https://cdn.hashnode.com/res/hashnode/image/upload/v1681739415899/ee038b9e-a208-4ba4-8988-b53d7c16edc2.png?w=400&h=210&fit=crop&crop=entropy&auto=compress,format&format=webp&fm=blurhash\")"
    },
    "title": {
      "tag": "H1",
      "text": "Como cuidar de um projeto em produção"
    },
    "authorInfo": {
      "name": "Paulo Vitor Cruz",
      "profile": "https://hashnode.com/@paulovitorcs",
      "image": {
        "tag": "IMG",
        "src": "https://cdn.hashnode.com/res/hashnode/image/upload/v1627584398465/UPvyr0vKeP.jpeg?w=200&h=200&fit=crop&crop=faces&auto=compress,format&format=webp",
        "alt": "Paulo Vitor Cruz's photo",
        "decoding": "async",
        "dataNimg": "intrinsic",
        "style": "position:absolute;top:0;left:0;bottom:0;right:0;box-sizing:border-box;padding:0;border:none;margin:auto;display:block;width:0;height:0;min-width:100%;max-width:100%;min-height:100%;max-height:100%"
      }
    },
    "data": {
      "hour": "13:54",
      "data": "Apr 17, 2023"
    },
    "contentText": [
      "Desenvolver um projeto é uma coisa, colocar em produção é outra completamente diferente. Você sabe cuidar de um projeto em produção?",
      "Se você entendeu bem o nosso último texto e está se preparando para ser um bom desenvolvedor, sabe que a entrega é a parte mais importante do seu trabalho, e uma entrega, de fato, é seu projeto estar em produção. E é aqui que de fato o seu projeto começa.",
      "Uma coisa é desenvolver o seu projeto localmente, ou até em um ambiente controlado de teste. Outra coisa é quando usuários começam a usar. Agora, problemas inesperados podem surgir, soluções rápidas precisarão acontecer, e melhorias precisarão serem feitas.",
      "Ter um projeto em produção significa ter responsabilidade constante sobre o produto. É ter uma infraestrutura potente o suficiente para aguentar a demanda de seus usuários; estar atento a bugs e resolver o que for preciso o mais rápido possível e da melhor forma possível; trabalhar em melhorias, e principalmente saber como trabalhar com essas melhorias para o seu projeto.",
      "Confira a infraestrutura de seu projeto",
      "Quando milhares de pessoas acessam seu projeto, tudo pode acontecer: a aplicação ficar lenta, apresentar algum comportamento não esperado e até mesmo ficar completamente fora do ar. Pouco importa se você tem um código bem feito, limpo de bugs e problemas se a infraestrutura não suportar a demanda.",
      "Sua aplicação está disponível na nuvem? Os serviços desenvolvidos são escaláveis? Existem políticas de balanceamento de carga? Existe uma solução para cache? A estrutura é elástica o suficiente para suportar a demanda? Foram feitos testes de sobrecarga para entender até onde a aplicação suporta tudo isso? São essas as perguntas que sempre devemos fazer quando um projeto está entrando em produção.",
      "Não basta até que seu projeto esteja “funcionando”. Em produção o seu projeto funcionar “sempre”.",
      "Monitore o que acontece na aplicação",
      "Acabo de dizer que é importante que seu projeto funcione “sempre”. Mas como saber que está, realmente, sempre funcionando?",
      "Você precisa ter ferramentas de monitoramento e métricas para ser possível identificar possíveis gargalos e problemas com o seu projeto. É importante que você veja se sua aplicação realmente está no ar, se há algum log de erro desconhecido e não tratado acontecendo, se está lento demais e até mesmo se o comportamento do cliente, como vendas, buscas por um produto e taxa de conversão estão de acordo com a proposta de negócio da sua aplicação.",
      "Serviços como Sentry, New Relic, ou até dashboards do Grafana, ou Prometheus podem te ajudar com isso. Com eles é possível monitorar em tempo real, conferir logs, e até ter alertas, relacionados a certas métricas para te chamar atenção a cada possível problema.",
      "Tenha protocolos de deployment",
      "Quem nunca teve medo de subir um código em produção? Errado é quem não tem.",
      "Subir um código em produção significa ter uma mudança imediata no seu produto que pode afetar milhares de clientes ao mesmo tempo. Pode ser uma ótima melhoria para seu projeto, mas também pode ser um comportamento não esperado, um bug, um erro no código que irá acabar com o seu produto.",
      "Versionamento da aplicação, um bom fluxo no Git, testes bem feitos e até automatizados, e até um monitoramento mais preciso pós uma nova versão em produção irão te ajudar. Combine com o seu time estes protocolos, valide bem qualquer alteração no código e principalmente esteja atento.",
      "É agora que o trabalho começa",
      "É somente em produção que entendemos melhor o nosso produto.",
      "É agora que começamos a ver como realmente é o nosso produto, se os usuários se comportam como o esperado, se os usuários sentem falta de algum recurso importante e até se o produto foi mesmo bem desenvolvido.",
      "Uma aplicação nunca deixa de ser desenvolvida, sempre precisa de melhorias, de refinamento, de novos recursos. O produto sempre precisa evoluir. E é aí que o seu trabalho realmente começa.",
      "Em produção, você terá um mundo de oportunidades para mostrar o seu trabalho."
    ]
  },
  {
    "mainImage": {
      "tag": "IMG",
      "src": "https://cdn.hashnode.com/res/hashnode/image/upload/v1680525386281/4c9d3b0b-feee-41c0-abc5-25fc4c1ecea5.png?w=1600&h=840&fit=crop&crop=entropy&auto=compress,format&format=webp",
      "alt": "O que te faz um bom desenvolvedor?",
      "decoding": "async",
      "dataNimg": "responsive",
      "style": "position: absolute; inset: 0px; box-sizing: border-box; padding: 0px; border: none; margin: auto; display: block; width: 0px; height: 0px; min-width: 100%; max-width: 100%; min-height: 100%; max-height: 100%;"
    },
    "title": {
      "tag": "H1",
      "text": "O que te faz um bom desenvolvedor?"
    },
    "authorInfo": {
      "name": "Paulo Vitor Cruz",
      "profile": "https://hashnode.com/@paulovitorcs",
      "image": {
        "tag": "IMG",
        "src": "https://cdn.hashnode.com/res/hashnode/image/upload/v1627584398465/UPvyr0vKeP.jpeg?w=200&h=200&fit=crop&crop=faces&auto=compress,format&format=webp",
        "alt": "Paulo Vitor Cruz's photo",
        "decoding": "async",
        "dataNimg": "intrinsic",
        "style": "position:absolute;top:0;left:0;bottom:0;right:0;box-sizing:border-box;padding:0;border:none;margin:auto;display:block;width:0;height:0;min-width:100%;max-width:100%;min-height:100%;max-height:100%"
      }
    },
    "data": {
      "hour": "12:36",
      "data": "Apr 3, 2023"
    },
    "contentText": [
      "Sem dúvidas esse é o objetivo de todo desenvolvedor. Mas o que te faz realmente bom?",
      "Participar de um grande projeto, ser especialista em uma linguagem de programação ou framework, liderar outros desenvolvedores, formar novos programadores. Há diversos caminhos para se considerar um bom desenvolvedor, mas no geral, existem importantes pontos que te valorizam e te destacam entre tantos outros desenvolvedores, aumentando de forma considerável o seu valor no mercado.",
      "Hoje vamos discutir o que você deve trabalhar para ser um ótimo desenvolvedor.",
      "Além de ser um técnico",
      "Já comentamos por aqui diversas vezes: ser um bom desenvolvedor, vai muito além do técnico. Não tiro a importância de você conhecer bem uma linguagem, saber trabalhar bem em um framework e ser especialista em determinada ferramenta. É claro que estes são pontos indispensáveis para que você se torne um bom desenvolvedor.",
      "Mas para ser um bom desenvolvedor, você precisa de um diferencial, e este diferencial vai muito além do técnico. Trata-se muito mais do valor que você consegue agregar, e da forma que você trabalha para atingir o seu valor.",
      "É importante que você, como desenvolvedor, consiga ir além do ser um bom técnico, e é justamente nestes pontos que iremos focar.",
      "Ser desenvolvedor é resolver problemas",
      "Vamos primeiro entender o verdadeiro objetivo do trabalho de um desenvolvedor: resolver problemas. Um desenvolvedor é aquele que cria um código, desenvolve uma aplicação, constrói um programa a fim de resolver o problema de alguém ou de alguma empresa. E é por isso que este deve ser o seu foco.",
      "No mercado, desenvolvedores são contratados, pois empresas estão com um determinado desafio que precisa ser resolvido.",
      "Um ótimo exemplo de um caso como este foi durante a pandemia: empresas que funcionavam apenas ficaram fisicamente limitadas com o lockdown, precisando então recorrer a algum outro recurso para atingir as metas de seus produtos. Essa solução foi uma grande transformação digital nas empresas, com sites, ecommerces e aplicativos e para isso, desenvolvedores precisaram ser contratados.",
      "Pois bem, se você foi contratado para resolver um determinado problema, tenha como foco desenvolver este determinado problema. E lembre que por muitas vezes, isso exigirá que você pense muito além do seu desenvolvimento, pense nas suas entregas!",
      "Pense no valor de suas entregas",
      "Com o mesmo exemplo de que durante a pandemia, empresas passaram por uma grande mudança e produtos digitais precisaram ser desenvolvidos, vamos pensar em como este momento poderia ter afetado o seu trabalho.",
      "Pense que durante este tempo, não só o seu cliente ou a sua empresa precisavam desta transformação. Pense também, que este foi um tempo limitado e que, por exemplo, hoje, as empresas já podem atuar fisicamente como sempre atuaram.",
      "Naquele momento, o que as empresas precisavam era de uma solução rápida, uma transformação “imediata”, que as tirassem da crise o mais rápido possível, e até mesmo antes de seus concorrentes, para que assim dominassem o vazio do mercado criado pela pandemia. Se você foi um desenvolvedor que entendeu este recado e conseguiu desenvolver um produto rápido o suficiente para isso, tenho certeza que está colhendo os frutos desta entrega hoje.",
      "Para uma empresa não basta apenas ter um produto desenvolvido, até porque, o problema para a empresa não é “não ter um produto digital”, e sim “vender mais” e “dominar o mercado”. A grande questão é: o que você irá fazer para que o seu desenvolvimento resolva este problema? Qual vai ser o seu diferencial?",
      "Sair do lado técnico para entender o mercado e suas necessidades é justamente o que pode aumentar o valor de suas entregas. E lembre-se, o valor de suas entregas é o seu valor como desenvolvedor.",
      "Seja um líder",
      "Se você além de ter qualidade técnica, entende o seu objetivo como desenvolvedor e principalmente entende o valor de suas entregas, porque não passar isso adiante?",
      "Para uma empresa, melhor do que ter uma única pessoa que entende o que faz um bom desenvolvedor é ter 5 pessoas que entendem o que faz um bom desenvolvedor. E se você, é alguém que consegue passar o conhecimento e experiência que você adquiriu para outros desenvolvedores, tenha a certeza de que será bem valorizado.",
      "Não se trata de uma concorrência, em que você precisa competir para ser um bom desenvolvedor, muito pelo contrário. Se trata de um crescimento exponencial. Se você consegue formar outros bons desenvolvedores, você expande todo o seu alcance: as entregas de seus liderados passam a ser a sua entrega, o valor de seus liderados para a ser somados ao seu valor.",
      "Seja a referência do seu projeto, trabalhe de forma para compartilhar o seu conhecimento e experiência entre seus desenvolvedores. É sendo um líder que você aumenta o seu valor.",
      "Compartilhe suas experiências",
      "Importante neste processo é o compartilhamento de experiências. Por mais que você esteja começando agora, ou já seja um desenvolvedor experiente, um líder e já realmente considerado um “bom desenvolvedor” esteja sempre disposto a compartilhar e principalmente a ouvir outras experiências.",
      "E é até mesmo com este intuito que a devGo foi criada. Estamos em nosso canal no Discord, abertos para novos temas e novas discussões, sempre pensando em nossa evolução pessoal.",
      "Você já participa de nosso canal do Discord? Apareça por lá e nos conte mais sobre sua trajetória."
    ]
  },
  {
    "mainImage": {
      "tag": "IMG",
      "src": "https://cdn.hashnode.com/res/hashnode/image/upload/v1679323491578/83607a41-8c84-4096-8138-c1cda8ff0397.png?w=1600&h=840&fit=crop&crop=entropy&auto=compress,format&format=webp",
      "alt": "Você já usa o ChatGPT para te ajudar a desenvolver?",
      "decoding": "async",
      "dataNimg": "responsive",
      "style": "position: absolute; inset: 0px; box-sizing: border-box; padding: 0px; border: none; margin: auto; display: block; width: 0px; height: 0px; min-width: 100%; max-width: 100%; min-height: 100%; max-height: 100%;"
    },
    "title": {
      "tag": "H1",
      "text": "Você já usa o ChatGPT para te ajudar a desenvolver?"
    },
    "authorInfo": {
      "name": "Paulo Vitor Cruz",
      "profile": "https://hashnode.com/@paulovitorcs",
      "image": {
        "tag": "IMG",
        "src": "https://cdn.hashnode.com/res/hashnode/image/upload/v1627584398465/UPvyr0vKeP.jpeg?w=200&h=200&fit=crop&crop=faces&auto=compress,format&format=webp",
        "alt": "Paulo Vitor Cruz's photo",
        "decoding": "async",
        "dataNimg": "intrinsic",
        "style": "position:absolute;top:0;left:0;bottom:0;right:0;box-sizing:border-box;padding:0;border:none;margin:auto;display:block;width:0;height:0;min-width:100%;max-width:100%;min-height:100%;max-height:100%"
      }
    },
    "data": {
      "hour": "14:51",
      "data": "Mar 20, 2023"
    },
    "contentText": [
      "Calma, o ChatGPT não vai roubar o seu emprego, muito pelo contrário, vai é te ajudar! No texto de hoje, vou te mostrar como usar o ChatGPT para te ajudar a desenvolver.",
      "ChatGPT é uma inteligência artificial criada pela OpenAI que está bem famosa por responder tão bem as perguntas de forma objetiva e direta. Muitos já dizem que é uma nova geração para ferramentas de pesquisa e que pode substituir até mesmo o Google.",
      "Nós sabemos bem: que programador vive sem o Google? E não tem problema nenhum com isso. As vezes precisamos mesmo procurar uma resposta, descobrir como funciona uma biblioteca, procurar o que é aquele maldito bug que você não consegue resolver.",
      "Com uma evolução pra o ChatGPT tudo fica mais fácil. Podemos ter a resposta diretamente em código, com uma solução pronta para nossos problemas.",
      "Peça para te introduzir a um tema",
      "Que tal ter um resumo, bastante completo até, do que é o novo tema que você está estudando? O ChatGPT é ótimo para te introduzir a um assunto, trazendo o funcionamento de forma bem detalhada. Olha só o retorno quando pergunto sobre Test Driven Design:",
      "https://cdn.hashnode.com/res/hashnode/image/upload/v1679323295780/d48108ce-0a86-4d29-960b-9d74b3ba8f1e.png?auto=compress,format&amp;format=webp",
      "Peça guias de estudo",
      "Além de um resumo sobre o tema, o ChatGPT pode te dar um guia bem completo para você estudar o assunto, com recomendações de onde você pode estudar:",
      "https://cdn.hashnode.com/res/hashnode/image/upload/v1679323342055/df9bace7-1819-4d9c-a313-3bef4f90dad8.png?auto=compress,format&amp;format=webp",
      "Peça solução para um erro de código",
      "Quem nunca passou horas e horas procurando a solução de erro? Pois o ChatGPT consegue te dar uma explicação exata do motivo desse erro, e como você pode resolver",
      "https://cdn.hashnode.com/res/hashnode/image/upload/v1679323382706/8824f8a7-0552-4212-b91d-ba82f3e94231.png?auto=compress,format&amp;format=webp",
      "Peça ajuda para desenvolver uma pequena função",
      "Faz parte, as vezes precisamos de alguma ajudinha para desenvolver uma pequena função, e o ChatGPT consegue te entregar isso",
      "https://cdn.hashnode.com/res/hashnode/image/upload/v1679323391412/bb7977c0-603c-4031-aff0-b9623d6f75cb.png?auto=compress,format&amp;format=webp",
      "Bem interessante não? E você, já usa alguma ferramenta com inteligência artificial para te ajudar no código? Conta pra gente em nosso canal do Discord!"
    ]
  },
  {
    "mainImage": {
      "tag": "IMG",
      "src": "https://cdn.hashnode.com/res/hashnode/image/upload/v1678103546812/e4cd6c17-9347-4ca8-ae36-4780361b3d72.png?w=1600&h=840&fit=crop&crop=entropy&auto=compress,format&format=webp",
      "alt": "Junior, Pleno e Sênior",
      "decoding": "async",
      "dataNimg": "responsive",
      "style": "position:absolute;top:0;left:0;bottom:0;right:0;box-sizing:border-box;padding:0;border:none;margin:auto;display:block;width:0;height:0;min-width:100%;max-width:100%;min-height:100%;max-height:100%;background-size:cover;background-position:0% 0%;filter:blur(20px);background-image:url(\"https://cdn.hashnode.com/res/hashnode/image/upload/v1678103546812/e4cd6c17-9347-4ca8-ae36-4780361b3d72.png?w=400&h=210&fit=crop&crop=entropy&auto=compress,format&format=webp&fm=blurhash\")"
    },
    "title": {
      "tag": "H1",
      "text": "Junior, Pleno e Sênior"
    },
    "authorInfo": {
      "name": "Paulo Vitor Cruz",
      "profile": "https://hashnode.com/@paulovitorcs",
      "image": {
        "tag": "IMG",
        "src": "https://cdn.hashnode.com/res/hashnode/image/upload/v1627584398465/UPvyr0vKeP.jpeg?w=200&h=200&fit=crop&crop=faces&auto=compress,format&format=webp",
        "alt": "Paulo Vitor Cruz's photo",
        "decoding": "async",
        "dataNimg": "intrinsic",
        "style": "position:absolute;top:0;left:0;bottom:0;right:0;box-sizing:border-box;padding:0;border:none;margin:auto;display:block;width:0;height:0;min-width:100%;max-width:100%;min-height:100%;max-height:100%"
      }
    },
    "data": {
      "hour": "13:00",
      "data": "Mar 6, 2023"
    },
    "contentText": [
      "Vamos começar a discutir por aqui: o que é um desenvolvedor júnior, um pleno e um sênior?",
      "Nossa profissão como desenvolvedor naturalmente traz algumas particularidades em comparação com outras atividades: é “rápido” se tornar um desenvolvedor. Muitos já dizem que não precisa de graduação para atuar com desenvolvimento e vemos muitos cursos e bootcamps que prometem te preparar para toda jornada de desenvolvimento com pouquíssimo tempo de estudo. Enquanto isso, temos desenvolvedores de longa data que precisam se readaptar completamente a uma tecnologia que acabou de surgir no mercado. No meio dessa confusão, como definir o que é um desenvolvedor júnior, um pleno e um sênior?",
      "Júnior, Pleno e Sênior",
      "Primeiramente vamos entender, em um conceito geral, o que é um júnior, um pleno e um sênior.",
      "O senso comum diz que essa definição vêm conforme o tempo em que você está no mercado de trabalho: júnior até 5 anos no mercado, pleno até 10 anos, e sênior de 10 em diante. Outra forma de definir o que é júnior, pleno e sênior é comparando a produtividade: o júnior é alguém iniciante, que está começando agora com desenvolvimento e ainda precisa de bastante ajuda; o pleno é alguém que consegue entregar demandas de forma independente, e dá conta de resolver sozinho; o sênior é aquele que não só consegue resolver as demandas, mas sabe o que está fazendo e consegue repassar este conhecimento ao júnior e ao pleno.",
      "Na prática, essas duas definições podem se contradizer bastante. Vemos desenvolvedores sêniores com 3-4 anos de experiência e, enquanto vemos desenvolvedores com anos no mercado de trabalho para que não conseguem entregar uma simples demanda porque está trabalhando com uma nova tecnologia.",
      "Temos que considerar que ser desenvolvedor difere de qualquer outra profissão. Temos uma profissão que é relativamente fácil entrar no mercado, quando comparada as outras; ao mesmo tempo, tudo está mudando a todo tempo, daqui a 5 anos a tecnologia que você trabalha não ser mais relevante para o mercado. Pode ser bem capaz alguém com pouquíssimo tempo de experiência conhecer bem mais de uma tecnologia do que alguém com anos de experiência. E pensando assim, é realmente difícil definir o que é ser um Júnior, um pleno ou um sênior.",
      "A experiência é, sim, importante",
      "Mas calma, é claro que a experiência é importante. Alguém com 10 anos no mercado indiscutivelmente vai ter mais conhecimento do que alguém com 2 anos de trabalho como desenvolvedor.",
      "As situações, os diferentes problemas encarados durante os anos que se passam trabalhando como desenvolvedor sempre terão muito valor, independente da tecnologia.",
      "Como já disse em alguns outros textos aqui na devGo, desenvolver e programar é muito mais do que código. Trata-se de conceitos, de lógica e de entendimento do que há por trás do código. Uma nova linguagem de programação ou um novo framework jamais irá te tirar do mercado, e seus conhecimentos e experiência sempre serão úteis.",
      "Por que se limitar a um nível?",
      "Precisamos entender que é, sim, possível que alguém com anos de experiência, que conheça todos os conceitos e tenha toda a lógica trabalhada por anos simplesmente não se adapte a nova tecnologia ou novo método de trabalho. Alguém, iniciante e bastante dedicado, poderia muito bem superar as habilidades e conseguir entregar tão bem quanto um desenvolvedor de anos atrás.",
      "Ao contratar alguém, por exemplo, o meu grande ponto de importância é o comprometimento e autoconfiança. É claro que vou analisar o código, buscar qualidades diferentes a depender do nível proposto na vaga, mas ao ser uma pessoa comprometida e esforçada poderia muito bem abandonar estes conceitos pré-definidos de Júnior, pleno e sênior.",
      "A grande questão, por aqui, é porque limitar pessoas a uma “etiqueta”. Não que devemos desconsiderar conhecimento, estudo e experiência, mas sim estarmos abertos a novas possibilidades, afinal podemos sempre ser surpreendidos.",
      "E você, como você vê os juniores, os plenos e os sêniores em desenvolvimento? Participe do nosso canal do Discord e conte para gente!"
    ]
  },
  {
    "mainImage": {
      "tag": "IMG",
      "src": "https://cdn.hashnode.com/res/hashnode/image/upload/v1675435032473/36f426f6-145d-4e60-b9e4-e2e8576f1664.png?w=1600&h=840&fit=crop&crop=entropy&auto=compress,format&format=webp",
      "alt": "Eu deveria usar uma Web View no meu app?",
      "decoding": "async",
      "dataNimg": "responsive",
      "style": "position:absolute;top:0;left:0;bottom:0;right:0;box-sizing:border-box;padding:0;border:none;margin:auto;display:block;width:0;height:0;min-width:100%;max-width:100%;min-height:100%;max-height:100%;background-size:cover;background-position:0% 0%;filter:blur(20px);background-image:url(\"https://cdn.hashnode.com/res/hashnode/image/upload/v1675435032473/36f426f6-145d-4e60-b9e4-e2e8576f1664.png?w=400&h=210&fit=crop&crop=entropy&auto=compress,format&format=webp&fm=blurhash\")"
    },
    "title": {
      "tag": "H1",
      "text": "Eu deveria usar uma Web View no meu app?"
    },
    "authorInfo": {
      "name": "Paulo Vitor Cruz",
      "profile": "https://hashnode.com/@paulovitorcs",
      "image": {
        "tag": "IMG",
        "src": "https://cdn.hashnode.com/res/hashnode/image/upload/v1627584398465/UPvyr0vKeP.jpeg?w=200&h=200&fit=crop&crop=faces&auto=compress,format&format=webp",
        "alt": "Paulo Vitor Cruz's photo",
        "decoding": "async",
        "dataNimg": "intrinsic",
        "style": "position:absolute;top:0;left:0;bottom:0;right:0;box-sizing:border-box;padding:0;border:none;margin:auto;display:block;width:0;height:0;min-width:100%;max-width:100%;min-height:100%;max-height:100%"
      }
    },
    "data": {
      "hour": "14:38",
      "data": "Feb 3, 2023"
    },
    "contentText": [
      "Essa é uma pergunta que sempre surge quando você já tem uma aplicação web, e pretende construir um app. Eu deveria usar uma Web View? No texto de hoje, vamos discutir essa solução.",
      "O que é uma Web View?",
      "Um Web View é como se você abrisse um navegador dentro do seu aplicativo, e utilizasse a página por ali mesmo. Parece muito com um &lt;iframe&gt;, que temos no HTML, mas para aplicações nativas de um celular.",
      "O usuário se mantém no aplicativo, mas, na verdade, acessa uma aplicação web, completamente independente desta aplicação móbile.",
      "Quais são minhas opções de desenvolvimento?",
      "Não sendo um Web View podemos usar a opção mais padrão e natural de construir um novo aplicativo.",
      "A partir daí temos várias opções: Flutter, Swift, Kotlin, React Native e tantas outras, que devem ser analisadas individualmente da forma que melhor te agrade, ou seja, boa para o seu negócio, tal qual uma escolha de linguagem de programação ou framework a ser utilizado no projeto.",
      "Vale a pena?",
      "“Tenho minha página web, responsiva, e funciona muito bem no celular. Porque então desenvolver um aplicativo e manter esse aplicativo, para fazer a mesma coisa?”.",
      "Este é um argumento que de início faz bastante sentido. Você realmente pode economizar tempo de desenvolvimento e recursos de uma equipe para desenvolver um aplicativo. A manutenção do aplicativo é mais fácil, visto que é preciso trabalhar somente na versão web.",
      "Mas existe um motivo pelo qual grandes empresas não usam Web View em seus aplicativos:",
      "As lojas Google Play e AppStore não recomendam",
      "As duas maiores lojas de aplicativo, para Android e iOS, respectivamente, não recomendam aplicativos feitos somente com WebView.",
      "Por não poderem garantir a segurança de aplicativos feitos a partir de Web View a seus usuários, as lojas tendem a até mesmo não aceitar a publicação dos aplicativos, e deixam isso bastante em claro nas documentações:",
      "O Google Play diz:",
      "",
      "“Your app must not merely provide a webview of a website or have a primary purpose of driving affiliate traffic to a website, regardless of ownership of the website.”",
      "",
      "A Apple Store também:",
      "",
      "“Your app should include features, content, and UI that elevate it beyond a repackaged website. If your app is not particularly useful, unique, or “app-like,” it doesn’t belong on the App Store”",
      "",
      "Construir então um aplicativo com base em uma Web View pode ser bastante perigoso, afinal, ninguém quer correr o risco de seu aplicativo sair da loja de uma hora para outra.",
      "Bugs acontecem",
      "Um Web View não é o mesmo que o navegador do seu celular.",
      "Lembram do finado Internet Explorer? Programávamos o site, estava tudo certo, funcionando 100%, mas era abrir a página no Explorer e estava toda quebrada. Acontece bem parecido em um Web View.",
      "Por mais que seja mais rápido simplesmente trazer sua página para dentro do app em um web view, bugs inesperados podem acontecer, e quebras imprevisiveis na sua página podem estar presentes. Tratar esses bugs podem ser uma experiência bastante descontrolada, pois perdemos referência do que acontece na página justamente por se tratar de um Web View.",
      "Experiência do usuário",
      "Um Web View ainda não é um aplicativo.",
      "Desenvolver para web e desenvolver para aplicativo são coisas bem diferentes, justamente por se tratarem de ambientes completamente diferentes. Deve ser visto que um Web View é apenas uma “simulação” de uma página na web. Da mesma forma que bugs podem acontecer, a experiência do usuário também não é a mesma.",
      "Quando se constrói um aplicativo, as próprias ferramentas e frameworks utilizados são optimizados para funcionamento dentro de um ambiente mobile. É muito mais fluído, a perfomance é muito melhor, e trazem ao usuário a mesma experiência que ele tem ao utilizar seu dispositivo naturalmente.",
      "Este é até o grande diferencial de um aplicativo: a experiência do usuário. Por mais que pareçam pequenos detalhes, na prática, isso é uma grande diferença para o usuário. Uma boa experiência do usuário: trás mais confiança no seu produto, mantém o usuário por mais tempo na aplicação, e consequentemente gera uma conversão melhor.",
      "Então, quando usar uma Web View?",
      "Geralmente utilizamos Web View em conteúdos “estáticos” que trazem informação importante ao usuário e deve ser mantida sempre atualizada, como, por exemplo, uma página de política de privacidade. Este, sim, é um exemplo seguro de uso para uma Web View.",
      "Mas, é claro que construir um app é custoso. Se trata mesmo de uma aplicação completamente nova, portanto, assim como tudo em desenvolvimento de software, deve-se sempre pensar no custo benefício. Seu projeto está disposto a aceitar os riscos? O quão importante é atrair o cliente para o seu produto? São essas as reais perguntas que devem ser feitas durante a escolha de desenvolvimento com Web View ou um App Nativo.",
      "Quer discutir um pouco mais esse caso com a gente? Participe do nosso canal do Discord e acompanhe nossos conteúdos!"
    ]
  },
  {
    "mainImage": {
      "tag": "IMG",
      "src": "https://cdn.hashnode.com/res/hashnode/image/upload/v1674227255281/b7482802-48dd-4ec3-a4dd-9c39ce63cb76.png?w=1600&h=840&fit=crop&crop=entropy&auto=compress,format&format=webp",
      "alt": "Introdução à validação de schema JSON utilizando o Postman",
      "decoding": "async",
      "dataNimg": "responsive",
      "style": "position: absolute; inset: 0px; box-sizing: border-box; padding: 0px; border: none; margin: auto; display: block; width: 0px; height: 0px; min-width: 100%; max-width: 100%; min-height: 100%; max-height: 100%;"
    },
    "title": {
      "tag": "H1",
      "text": "Introdução à validação de schema JSON utilizando o Postman"
    },
    "authorInfo": {
      "name": "Alexandre Guimarães Braga",
      "profile": "https://hashnode.com/@alexgbraga",
      "image": {
        "tag": "IMG",
        "src": "https://cdn.hashnode.com/res/hashnode/image/upload/v1674226052431/f54bbefb-a9db-4dfd-9551-8ecc9360737d.png?w=200&h=200&fit=crop&crop=faces&auto=compress,format&format=webp",
        "alt": "Alexandre Guimarães Braga's photo",
        "decoding": "async",
        "dataNimg": "intrinsic",
        "style": "position:absolute;top:0;left:0;bottom:0;right:0;box-sizing:border-box;padding:0;border:none;margin:auto;display:block;width:0;height:0;min-width:100%;max-width:100%;min-height:100%;max-height:100%"
      }
    },
    "data": {
      "hour": "15:10",
      "data": "Jan 20, 2023"
    },
    "contentText": [
      "Este artigo tem por objetivo orientar sobre o processo de validação das respostas de uma API utilizando o Postman. Através de tal processo é possível comparar, de forma automatizada, as respostas recebidas com as regras de um schema previamente definido, validando a estrutura do JSON, bem como a tipagem, dentre outras especificações. Isso garante que o retorno esteja totalmente de acordo com o que se espera, padronizando os dados e minimizando a chance de erros ao fazer a integração com o front-end ou em outras utilizações da API.",
      "Considerações iniciais",
      "",
      "Os passos necessários para a execução dos testes de validação, bem como a preparação do ambiente para tal, serão descritos da maneira mais clara possível para que mesmo um iniciante consiga acompanhar e reproduzir os resultados sem dificuldades, mas é esperado o mínimo de familiaridade com o Postman, pois este texto foi escrito partindo da suposição de que algumas funcionalidades básicas e uma visão geral do software já são conhecidos.",
      "",
      "O Postman possui duas bibliotecas integradas para a realização das validações: tv4 (Tiny Validator for v4 JSON Schema) e Ajv (Another JSON Schema Validator). Apesar de a documentação oficial do Postman utilizar a tv4 nos exemplos, esta não é mais mantida desde 2017, e seu uso, portanto, não é recomendado.",
      "",
      "É importante se orientar de modo a sempre buscar testar para as falhas primeiro para ter certeza de que a validação funciona da maneira correta (para cada cenário a ser testado, garante-se que o teste irá falhar propositalmente em um primeiro momento para, então, seguir com a validação). Isso garante a confiabilidade do teste, afinal, se este não falha em nenhum cenário, como se pode ter certeza se o que passa é realmente válido?",
      "",
      "Pratique um pouco com schemas gerados manualmente, pelo menos no começo. Deixe para utilizar geradores automáticos, como o https://jsonschema.net, quando já possuir um melhor entendimento da estrutura típica de um schema e suas regras, e precisar lidar com schemas longos e complexos. Dessa forma, o arquivo gerado não vai lhe parecer confuso e você será capaz de fazer intervenções quando necessário, garantindo a qualidade dos testes, pois saberá exatamente o que cada coisa faz.",
      "",
      "",
      "Preparação do ambiente",
      "Antes de mais nada, vamos criar uma coleção, definir as variáveis de ambiente, gerar um exemplo e criar um mock de servidor para realizar os testes iniciais.",
      "Coleção (collection)",
      "Coleções são “pastas” que possibilitam o armazenamento de requisições, facilitando a organização dos endpoints para agilizar utilizações futuras. No menu lateral do Postman clique em Collections e, em seguida, no botão “+” para adicionar uma nova coleção:",
      "https://cdn.hashnode.com/res/hashnode/image/upload/v1674226428587/28055019-e4cd-4196-837f-0cc9f197c0f9.png?auto=compress,format&amp;format=webp",
      "Defina um nome, clique sobre a coleção com o botão direito (ou no menu de 3 pontos), e adicione uma nova requisição do tipo GET em Add request. O endpoint que será será utilizado é:",
      "https://postman-echo.com/get?foo1=bar1&amp;foo2=bar2",
      "https://cdn.hashnode.com/res/hashnode/image/upload/v1674226457114/4f925c27-8a12-42ae-b824-cc085744c956.png?auto=compress,format&amp;format=webp",
      "Variáveis de ambiente (environment variables)",
      "As variáveis de ambiente, apesar de não serem estritamente necessárias, ajudam no controle dos endpoints a serem testados e agilizam requisições futuras por meio da reutilização de valores. Após configurado, a URL acima pode ser substituída por {{url_API}}, por exemplo. Se a coleção já possuir variáveis definidas, pule esta etapa e prossiga com a criação de exemplos.",
      "Para não estender demais o texto e desviar da sua finalidade principal, acesse mais informações sobre a criação e utilização de variáveis dentro do Postman clicando aqui.",
      "Criando exemplos",
      "No contexto do Postman, exemplos são cenários pré-definidos de requisições e respostas que podem ser editados e utilizados nas simulações de servidor, como veremos mais adiante. A maneira mais fácil de se criar um exemplo é a partir de uma requisição para a API que será testada.",
      "Vamos criar um exemplo para uma requisição do tipo GET. Para isso, basta abrir a coleção, escolher a requisição desejada (no caso, a que foi criada anteriormente) e clicar em Send. Feito isso, clique em Save Response e, em seguida, Save as example.",
      "https://cdn.hashnode.com/res/hashnode/image/upload/v1674226486680/4b606e31-b232-45b2-bf5c-4ecee07b9075.png?auto=compress,format&amp;format=webp",
      "Automaticamente será aberta uma nova aba com o exemplo recém criado. Note que a tela é bem parecida com a de uma requisição comum, e que as informações apresentadas inicialmente são idênticas àquelas da requisição feita anteriormente:",
      "https://cdn.hashnode.com/res/hashnode/image/upload/v1674226499638/9a252d98-b7ab-4aeb-baaf-4c8b972adb29.png?auto=compress,format&amp;format=webp",
      "É possível editar parâmetros, headers e o body, assim como em uma requisição normal. Porém, diferentemente do que ocorre nesta, um exemplo permite que a resposta também seja editada, bem como o código de status da mesma. Com isso, é possível criar cenários controlados - perfeito para a execução de testes - a partir do uso de mocks. Para mais detalhes sobre os exemplos, outras formas de criação e utilizações, clique aqui.",
      "Mock de servidor",
      "A ideia por trás do mock é criar um endpoint para um servidor falso que irá simular o comportamento de uma API real, enviando retornos para as requisições feitas, e é aqui que entram os exemplos citados anteriormente: com base no tipo de requisição feita para o mock, o Postman encontrará um exemplo correspondente e responderá com os dados contidos neste. Desta forma, será possível, quando necessário, modificar tais respostas para forçar situações de erros propositais, por exemplo, garantindo que o teste falhe nos cenários em que espera-se que isso ocorra e seu teste seja confiável. Portanto, para que o mock funcione adequadamente, é necessário que ao menos um exemplo do mesmo tipo da requisição que se deseja fazer tenha sido criado na coleção.",
      "Para criar o mock, selecione Collections, clique no menu de 3 pontos da coleção que deseja simular e, em seguida, selecione Mock collection. É preciso estar logado em uma conta do Postman para criar mocks.",
      "https://cdn.hashnode.com/res/hashnode/image/upload/v1674226513541/bf0e75d7-60fd-4f18-95b2-6b4cd1a3dc67.png?auto=compress,format&amp;format=webp",
      "Na tela seguinte, escolha um nome para o mock e confira se a coleção a ser simulada está correta (caso exista mais de uma no seu workspace). Você pode selecionar um ambiente para que o mock use as variáveis ali definidas, onde, posteriormente, poderá incluir a URL do mock. Também é possível optar por salvar automaticamente a URL em uma variável, que será criada em um novo ambiente. Aqui seguirei com a segunda opção, mas sinta-se livre para fazer o que achar melhor. Por fim, clique em Create Mock Server.",
      "https://cdn.hashnode.com/res/hashnode/image/upload/v1674226530357/bf39b39c-641b-4df9-9bc5-bcc1d58961ac.png?auto=compress,format&amp;format=webp",
      "Tendo criado o mock, já é possível testá-lo. Abra uma nova aba no Postman. No canto superior direito, selecione o ambiente nomeado tal qual o mock criado e monte a URL para a requisição, substituindo a primeira parte da URL original do endpoint, da seguinte forma:",
      "{{url}}/get?foo1=bar1&amp;foo2=bar2",
      "Onde {{url}} é a variável de ambiente correspondente à URL do mock, gerada automaticamente na etapa de criação deste, e /get?foo1=bar1&amp;foo2=bar2 é o caminho do endpoint original e seus parâmetros. Caso não queira fazer uso da variável de ambiente, ao invés de {{url}} basta inserir a URL do mock diretamente.",
      "https://cdn.hashnode.com/res/hashnode/image/upload/v1674226555171/d4131500-ec75-4fd6-83ca-72650d871fd0.png?auto=compress,format&amp;format=webp",
      "Ao enviar a requisição, se tudo tiver sido feito corretamente, será apresentado um retorno. Pode-se notar que a resposta recebida é idêntica àquela enviada pelo endpoint original da API, mas isso é porque este retorno é exatamente aquele criado junto ao exemplo, que ainda não foi alterado. Ou seja, quaisquer modificações feitas (e salvas) lá irão se refletir no mock.",
      "Validação do schema",
      "A primeira coisa a ser feita na validação de um schema JSON é estabelecer a estrutura que o compõe. O ideal aqui é ter acesso à documentação provida, por exemplo, através do Swagger, e copiar o schema disponibilizado. Mas, para fins didáticos, aqui será utilizada como base a própria resposta enviada pela API, de onde ele será extraído manualmente.",
      "{",
      "    \"args\": {",
      "        \"foo1\": \"bar1\",",
      "        \"foo2\": \"bar2\"",
      "    },",
      "    \"headers\": {",
      "        \"x-forwarded-proto\": \"https\",",
      "        \"x-forwarded-port\": \"443\",",
      "        \"host\": \"postman-echo.com\",",
      "        \"x-amzn-trace-id\": \"Root=1-63addcc9-5ab135d701ba98d92efac901\",",
      "        \"user-agent\": \"PostmanRuntime/7.30.0\",",
      "        \"accept\": \"*/*\",",
      "        \"postman-token\": \"8bff98e4-237c-4940-bef8-067b3998dd58\",",
      "        \"accept-encoding\": \"gzip, deflate, br\",",
      "        \"cookie\": \"sails.sid=s%3AmyxFsngmsAqbFM1FofXwBn3M-TlpbIOf.NjXpy0b07Qp08dIDDeOAy9iK7oh5w6Y%2FhyBpbzM9Z1c\"",
      "    },",
      "    \"url\": \"&lt;https://postman-echo.com/get?foo1=bar1&amp;foo2=bar2&gt;\"",
      "}",
      "",
      "Logo de cara é possível perceber que a resposta é composta de um objeto contendo 3 propriedades, sendo duas delas também do tipo objeto e uma do tipo string. Traduzindo para uma estrutura esquemática, inicialmente temos o seguinte:",
      "const schema = {",
      "    \"type\": \"object\",",
      "    \"properties\": {",
      "        \"args\": {",
      "            \"type\": \"object\"",
      "        },",
      "        \"headers\": {",
      "            \"type\": \"object\"",
      "        },",
      "        \"url\": {",
      "            \"type\": \"string\"",
      "        }",
      "    }",
      "}",
      "",
      "No primeiro nível, a raiz, temos a definição da tipagem geral do schema: \"type\": \"object\". Em seguida, properties enumera as propriedades contidas no objeto principal e, para cada uma, é declarada sua tipagem, assim como foi feito no nível anterior. Essa é a base inicial do schema, ainda bem simples, mas já é possível realizar os primeiros testes.",
      "Dentro da aba do mock, localize a aba Tests, abaixo da barra de endereços, e declare a variável schema, como feito no exemplo acima. Em seguida, declare a função de teste:",
      "pm.test(\"Validate schema\", () =&gt; {",
      "    pm.response.to.have.jsonSchema(schema);",
      "});",
      "",
      "https://cdn.hashnode.com/res/hashnode/image/upload/v1674226572648/d5cfb7e3-a1b5-4e55-8e65-b09999bd7b9a.png?auto=compress,format&amp;format=webp",
      "Aqui vale abrir um pequeno parêntese para destrinchar a função e entender o que está sendo feito.",
      "De acordo com a documentação do Postman:",
      "",
      "O objeto pm contém todas as informações pertencentes ao script que está sendo executado e permite o acesso a uma cópia da requisição que está sendo enviada ou da resposta recebida. Também permite obter e definir variáveis de ambiente e globais.",
      "",
      "Portanto, o objeto pm é fundamental na construção de testes, sejam de que tipo for. Dentre as propriedades e métodos associados a este objeto, o primeiro a ser utilizado aqui é o método test, que recebe dois argumentos. O primeiro é uma string, que será usada para identificar o teste em questão. É recomendável escolher um nome claro e autoexplicativo, que facilite o entendimento do que se propõe tal teste (neste exemplo foi usado o nome “Validate schema”). O segundo argumento é uma função onde o teste em si será especificado. No caso do nosso exemplo, uma função anônima contendo a seguinte linha: pm.response.to.have.jsonSchema(schema), onde pm.response acessa a resposta recebida do servidor e, em seguida, é feita a asserção to.have.jsonSchema(schema) para garantir que a resposta satisfaça o schema definido anteriormente. Até o momento o schema ainda é bem simples, mas qualquer resposta recebida com tipagem diferente para as propriedades listadas não deverá passar no teste.",
      "Se for enviada uma requisição agora o teste irá passar, mas para ter certeza que funciona corretamente devemos modificar a especificação do schema ou a resposta para forçar uma situação de erro. A fim de evitar confusões mais adiante e você não acabe com um schema - e, consequentemente, um teste - incorreto, o ideal é fazer alterações apenas na resposta, pois é justamente pra isso que criamos o exemplo. Volte na aba do exemplo e altere o tipo de alguma das propriedades. No caso, irei alterar a propriedade url de string para um valor numérico qualquer:",
      "{",
      "    \"args\": {",
      "        \"foo1\": \"bar1\",",
      "        \"foo2\": \"bar2\"",
      "    },",
      "    \"headers\": {",
      "        \"x-forwarded-proto\": \"https\",",
      "        \"x-forwarded-port\": \"443\",",
      "        \"host\": \"postman-echo.com\",",
      "        \"x-amzn-trace-id\": \"Root=1-63addcc9-5ab135d701ba98d92efac901\",",
      "        \"user-agent\": \"PostmanRuntime/7.30.0\",",
      "        \"accept\": \"*/*\",",
      "        \"postman-token\": \"8bff98e4-237c-4940-bef8-067b3998dd58\",",
      "        \"accept-encoding\": \"gzip, deflate, br\",",
      "        \"cookie\": \"sails.sid=s%3AmyxFsngmsAqbFM1FofXwBn3M-TlpbIOf.NjXpy0b07Qp08dIDDeOAy9iK7oh5w6Y%2FhyBpbzM9Z1c\"",
      "    },",
      "    \"url\": 123",
      "}",
      "",
      "Salve a alteração, volte na aba do mock e envie novamente a requisição. Se tudo tiver sido feito corretamente, o teste deverá falhar:",
      "https://cdn.hashnode.com/res/hashnode/image/upload/v1674226599257/506a838b-568e-4e0a-b7bd-32ade65b9d58.png?auto=compress,format&amp;format=webp",
      "Note que a mensagem de erro nos dá uma pista do que houve: era esperado que data.url fosse do tipo string, conforme definimos no schema. Ótimo! Sinal de que o teste funciona corretamente - por enquanto. Contudo, sua eficiência ainda está limitada pelo nível de especificidade definido no schema. Perceba que se formos até o exemplo e alterarmos o nome de alguma dessas propriedades, adicionarmos propriedades não especificadas, excluirmos da resposta alguma das existentes ou alterarmos o tipo de uma das propriedades aninhadas, o teste passará da mesma forma, pois a especificação, até o momento, é:",
      "",
      "A resposta deve vir como um objeto, e sempre que as propriedades args, headers e url estiverem presentes, seus tipos devem ser object, object e string, respectivamente.",
      "",
      "Qualquer cenário diferente desse ainda não é coberto pelo teste, permitindo a validação equivocada de vários erros em potencial, então é hora de aumentar o grau de especificidade para termos um teste mais rigoroso. Vale atentar também para erros de digitação ao definir o schema, pois se args for escrito como arg, por exemplo, o Ajv (a biblioteca de testes que usamos) irá entender que se trata de uma outra propriedade (e não há nada ainda que impeça a presença de propriedades não especificadas), ignorando possíveis problemas em args.",
      "Voltando ao schema, a primeira alteração que já pode ser feita é “descrever” melhor as propriedades args e headers, definindo \"type\" e \"properties\" como fizemos anteriormente, garantindo que a tipagem de todas propriedades não sejam violadas:",
      "const schema = {",
      "    \"type\": \"object\",",
      "    \"properties\": {",
      "        \"args\": {",
      "            \"type\": \"object\",",
      "            \"properties\": {",
      "                \"foo1\": {",
      "                    \"type\": \"string\"",
      "                },",
      "                \"foo2\": {",
      "                    \"type\": \"string\"",
      "                }",
      "            }",
      "        },",
      "        \"headers\": {",
      "            \"type\": \"object\",",
      "            \"properties\": {",
      "                \"x-forwarded-proto\": {",
      "                    \"type\": \"string\"",
      "                },",
      "                \"x-forwarded-port\": {",
      "                    \"type\": \"string\"",
      "                },",
      "                \"host\": {",
      "                    \"type\": \"string\"",
      "                },",
      "                \"x-amzn-trace-id\": {",
      "                    \"type\": \"string\"",
      "                },",
      "                \"user-agent\": {",
      "                    \"type\": \"string\"",
      "                },",
      "                \"accept\": {",
      "                    \"type\": \"string\"",
      "                },",
      "                \"postman-token\": {",
      "                    \"type\": \"string\"",
      "                },",
      "                \"accept-encoding\": {",
      "                    \"type\": \"string\"",
      "                },",
      "                \"cookie\": {",
      "                    \"type\": \"string\"",
      "                }",
      "            }",
      "        },",
      "        \"url\": {",
      "            \"type\": \"string\"",
      "        }",
      "    }",
      "}",
      "",
      "Até agora apenas listamos as propriedades e suas tipagens, mas não especificamos se existem propriedades obrigatórias e quais seriam estas. Podemos fazer isso através de required, que se constitui como um array de strings. Para fins de demonstração, required será adicionado apenas para a raiz do schema, mas pode ser incluído para os objetos args e/ou headers também, claro. O importante é entender seu uso:",
      "const schema = {",
      "    \"type\": \"object\",",
      "    \"properties\": {",
      "                \"args\": {...},",
      "        \"headers\": {...},",
      "        \"url\": {",
      "            \"type\": \"string\"",
      "        }",
      "    },",
      "    \"required\": [\"args\", \"headers\", \"url\"]",
      "}",
      "",
      "// Detalhes de \"args\" e \"headers\" omitidos apenas para abreviar o exemplo",
      "",
      "A partir de agora, a ausência de args, headers e/ou url na resposta deve resultar em erro. Como sempre, é importante testar para o erro antes de prosseguir, então irei remover url e reenviar a requisição:",
      "https://cdn.hashnode.com/res/hashnode/image/upload/v1674226648094/910b1c89-3c69-4649-be07-07b2bd6a0db1.png?auto=compress,format&amp;format=webp",
      "Porém, a presença de propriedades adicionais ainda não é tratada corretamente, de modo que o schema, cumpridos os demais requisitos, continua sendo válido ainda que contenha outras propriedades além das 3 já conhecidas. Neste exemplo específico, não queremos isso. Para lidar com esse problema, utilizaremos additionalProperties:",
      "const schema = {",
      "    \"type\": \"object\",",
      "    \"properties\": {",
      "        \"args\": {...},",
      "        \"headers\": {...},",
      "        \"url\": {",
      "            \"type\": \"string\"",
      "        }",
      "    },",
      "    \"required\": [\"args\", \"headers\", \"url\"],",
      "    \"additionalProperties\": false",
      "}",
      "",
      "// Detalhes de \"args\" e \"headers\" omitidos apenas para abreviar o exemplo",
      "",
      "Ao enviar uma requisição contendo propriedades adicionais no retorno, a validação deverá falhar:",
      "https://cdn.hashnode.com/res/hashnode/image/upload/v1674226685763/51fd6bac-ea15-447a-960b-03896b1a98a1.png?auto=compress,format&amp;format=webp",
      "Aqui cabe uma diferenciação importante entre required e additionalProperties: na primeira estão listadas as propriedades que devem, obrigatoriamente, existir na resposta do servidor, mas não diz nada sobre propriedades extras; já na segunda podemos ou não permitir que a resposta contenha propriedades das quais não temos conhecimento prévio. Sendo assim, um schema contendo as propriedades X, Y e Z que não as liste como obrigatórias, mas onde additionalProperties receba o valor false, não exigirá que X, Y ou Z estejam presentes na resposta, mas invalidará o teste se esta contiver a propriedade N (não prevista) ou no caso de uma das 3 anteriores estar com o nome incorreto (já que seria tratada como desconhecida pelo schema).",
      "Conclusão",
      "Com isso, nosso schema agora é capaz de definir as propriedades, suas tipagens, lista eventuais propriedades obrigatórias e permite ou não a presença de outras, estando pronto para ser usado na validação dos retornos da API verdadeira, bastando copiar o conteúdo da aba Tests do mock. São regras relativamente simples perto do grau de especificidade que é possível atingir, mas já é o suficiente para realizar testes que irão cobrir boa parte dos cenários menos exigentes, garantindo a qualidade dos dados transmitidos. Na maioria dos casos, quando se atua com outras equipes, o schema já estará definido na documentação, poupando parte do trabalho aqui descrito de identificar as regras manualmente. De toda forma, é sempre uma boa utilizar os mocks para executar alguns testes rápidos pra ter certeza de que está tudo ok com as definições. Recomendo uma lida nas regras específicas para propriedades do tipo array, visto que é um tipo bem comum e que não foi abordado neste texto. Para saber mais sobre as regras e o que pode ser definido além do que foi apresentado aqui, a documentação está sempre disponível: https://json-schema.org/. Bons testes!",
      "Links úteis",
      "",
      "Documentação: https://json-schema.org/",
      "",
      "Validadores, geradores, utilitários, etc: https://json-schema.org/implementations.html",
      "",
      "Ajv: https://github.com/ajv-validator/ajv",
      "",
      "JSON Schema (gerador online): https://www.jsonschema.net/",
      "",
      ""
    ]
  },
  {
    "mainImage": {
      "tag": "IMG",
      "src": "https://cdn.hashnode.com/res/hashnode/image/upload/v1673013278010/e0d633c8-5484-4fa0-9ba7-d120cb80442f.png?w=1600&h=840&fit=crop&crop=entropy&auto=compress,format&format=webp",
      "alt": "Uma API eficiente e simples",
      "decoding": "async",
      "dataNimg": "responsive",
      "style": "position: absolute; inset: 0px; box-sizing: border-box; padding: 0px; border: none; margin: auto; display: block; width: 0px; height: 0px; min-width: 100%; max-width: 100%; min-height: 100%; max-height: 100%;"
    },
    "title": {
      "tag": "H1",
      "text": "Uma API eficiente e simples"
    },
    "authorInfo": {
      "name": "Paulo Vitor Cruz",
      "profile": "https://hashnode.com/@paulovitorcs",
      "image": {
        "tag": "IMG",
        "src": "https://cdn.hashnode.com/res/hashnode/image/upload/v1627584398465/UPvyr0vKeP.jpeg?w=200&h=200&fit=crop&crop=faces&auto=compress,format&format=webp",
        "alt": "Paulo Vitor Cruz's photo",
        "decoding": "async",
        "dataNimg": "intrinsic",
        "style": "position:absolute;top:0;left:0;bottom:0;right:0;box-sizing:border-box;padding:0;border:none;margin:auto;display:block;width:0;height:0;min-width:100%;max-width:100%;min-height:100%;max-height:100%"
      }
    },
    "data": {
      "hour": "13:55",
      "data": "Jan 6, 2023"
    },
    "contentText": [
      "Já falamos sobre APIs por aqui, e temos até um artigo recomendando boas práticas de desenvolvimento de uma aplicação RESTful, mas uma dúvida sempre constante é como construir nossas aplicações. Qual arquitetura utilizo? Como posso montar a estrutura do código? Como organizar meus arquivos? No texto de hoje, vou apresentar uma estrutura simples, porém bem eficiente para você construir a sua API.",
      "Tento aqui construir uma aplicação sem muita complexidade ou impeditivos, realmente da forma mais simples. Temos algumas alternativas como o Clean Architecture, que vem se tornando bastante popular, mas a ideia é mesmo ser bastante direto, sem nos esquecer de conceitos importantes de desenvolvimento e boas práticas de programação.",
      "O que não pode faltar em uma API?",
      "Precisamos definir nossas rotas; para gerenciar essas rotas, precisaremos dos controllers; e por fim, para trazer funcionalidade a nossa aplicação, precisaremos dos services.",
      "Este é um modelo bastante simples, padrão até mesmo do NestJS, Laravel e outros frameworks de API. É a partir deste modelo que vamos nos aprofundar um pouco, explorar recursos e tentar definir uma API simples e eficiente.",
      "Montando a estrutura",
      "Veja bem que por aqui, definirei muito bem a responsabilidade de cada estrutura necessária para a API. É importante que siga muito bem a sua função, não fazendo nada mais, além disso. Gosto também de organizar os arquivos de acordo com essa estrutura, cada qual em sua pasta, cada arquivo de acordo com a sua funcionalidade —por ex: na pasta rotas, os arquivos products.route.ts e payment.route.ts",
      "Rotas",
      "Toda API começa pela definição de rotas: os caminhos, ou endpoints, que nossas aplicações clientes irão utilizar para solicitar e receber informações da nossa API.",
      "As rotas devem ser sempre bem escritas, de forma clara e intuitiva a quem vá utilizar. É bastante importante seguir bem os padrões de servidores HTTP, que irão até te ajudar bastante na legibilidade de rotas.",
      "As rotas devem ser responsáveis por definir os caminhos, e enviar aos controllers. Apenas isso.",
      "Se você usa o NestJS será bem interessante, pois rotas e controllers trabalham juntos, como explicamos em nosso texto sobre o NestJS.",
      "Controllers",
      "Os controllers são responsáveis por gerenciar as respostas exibidas ao cliente em uma API. Cliente solicitou a informação de um produto? Exibir o produto. O produto não existe? Retornar um erro 404, com uma mensagem de que este produto não está disponível.",
      "Gosto de limitar os controllers somente a isso. Não é função de um controller procurar um produto em um banco de dados, alterar uma informação, ou qualquer coisa do tipo. O controller é responsável somente por tratar as respostas. Dessa forma, conseguimos deixar nosso código bastante organizado.",
      "Outra função do controller, é de processar as funcionalidades recebidas de o “service” —este, sim, responsável por trazer funcionalidade a API.",
      "Services",
      "Um service tem como responsabilidade centralizar todas as funcionalidades de uma API. Assim como no exemplo que dei de controller: quer buscar um produto? É uma função no service que será responsável por isso. Quer adicionar um novo registro no seu banco de dados? É novamente uma função no service que será responsável por isso.",
      "Em uma aplicação, podemos ter vários services. É importante que eles sejam divididos conforme a funcionalidade: um service para funções dos produtos, um service para funções de pagamento, um service para funções de compra de produtos, e por aí seguimos. Não é um problema, muito pelo contrário, ter uma variedade de services como no exemplo que dei, é justamente isso que ajudará a manter o seu código bem organizado.",
      "Mas claro que, nem tudo precisa estar em um service —é importante apenas que o service centralize as funções. Por exemplo, para cuidar de ações diretamente no banco de dados, podemos ter “repositórios”, para cuidar de uma integração com outro serviço ou API podemos ter um “provider”. A depender de seu projeto, pode ser importante dividir responsabilidades para evitar poluição de código.",
      "É só isso?",
      "Sim, é só isso. Seguindo essa estrutura você consegue montar da mais básica até a mais complexa de uma API, com um código limpo, legível, bem organizado e escalável. A depender da aplicação, realmente não precisamos de muito mais.",
      "É importante ainda que você esteja atento a alguns conceitos importantes por aqui: divisão de responsabilidades, dinamicidade e desacoplamento de funções.",
      "",
      "Devemos dividir bem a responsabilidade de nossas classes e funções de forma que elas não façam nada além do que lhe é proposto. Isso faz com que nosso código esteja melhor organizado, e consequentemente facilita o nosso trabalho de desenvolvimento",
      "",
      "Todas as funções e classes devem ser bastante dinâmicas e estarem preparadas para qualquer possível objetivo, evitando, por exemplo, repetição de código.",
      "",
      "Tenha quantas rotas, controllers, e principalmente services forem necessários. Quando falamos de desacoplamento de funções queremos justamente diminuir a dependência de uma determinada ferramenta. Por que usar um repositório, por exemplo? Se você trocar de banco de dados, ajuste apenas as funções do seu repositório. Os services, que utilizam o repositório, não vão nem mesmo perceber a diferença de troca de banco de dados. Esse conceito pode ser aplicado em qualquer ponta da sua aplicação.",
      "",
      "",
      "Perceba também que nem mesmo cito linguagens ou frameworks. Não faz diferença. Programação vai muito além da ferramenta, e é mesmo sobre o conceito por trás de sua estrutura.",
      "Podemos ainda mais explorar esses conceitos, melhorando a nossa estrutura e sempre adaptando a realidade do nosso projeto.",
      "Como você monta a sua API? Qual estrutura utiliza? Participe de nosso canal no Discord e conte para gente!"
    ]
  },
  {
    "mainImage": {
      "tag": "IMG",
      "src": "https://cdn.hashnode.com/res/hashnode/image/upload/v1671713467464/aCbazFoG4.png?w=1600&h=840&fit=crop&crop=entropy&auto=compress,format&format=webp",
      "alt": "Trabalhando com arrays em Javascript",
      "decoding": "async",
      "dataNimg": "responsive",
      "style": "position:absolute;top:0;left:0;bottom:0;right:0;box-sizing:border-box;padding:0;border:none;margin:auto;display:block;width:0;height:0;min-width:100%;max-width:100%;min-height:100%;max-height:100%;background-size:cover;background-position:0% 0%;filter:blur(20px);background-image:url(\"https://cdn.hashnode.com/res/hashnode/image/upload/v1671713467464/aCbazFoG4.png?w=400&h=210&fit=crop&crop=entropy&auto=compress,format&format=webp&fm=blurhash\")"
    },
    "title": {
      "tag": "H1",
      "text": "Trabalhando com arrays em Javascript"
    },
    "authorInfo": {
      "name": "Paulo Vitor Cruz",
      "profile": "https://hashnode.com/@paulovitorcs",
      "image": {
        "tag": "IMG",
        "src": "https://cdn.hashnode.com/res/hashnode/image/upload/v1627584398465/UPvyr0vKeP.jpeg?w=200&h=200&fit=crop&crop=faces&auto=compress,format&format=webp",
        "alt": "Paulo Vitor Cruz's photo",
        "decoding": "async",
        "dataNimg": "intrinsic",
        "style": "position:absolute;top:0;left:0;bottom:0;right:0;box-sizing:border-box;padding:0;border:none;margin:auto;display:block;width:0;height:0;min-width:100%;max-width:100%;min-height:100%;max-height:100%"
      }
    },
    "data": {
      "hour": "14:00",
      "data": "Dec 23, 2022"
    },
    "contentText": [
      "Esse é um tema constante e que sempre gera dúvidas. Com Javascript temos várias funções que nos possibilitam trabalhar com Arrays mas você sabe o que cada uma delas faz?",
      "O que é um Array?",
      "Array é uma lista de valores.",
      "Em Javascript, definimos um array como itens dentro de colchetes [“item1”, “item2”], simples assim.",
      "const novoArray = ['item1', 'item2', 'item3'];",
      "",
      "Agora o grande mistério é como trabalhar com estes arrays: adicionar um valor, buscar um valor, filtrar um valor, conferir se existe um valor na lista, e diversas outras funções. Existem diversas funções assim e vamos tratar as principais:",
      "push() — Adicionando um item no Array",
      "Para adicionar um novo item na sua lista, basta utilizar a função push(). Um push irá adicionar um novo item na última posição da lista, como você pode conferir no exemplo:",
      "const novoArray = [];",
      "novoArray.push('item1');",
      "novoArray.push('item2');",
      "",
      "console.log(novoArray);",
      "//['item1', 'item2']",
      "",
      "pop() e shift() —Excluindo um item do Array",
      "Você pode excluir um item do seu array de duas formas: excluindo o primeiro, ou excluindo o último da lista, com as funções pop() ou shift()",
      "const novoArray = ['item1', 'item2', 'item3'];",
      "const ultimoItemExcluido = novoArray.pop();",
      "const primeiroItemExcluido = novoArray.shift();",
      "",
      "console.log(novoArray)",
      "//['item2']",
      "",
      "indexOf() —Buscando a posição de um item",
      "Com essa função, você passa um valor como parâmetro a ser buscado na lista. Se existir, retornará em que posição está este valor:",
      "const novoArray = ['item1', 'item2', 'item3'];",
      "const indexDoItem2 = novoArray.indexOf('item2');",
      "",
      "includes(), some() e every() —Conferindo se item existe",
      "Você pode conferir se um item existe na sua lista com a função includes(), que retornará um valor booleano indicando se existe ou não.",
      "Existem também as funções some() ou every(), bem interessantes para uma analise geral da lista: “existe algum item que cumpre a condição Y na lista?”, “todos os itens da lista cumprem a condição Z?”)",
      "Segue o exemplo:",
      "const novoArray = [1, 2, 3, 4, 5, 7, 8, 'umaStringQualquer'];",
      "const listaPossuiNumero4 = novoArray.includes(4);",
      "const listaPossuiNumero10 = novoArray.includes(10);",
      "const existeAlgumaStringNaLista = novoArray.some((item) =&gt; typeof item == 'string');",
      "const todosItemsSaoNumeros = novoArray.every((item) =&gt; typeof item == 'number');",
      "",
      "console.log(listaPossuiNumero4, listaPossuiNumero10, existeAlgumaStringNaLista, todosItemsSaoNumeros)",
      "//true false true false",
      "",
      "filter() —Filtrando items de um array",
      "Uma outra função bastante interessante, e bastante utilizada em diversas situações. Um filter() permite que você gere uma nova lista, filtrando os resultados desejados, seguindo uma determinada condição.",
      "No exemplo abaixo, filtrei de uma lista os resultados pares e impares:",
      "const novoArray = [1, 2, 3, 4, 5, 7, 8];",
      "const numerosPares = novoArray.filter((item) =&gt; item % 2 == 0);",
      "const numerosImpares = novoArray.filter((item) =&gt; item % 2 == 1);",
      "",
      "console.log(numerosPares)",
      "//[2, 4, 8]",
      "console.log(numerosImpares)",
      "// [1, 3, 5, 7]",
      "",
      "map() e forEach() —Passando por todos os items de um array",
      "São duas funções parecidas e que geram uma certa confusão. Tanto o map() quanto o forEach() passam por todos os itens da lista.",
      "A diferença, é que o forEach apenas passa pela lista, e o map() pode “remapear” os valores, criando uma nova lista com valores completamente diferentes.",
      "No exemplo abaixo, usei o map() para transformar todos os itens da lista em strings, e usei o forEach para chamar uma ação para todos os itens da lista.",
      "const novoArray = [1, 2, 3, 4, 5, 7, 8];",
      "const novoArrayComoString = novoArray.map((item) =&gt; item.toString());",
      "",
      "console.log(novoArrayComoString)",
      "//['1', '2', '3', '4', '5', '7', '8']",
      "",
      "const novoArray = [1, 2, 3, 4, 5, 7, 8];",
      "novoArray.forEach((item) =&gt; realizaAlgumaAcao(item));",
      "",
      "Tratamento de listas no Javascript podem parecer complexos, mas é mesmo uma questão de prática? Ainda tem alguma dúvida? Participe de nosso canal no Discord e nos chame por lá que podemos te ajudar!"
    ]
  },
  {
    "mainImage": {
      "tag": "IMG",
      "src": "https://cdn.hashnode.com/res/hashnode/image/upload/v1670583641546/AGw1Upyc_.png?w=1600&h=840&fit=crop&crop=entropy&auto=compress,format&format=webp",
      "alt": "Você já usa o NestJS?",
      "decoding": "async",
      "dataNimg": "responsive",
      "style": "position:absolute;top:0;left:0;bottom:0;right:0;box-sizing:border-box;padding:0;border:none;margin:auto;display:block;width:0;height:0;min-width:100%;max-width:100%;min-height:100%;max-height:100%;background-size:cover;background-position:0% 0%;filter:blur(20px);background-image:url(\"https://cdn.hashnode.com/res/hashnode/image/upload/v1670583641546/AGw1Upyc_.png?w=400&h=210&fit=crop&crop=entropy&auto=compress,format&format=webp&fm=blurhash\")"
    },
    "title": {
      "tag": "H1",
      "text": "Você já usa o NestJS?"
    },
    "authorInfo": {
      "name": "Paulo Vitor Cruz",
      "profile": "https://hashnode.com/@paulovitorcs",
      "image": {
        "tag": "IMG",
        "src": "https://cdn.hashnode.com/res/hashnode/image/upload/v1627584398465/UPvyr0vKeP.jpeg?w=200&h=200&fit=crop&crop=faces&auto=compress,format&format=webp",
        "alt": "Paulo Vitor Cruz's photo",
        "decoding": "async",
        "dataNimg": "intrinsic",
        "style": "position:absolute;top:0;left:0;bottom:0;right:0;box-sizing:border-box;padding:0;border:none;margin:auto;display:block;width:0;height:0;min-width:100%;max-width:100%;min-height:100%;max-height:100%"
      }
    },
    "data": {
      "hour": "14:00",
      "data": "Dec 9, 2022"
    },
    "contentText": [
      "Já falamos sobre frameworks por aqui, e já até mencionamos o NestJS. Mas hoje vamos explorar um pouco mais e reforçar a importância desse framework durante o desenvolvimento de nossas aplicações.",
      "O NestJS:",
      "NestJS é um framework em Javascript para desenvolver APIs. Simples assim.",
      "Sendo um framework, o NestJS ajuda bastante o processo de desenvolvimento de uma aplicação, trazendo ótimas ferramentas como Swagger, ORMs, Gerenciador de Cache, validações com DTOs, GraphQL e até mesmo um grande suporte a microsserviços, de um jeito bastante fácil e simplificado.",
      "Se você está acostumado a desenvolver APIs puramente com Express ou Fastify, pode até achar um pouco estranho, pois o NestJS conta com uma estrutura bastante particular, com uso de módulos e decorators como base de toda a aplicação, mas é mesmo uma questão de adaptação, toda essa diferença é mesmo uma grande ajuda.",
      "Vamos explorar um pouco mais:",
      "Controllers",
      "Toda API começa na definição de rotas e controllers. Geralmente, fazemos criamos nossas rotas, apontando para um controller que irá fazer todo o gerenciamento de funcionalidade.",
      "No NestJS, é diferente e um pouco mais fácil. Com o uso de decorators, agrupamos nossa definição de rotas diretamente no controller e em suas funções, já de cara definindo o endpoint das rotas e método a ser utilizado, em uma estrutura como essa:",
      "import { Controller, Get, Body } from '@nestjs/common';",
      "import { RequestDto } from '../requestDto.dto';",
      "",
      "@Controller('nome_da_rota_aqui')",
      "export class ExampleController {",
      "  @Get('nome_endpoint_aqui')",
      "  getExample(): string {",
      "    return 'Retorno qualquer de um GET';",
      "  }",
      "",
      "  @Post()",
      "  postExample(@Body() request: RequestDto) {",
      "    return 'Retorno qualquer de um POST';",
      "  }",
      "}",
      "",
      "Ainda nos controllers, algo bem interessante é a criação de DTOs e validação dos payloads enviados. Podemos criar uma classe, em que nossas propriedades recebem um decorator indicando a validação a ser usada. Basta usar essa classe como tipagem de uma variável no controller, e a partir desta definição, automaticamente o NestJS irá validar a sua rota. Um exemplo de um DTO é como:",
      "import { IsNotEmpty, IsEmail } from \"class-validator\";",
      "",
      "export class RequestDto {",
      "    @IsNotEmpty()",
      "    nome: string;",
      "",
      "    @IsEmail()",
      "    email: string;",
      "}",
      "",
      "Entities",
      "As entities são responsáveis por cuidar do gerenciamento de banco de dados. Em nosso exemplo, vamos utilizar o TypeORM, mas você poderia também trazer o Prisma ou até o Moongose para o NestJS.",
      "O uso de entities segue o padrão da ORM que você irá utilizar, mas a lógica é sempre a mesma: definir os campos e as colunas de sua tabela no banco de dados a partir dos decorators:",
      "import { Column, Entity, PrimaryGeneratedColumn } from 'typeorm';",
      "",
      "@Entity('nome_da_tabela')",
      "export class App {",
      "  @PrimaryGeneratedColumn('uuid')",
      "  id: string;",
      "",
      "  @Column()",
      "  name: string;",
      "",
      "  @Column({ nullable: true })",
      "  lastName: string;",
      "",
      "  @Column()",
      "  email: string;",
      "}",
      "",
      "Services",
      "Os services são bastante importantes no desenvolvimento de uma API, afinal, é em um service que acontece todo o gerenciamento de funcionalidades da aplicação.",
      "No NestJS, um service nada mais é do que uma classe, que contém as nossas funções. O interessante é que o Nest trabalha com uma injeção de dependencias, mantendo um baixo nível de acoplamento entre nossas funções. Por isso, é bastante fácil trazer outras ferramentas, como um repositório do TypeORM, ou uma ferramenta de requisições HTTP para dentro do nosso service, assim como é bastante tranquilo exportar este mesmo service e usar em outro contexto da aplicação.",
      "Um service no NestJS segue a seguinte estrutura:",
      "import { NewAppData } from './../dto/app.dto';",
      "import { Injectable } from '@nestjs/common';",
      "import { InjectRepository } from '@nestjs/typeorm';",
      "import { App } from '../entities/app.entity';",
      "import { Repository } from 'typeorm';",
      "import { HttpService } from '@nestjs/axios';",
      "",
      "@Injectable()",
      "export class AppService {",
      "  constructor(",
      "    private httpService: HttpService,",
      "    @InjectRepository(App)",
      "    private appRepository: Repository&lt;App&gt;,",
      "  ) {}",
      "",
      "  getHello(): string {",
      "    return 'Hello World!';",
      "  }",
      "",
      "  addNewAppData(data: NewAppData): Promise&lt;App&gt; {",
      "    const app = {",
      "      name: data.name,",
      "    };",
      "",
      "    return this.appRepository.save(app);",
      "  }",
      "",
      "  findAppDataById(dataId): Promise&lt;App&gt; {",
      "    return this.appRepository.findOne({ where: { id: dataId } });",
      "  }",
      "}",
      "",
      "Módulos",
      "Tudo no NestJS acaba em um módulo. Um módulo é responsável por inicializar os nossos controllers, services, entities e outras ferramentas dentro de nossa aplicação.",
      "Se você está familiarizado com o Angular, é a mesmo padrão: tudo que criamos dentro do NestJS deve ser inicializado num módulo.",
      "Você pode ter a quantidade de módulos que quiser e organizar da melhor forma que puder imaginar, o que pode trazer ao NestJS uma ótima funcionalidade de gerenciamento de módulos. Por exemplo, você pode centralizar toda uma funcionalidade de “Usuários” dentro de um “UserModule” que irá conter todos os controllers, services e entities utilizados neste contexto, e então, aplicar este módulo no “AppModule”, módulo base do NestJS.",
      "Um módulo no NestJS é como o exemplo abaixo:",
      "import { App } from './entities/app.entity';",
      "import { Module } from '@nestjs/common';",
      "import { ConfigModule } from '@nestjs/config';",
      "import { Database } from './helpers/database';",
      "import { AppService } from './services/app.service';",
      "import { AppController } from './controllers/app.controller';",
      "import { ExampleModule } from '../example.module';",
      "",
      "@Module({",
      "  imports: [",
      "    ExampleModule,",
      "    ConfigModule.forRoot(),",
      "    Database.build(),",
      "    Database.registerEntities([App]),",
      "  ],",
      "  controllers: [AppController],",
      "  providers: [AppService],",
      "  exports: [AppService],",
      "})",
      "export class AppModule {}",
      "",
      "De forma bastante simplificada, este é o NestJS. ",
      "Ainda há muito a ser explorado e traremos estes pontos em nossos próximos textos da devGo, mas que esteja claro os benefícios: as ferramentas disponíveis, a estrutura simplificada, a agilidade no desenvolvimento e a facilidade de adaptação ao framework.",
      "E você? Já usa o NestJS ou algum outro framework? Participe do nosso canal no Discord e conte para gente!"
    ]
  },
  {
    "mainImage": {
      "tag": "IMG",
      "src": "https://cdn.hashnode.com/res/hashnode/image/upload/v1669990721340/d7e7e763-3934-4f87-a06f-11a1e47c618b.png?w=1600&h=840&fit=crop&crop=entropy&auto=compress,format&format=webp",
      "alt": "Como organizar suas demandas",
      "decoding": "async",
      "dataNimg": "responsive",
      "style": "position: absolute; inset: 0px; box-sizing: border-box; padding: 0px; border: none; margin: auto; display: block; width: 0px; height: 0px; min-width: 100%; max-width: 100%; min-height: 100%; max-height: 100%;"
    },
    "title": {
      "tag": "H1",
      "text": "Como organizar suas demandas"
    },
    "authorInfo": {
      "name": "Paulo Vitor Cruz",
      "profile": "https://hashnode.com/@paulovitorcs",
      "image": {
        "tag": "IMG",
        "src": "https://cdn.hashnode.com/res/hashnode/image/upload/v1627584398465/UPvyr0vKeP.jpeg?w=200&h=200&fit=crop&crop=faces&auto=compress,format&format=webp",
        "alt": "Paulo Vitor Cruz's photo",
        "decoding": "async",
        "dataNimg": "intrinsic",
        "style": "position:absolute;top:0;left:0;bottom:0;right:0;box-sizing:border-box;padding:0;border:none;margin:auto;display:block;width:0;height:0;min-width:100%;max-width:100%;min-height:100%;max-height:100%"
      }
    },
    "data": {
      "hour": "14:19",
      "data": "Dec 2, 2022"
    },
    "contentText": [
      "Se você acha que programação é apenas sobre código, tem algo errado aí. Até mesmo nós, desenvolvedores, precisamos organizar as nossas demandas. No texto de hoje, vou mostrar um pouco do que eu costumo fazer e das ferramentas que costumo usar:",
      "Trello, Jira, Asana, Clickup",
      "https://cdn.hashnode.com/res/hashnode/image/upload/v1669990604576/c189af5a-ba77-4aa8-92fc-5a3e1f7d80cf.png?auto=compress,format&amp;format=webp",
      "A maioria dos desenvolvedores já deve estar mais do que acostumados com essas ferramentas. Metodologias como Agile, Scrum ou Kanban usam como base aplicações neste formato para organização e planejamento das demandas.",
      "Gosto de usar essas aplicações para grandes demandas: “desenvolver página da home”, “criar endpoint para usuários”, “criar recurso de recuperação de senhas” ou qualquer outra coisa que demande bastante atenção e tempo.",
      "O legal é mesmo usar em trabalhos em equipe, até porque várias pessoas trabalhando em um projeto requer uma boa organização e fácil acompanhamento. Aqui utilizamos bastante o recurso de “arrastar para a próxima coluna” ao atualizar o status da nossa tarefa, e temos todos os detalhes e planejamento da tarefa por aqui!",
      "Combine como usar com a sua equipe e traga seu planejamento para dentro da aplicação. Importante é sempre estar usando!",
      "Todoist, Ticktick",
      "https://cdn.hashnode.com/res/hashnode/image/upload/v1669990631709/75b3e131-b01f-4100-8fd3-d181c09b4e1b.avif?auto=compress,format&amp;format=webp",
      "Estes são ferramentas de “Listas a fazer”. Diferente do Jira ou ClickUp, mais usados em equipe, gosto de usar essas aplicações para uso pessoal e individual mesmo: apenas eu uso, vejo e gerencio.",
      "Anoto pequenas demandas, rápidas de serem feitas, e organizadas das diariamente: “falar com fulano”, “conferir status da demanda X”, “mapear banco de dados”.",
      "Uma organização dessa forma faz parte do método Get Things Done, que tem me ajudado bastante e recomendo a todos: literalmente tudo que tenho para fazer, deixo registrado. Se está feito, apenas concluo a tarefa e está fora da minha lista. Organizo por prioridades e se for o caso até deixo alguns alarmes. O foco é finalizar tudo o que deve ser feito naquele dia.",
      "Importante aqui é: anotar tudo!",
      "O bom e velho calendário",
      "https://cdn.hashnode.com/res/hashnode/image/upload/v1669990659469/47e2488e-32ec-4a8d-a5c1-4759948187b9.png?auto=compress,format&amp;format=webp",
      "Nada substitui o calendário. Se você faz muitas reuniões, tem sempre algumas chamadas aqui e ali, não pode deixar de usar o calendário.",
      "Por mais simples que pareça, nos ajuda a não perder os planejamentos e ter tudo mapeado para o dia. Deixo tudo registrado e com alarmes para não esquecer de nada!",
      "Não subestime!",
      "São pequenas ações como essas comentadas aqui que nos ajudam a não perder o rumo. Durante um momento de muita agitação, muita correria ou muita urgência, você quer ter certeza de que não está esquecendo de nada, certo?",
      "Ter esses hábitos incorporados no dia a dia, independente do momento, é o que faz a diferença.",
      "E você? Como organiza as suas demandas? Participe do nosso canal do Discord, e conte para gente!"
    ]
  },
  {
    "mainImage": {
      "tag": "IMG",
      "src": "https://cdn.hashnode.com/res/hashnode/image/upload/v1668767825052/yI-inGSls.png?w=1600&h=840&fit=crop&crop=entropy&auto=compress,format&format=webp",
      "alt": "Como dar bons prazos",
      "decoding": "async",
      "dataNimg": "responsive",
      "style": "position:absolute;top:0;left:0;bottom:0;right:0;box-sizing:border-box;padding:0;border:none;margin:auto;display:block;width:0;height:0;min-width:100%;max-width:100%;min-height:100%;max-height:100%;background-size:cover;background-position:0% 0%;filter:blur(20px);background-image:url(\"https://cdn.hashnode.com/res/hashnode/image/upload/v1668767825052/yI-inGSls.png?w=400&h=210&fit=crop&crop=entropy&auto=compress,format&format=webp&fm=blurhash\")"
    },
    "title": {
      "tag": "H1",
      "text": "Como dar bons prazos"
    },
    "authorInfo": {
      "name": "Paulo Vitor Cruz",
      "profile": "https://hashnode.com/@paulovitorcs",
      "image": {
        "tag": "IMG",
        "src": "https://cdn.hashnode.com/res/hashnode/image/upload/v1627584398465/UPvyr0vKeP.jpeg?w=200&h=200&fit=crop&crop=faces&auto=compress,format&format=webp",
        "alt": "Paulo Vitor Cruz's photo",
        "decoding": "async",
        "dataNimg": "intrinsic",
        "style": "position:absolute;top:0;left:0;bottom:0;right:0;box-sizing:border-box;padding:0;border:none;margin:auto;display:block;width:0;height:0;min-width:100%;max-width:100%;min-height:100%;max-height:100%"
      }
    },
    "data": {
      "hour": "14:00",
      "data": "Nov 18, 2022"
    },
    "contentText": [
      "Seja você desenvolvedor, seja você um líder, em algum momento precisará entregar o prazo de algum projeto. Dar bons prazos é sempre um grande desafio. No texto de hoje, vou compartilhar um pouco da minha experiência e discutir como trabalho com prazos.",
      "É impossível prever o futuro",
      "Este é o ponto mais importante: você não sabe o que vai acontecer amanhã. Passar um prazo tentando imaginar o futuro é apenas “chutar” uma data, e isso é a pior coisa que você pode fazer enquanto está dando um prazo.",
      "O seu “Waze” ou “Google Maps”, por exemplo, só sabem que você leva 15 minutos do ponto X ao ponto Y porque você irá passar por um caminho bastante específico. Em um projeto é a mesma coisa, você precisa construir uma rota.",
      "Planejamento",
      "O que é preciso ser feito no projeto? Tenho conhecimento suficiente para isso? Precisarei de alguma ajuda ou suporte? Há algum ponto de atenção durante o projeto?",
      "São perguntas que sempre devem ser feitas antes de dar um prazo. E o planejamento começa a partir do momento que você responde essas perguntas.",
      "Entenda o que precisa ser feito e mapeie as demandas; estude tudo que for necessário para que você desenvolva o projeto; vá atrás de alguém que te dará o suporte e já resolva todas as pendências, ou ao menos já deixe marcado; dê atenção as maiores dificuldades do projeto, e se possível até as faça primeiro.",
      "Dê pequenos passos",
      "Se você tem um projeto fullstack para desenvolver, você não pode pensar “10 dias para o backend, 10 dias para o frontend”. O que vai ser feito no backend? O que precisa ser desenvolvido no frontend? É mesmo tão simples a ponto de ser definido de forma tão macro?",
      "A dica é trabalhar com pequenas tarefas: no backend, preciso construir a rota X e isso levará 2 dias, no frontend preciso construir o componente Y e isso levará 1 dia. Isso te dá uma perspectiva mais realista sobre o projeto e permite que você seja mais preciso com os prazos.",
      "A questão por aqui é que é mais difícil dar um bom prazo para um projeto grande, do que para uma tarefa pequena.",
      "A Lei de Murphy",
      "Se algo tem chance de dar errado, vai dar errado. E vai mesmo. Esteja sempre preparado para algum possível problema: atraso em alguma tarefa, desenvolvimento não previsto, uma dificuldade maior do que você espera.",
      "Por isso, volto em alguns pontos: planejamento e tarefas pequenas: com um bom planejamento você evita e se prepara para maior parte dos problemas; com pequenas tarefas você vê o erro acontecendo mais cedo e tem mais tempo hábil para solucionar.",
      "Se um erro irá acontecer, você precisa estar preparado e ser ágil para resolver.",
      "Experiência",
      "O seu primeiro prazo vai ser horrível, o segundo só vai ser ruim, o terceiro foi quase lá e no quarto você finalmente acertou.",
      "A experiência vai te permitir planejar melhor, se preparar para os problemas melhor e até descobrir novos caminhos. É o que você mais precisa para dar um bom prazo.",
      "Ao final de um projeto, sempre tente entender onde você errou, o que poderia ter feito melhor e como fazer melhor. Desta forma, a experiência vai surgindo gradualmente.",
      "Ainda assim você vai errar",
      "Não importa o nível de planejamento, se demandas foram bem colocadas, se você viu um erro acontecendo e até conseguiu resolver, no fim, o seu prazo pode ir completamente errado, independente até da experiência que você tenha.",
      "Por isso, gosto sempre de usar uma “margem de erro”. É bem simples até: Se é 10 dias, digo 15. Se é 20 dias, digo 30. Essa pequena diferença me dá mais espaço para resolver qualquer eventual problema sem quebrar a expectativa do cliente. E se tudo ocorrer bem, acabo entregando até mesmo antes da data que eu disse.",
      "Prazos são uma negociação",
      "Se mesmo com todas as dicas as coisas podem dar errado, o que fazer então? Bom, veja que estamos tentando trabalhar de forma exata, com algo que não é exato, e é por isso que erramos tanto.",
      "Um bom prazo não é acertar em quantos dias você consegue entregar algo, até porque prazos não são sobre datas, são sobre expectativas, e expectativas estão bem longe do campo de exatas. Um bom prazo depende da forma em que isso é apresentado, em como é trabalhado durante toda a etapa de desenvolvimento, e principalmente em como é entregue ao final.",
      "Tenha isso em mente, independente dos problemas, trabalhe com a expectativa do cliente.",
      "Termino dizendo que prazo realmente não é nada tão exato quanto nós pensamos, e por isso, é um ótimo assunto a ainda ser discutido várias e várias vezes. Você já conhece o nosso canal do Discord? Estaremos por lá debatendo ainda debatendo este assunto. Participe conosco, e compartilhe como você trabalha com prazos também"
    ]
  },
  {
    "mainImage": {
      "tag": "IMG",
      "src": "https://cdn.hashnode.com/res/hashnode/image/upload/v1668175703636/kXMbAqMlZ.png?w=1600&h=840&fit=crop&crop=entropy&auto=compress,format&format=webp",
      "alt": "10 extensões do Visual Studio Code para facilitar o seu dia a dia.",
      "decoding": "async",
      "dataNimg": "responsive",
      "style": "position: absolute; inset: 0px; box-sizing: border-box; padding: 0px; border: none; margin: auto; display: block; width: 0px; height: 0px; min-width: 100%; max-width: 100%; min-height: 100%; max-height: 100%;"
    },
    "title": {
      "tag": "H1",
      "text": "10 extensões do Visual Studio Code para facilitar o seu dia a dia."
    },
    "authorInfo": {
      "name": "Matheus Filho",
      "profile": "https://hashnode.com/@filho77",
      "image": {
        "tag": "IMG",
        "src": "https://cdn.hashnode.com/res/hashnode/image/upload/v1657290469531/4XKZqrbj7.jpeg?w=200&h=200&fit=crop&crop=faces&auto=compress,format&format=webp",
        "alt": "Matheus Filho's photo",
        "decoding": "async",
        "dataNimg": "intrinsic",
        "style": "position:absolute;top:0;left:0;bottom:0;right:0;box-sizing:border-box;padding:0;border:none;margin:auto;display:block;width:0;height:0;min-width:100%;max-width:100%;min-height:100%;max-height:100%"
      }
    },
    "data": {
      "hour": "14:09",
      "data": "Nov 11, 2022"
    },
    "contentText": [
      "Atualmente o VSCode é um dos editores de textos mais usados por programadores por conta da sua alta e fácil customização, abaixo segue uma lista de 10 extensões que poderão facilitar o seu dia a dia de trabalho e nos estudos dentro do VsCode essas extensões vão desde deixar o código mais limpo a iniciar rodas um servidor online para arquivos html.",
      "Icons",
      "Atualmente no vscode existem várias extensões de arquivos que ajudam a gente a não precisar olhar somente a extensão do arquivo e deixam o ícone da extensão do arquivo e das pastas para uma melhor visualização, logo abaixo recomendarei algumas extensões que fazem esse papel:",
      "Material Icon Theme:",
      "https://cdn.hashnode.com/res/hashnode/image/upload/v1668173686548/wnswvADly.png?auto=compress,format&amp;format=webp",
      "https://cdn.hashnode.com/res/hashnode/image/upload/v1668173705756/avfrx8-xF.png?auto=compress,format&amp;format=webp",
      "Link para download: marketplace.visualstudio.com/items?itemName..",
      "VsCode Icons",
      "https://cdn.hashnode.com/res/hashnode/image/upload/v1668173926133/pRmB3gH_F.gif?auto=format,compress&amp;gif-q=60&amp;format=webm",
      "Link para download: marketplace.visualstudio.com/items?itemName..",
      "Material Theme Icon",
      "https://cdn.hashnode.com/res/hashnode/image/upload/v1668174043067/3JyDhu93j.jpg?auto=compress,format&amp;format=webp",
      "Link para download: marketplace.visualstudio.com/items?itemName..",
      "Snipets",
      "https://cdn.hashnode.com/res/hashnode/image/upload/v1668174186535/yh9EMZqhW.png?auto=compress,format&amp;format=webp",
      "Os snipets estão aí para além de facilitar nossa vida adicionando certas estruturas previamente prontas, como, por exemplo, um switch case ou um laço for, pequenas estruturas que escrevemos várias e várias vezes durante o dia com uma simples palavra, ele já digita toda a estrutura básica e fica faltando você somente adicionar os dados necessários.",
      "GitLens",
      "https://cdn.hashnode.com/res/hashnode/image/upload/v1668174328583/RoTd3FxO4.png?auto=compress,format&amp;format=webp",
      "O git lens está aí para melhorar a usualidade do git dentro do vscode, podendo mostrar quem editou ou escreveu tal linha de código, mostrar uma worktree simplificada, poder ver de uma forma melhor os últimos commits feitos em determinado arquivo, além de muito mais.",
      "Link para download: marketplace.visualstudio.com/items?itemName..",
      "Live Share",
      "https://cdn.hashnode.com/res/hashnode/image/upload/v1668174474086/w3ilg7FVZ.png?auto=compress,format&amp;format=webp",
      "https://cdn.hashnode.com/res/hashnode/image/upload/v1668174476927/T_DW1Uziz.png?auto=compress,format&amp;format=webp",
      "Para você que trabalha em equipe e precisa desenvolver com outro desenvolvedor simultaneamente, para auxiliar ou fazer um pair code. O live share permite exatamente isso. Com ele basta uma conta da microsoft ou do github você consegue \"entrar\" dentro do código na máquina do seu parceiro, assim podendo editar com ele o mesmo arquivo em simultâneo.",
      "Link para downlod: marketplace.visualstudio.com/items?itemName..",
      "Bracket pair colorizer",
      "https://cdn.hashnode.com/res/hashnode/image/upload/v1668174687313/EIZPDUNbG.png?auto=compress,format&amp;format=webp",
      "Para você que utiliza uma linguagem com muitas chaves, colchetes e parênteses, essa extensão colore os fechamentos, assim deixando mais fácil localizar o início e o fim. Com isso você consegue se localizar melhor no seu código, além de ficar visualmente mais estético.",
      "Link para download: marketplace.visualstudio.com/items?itemName..",
      "Prettier e Beutify",
      "São extensões que irá realizar a  indentação do código para você, deixando mais limpo e bonito para que outras pessoas vejam. Além de que bem configurado você não terá problemas em ter que ficar arrumando o seu código a todo instante.",
      "Prettier",
      "https://cdn.hashnode.com/res/hashnode/image/upload/v1668174891711/rxzGVMB1D.png?auto=compress,format&amp;format=webp",
      "Link para download: marketplace.visualstudio.com/items?itemName..",
      "beautify",
      "https://cdn.hashnode.com/res/hashnode/image/upload/v1668174901199/ALAjecQD9.png?auto=compress,format&amp;format=webp",
      "Link para download: marketplace.visualstudio.com/items?itemName..",
      "Polacode",
      "https://cdn.hashnode.com/res/hashnode/image/upload/v1668175331310/7kewZQ218.png?auto=compress,format&amp;format=webp",
      "Polacode é uma extensão para que você possa printar determinada parte do código, assim ficando melhor para enviar para alguém. Essa extensão permite você também redimensionar o tamanho das linhas no próprio print.",
      "Link para download: marketplace.visualstudio.com/items?itemName..",
      "TODO Highlight",
      "https://cdn.hashnode.com/res/hashnode/image/upload/v1668175374751/rVXqQBt7W.png?auto=compress,format&amp;format=webp",
      "Essa é uma extensão para que os TODO e FIXME no código fiquem mais fáceis de se verem, dando assim mais oportunidades para desenvolvedores resolverem problemas no código. Pois se algo está brilhando e chamando a atenção, o desenvolvedor não terá a desculpa que não enxergou o comentário.",
      "Link para download: marketplace.visualstudio.com/items?itemName..",
      "Color Hightlight",
      "https://cdn.hashnode.com/res/hashnode/image/upload/v1668175555770/GRIvJH6sR.gif?auto=format,compress&amp;gif-q=60&amp;format=webm",
      "Essa extensão coloca um contorno da cor do código hexadecimal de cor em volta dos códigos hexadecimais de cores. Isso da mais liberdade pro desenvolvedor testar novas combinações de cores, já que não será necessário olhar na tela para ver qual cor é a daquele código hexadecimal.",
      "Link para download: marketplace.visualstudio.com/items?itemName..",
      "Live Server",
      "https://cdn.hashnode.com/res/hashnode/image/upload/v1668175648111/ZZF1M-4MW.gif?auto=format,compress&amp;gif-q=60&amp;format=webm",
      "Essa extensão permite você criar um micro servidor http para códigos html deixando assim mais fácil a edição desses arquivos. Já que com esse micro servidor qualquer mudança feita no arquivo será modificada em tempo real na página.",
      "Link para download: marketplace.visualstudio.com/items?itemName.."
    ]
  },
  {
    "mainImage": {
      "tag": "IMG",
      "src": "https://cdn.hashnode.com/res/hashnode/image/upload/v1667564378478/w3eq2BZcJ.png?w=1600&h=840&fit=crop&crop=entropy&auto=compress,format&format=webp",
      "alt": "Monólitos e microsserviços",
      "decoding": "async",
      "dataNimg": "responsive",
      "style": "position:absolute;top:0;left:0;bottom:0;right:0;box-sizing:border-box;padding:0;border:none;margin:auto;display:block;width:0;height:0;min-width:100%;max-width:100%;min-height:100%;max-height:100%;background-size:cover;background-position:0% 0%;filter:blur(20px);background-image:url(\"https://cdn.hashnode.com/res/hashnode/image/upload/v1667564378478/w3eq2BZcJ.png?w=400&h=210&fit=crop&crop=entropy&auto=compress,format&format=webp&fm=blurhash\")"
    },
    "title": {
      "tag": "H1",
      "text": "Monólitos e microsserviços"
    },
    "authorInfo": {
      "name": "Paulo Vitor Cruz",
      "profile": "https://hashnode.com/@paulovitorcs",
      "image": {
        "tag": "IMG",
        "src": "https://cdn.hashnode.com/res/hashnode/image/upload/v1627584398465/UPvyr0vKeP.jpeg?w=200&h=200&fit=crop&crop=faces&auto=compress,format&format=webp",
        "alt": "Paulo Vitor Cruz's photo",
        "decoding": "async",
        "dataNimg": "intrinsic",
        "style": "position:absolute;top:0;left:0;bottom:0;right:0;box-sizing:border-box;padding:0;border:none;margin:auto;display:block;width:0;height:0;min-width:100%;max-width:100%;min-height:100%;max-height:100%"
      }
    },
    "data": {
      "hour": "14:00",
      "data": "Nov 4, 2022"
    },
    "contentText": [
      "Uma pergunta que deve ser considerada ao desenvolver o seu projeto: faço como monólito, ou microsserviço? Mas afinal, o que é uma aplicação monólito e o que é uma aplicação microsserviço? No texto de hoje, vamos explorar um pouco mais sobre arquitetura de software e introduzir o conceito de monólitos e microsserviços para o seu projeto.",
      "O que é uma aplicação monólito?",
      "Chamamos de “monólito” uma aplicação feita em um único serviço. Isso quer dizer que todas as funcionalidades e recursos deste projeto foram feitos em um único lugar, um único projeto, um único código.",
      "Para exemplificar uma aplicação monólito, vamos pensar em um ecommerce bem completo: um sistema com produtos cadastrados, disponíveis para a venda, com recursos de pagamento, acompanhamento de entrega, controle de estoque, disponibilização de relatórios para conferência financeira da loja, geração de notas fiscais, etc.",
      "Em um modelo monólito, temos essa aplicação desenvolvida em um único projeto. No mesmo lugar que gerencia os produtos e está cadastro produtos no banco de dados existe também o gerenciador de estoque, o sistema de notas fiscais, os relatórios financeiros e o restante de funcionalidades.",
      "Este é até o padrão mais utilizado entre os projetos, principalmente em projetos “simples e pequenos”, e se você está iniciando em desenvolvimento, deve até estar estranhando: “e tem outro jeito de fazer?”. Outro jeito, seria dividir este projeto em “miniprojetos”, chamados de microsserviços.",
      "O que é uma aplicação em microsserviços?",
      "Uma aplicação em microsserviços é quando conseguimos quebrar toda uma aplicação, em diversas outras aplicações menores.",
      "Ainda seguindo o nosso exemplo de ecommerce, ao invés de termos todos os recursos em um só lugar, dividimos cada recurso em um “novo projeto”, delimitando bem o seu código conforme a funcionalidade daquele serviço e para onde ele deve ser responsabilizado.",
      "Por fim, teremos um projeto, ou serviço, para gerenciar os produtos, outro para gerenciar o estoque, outro para gerar relatórios financeiros e outro para fazer o acompanhamento de entregas, sempre seguindo esta lógica de dividir os recursos de sua aplicação em outros projetos.",
      "Neste modelo, importante dizer que estes microsserviços estão sempre conversando entre si, afinal, por mais que esteja dividido em vários pedaços, ainda temos uma única aplicação com um único objetivo: ser um ecommerce.",
      "Essa arquitetura tem se tornado bastante comum em projetos maiores e mais complexos, sendo praticamente essencial para garantir o bom funcionamento da sua aplicação. Mas ainda pode parecer um pouco estranho: por que deixar minha aplicação mais complexa e com mais projetos a serem gerenciados?",
      "Vantagens de uma arquitetura em microsserviços",
      "Vamos continuar no exemplo de ecommerce para discutir vantagens e desvantagens de uma arquitetura em microsserviços. Nesse exemplo, temos um projeto bastante grande e complexo, com diversos recursos diferentes. Apenas com essa definição já é um ótimo pedido o uso da arquitetura de microsserviços, mas vamos entender por quê.",
      "Vamos pensar na performance: nesse exemplo, temos diversos recursos que possuem usos bastante diferentes: os produtos, usado pelo cliente que acessa o ecommerce e quer comprar, e os relatórios financeiros, usados somente pela equipe financeira, interna a empresa. Em uma aplicação monólito, se tivermos muitos acessos no ecommerce, apenas para ver os produtos, perceberemos uma lentidão no sistema inteiro, inclusive nos relatórios financeiros. Já em uma aplicação em microsserviços, essa lentidão seria sentida somente na área de produtos, e manteríamos os outros serviços bastante estáveis.",
      "Pensando também em custo, vamos pensar na escalabilidade da aplicação —ter um servidor melhor, ou aumentar o número de servidores disponíveis. É bem mais barato escalar um serviço pequeno, do que um serviço maior. No problema citado, em uma aplicação, monólito, teríamos que escalar todo o sistema, independente se é somente uma pequena parte dele que exige uma performance melhor. Já com uma aplicação em microsserviços, escalamos somente a serviço de produtos, e poderíamos deixar o serviço de relatórios pequeno. Microsserviços permitem que maior controle sobre a escalabilidade, equilibrando os gastos de infraestrutura.",
      "Trazendo também para o gerenciamento do projeto, pense sempre que quanto maior o seu código, mais complexo ele fica. Aplicações grandes feitas em monólito costumam ter códigos enormes, o que realmente dificulta a manutenção. Aplicações em microsserviços tem como premissa serviços pequenos, com código simples e bastante objetivos, facilitando a manutenção e até mesmo abrindo espaço para múltiplas equipes trabalharem na aplicação.",
      "Mas realmente, uma aplicação em microsserviço tem um custo alto: temos que gerenciar diversos pequenos projetos, temos que garantir que a comunicação entre os serviços seja sempre constante, e sim, a implementação no código é mais complexa e o gerenciamento da infraestrutura é também mais trabalhoso.",
      "É uma questão de equilíbrio",
      "Uma aplicação monólito pode ser exatamente o que você precisa —afinal, ela também tem suas vantagens: fácil implementação, menor gerenciamento de infraestrutura, e apenas um único projeto para “tomar conta”. Nem sempre uma arquitetura em microsserviços será importante para o seu projeto, e há situações que podem trazer mais custo do que benefícios.",
      "Por exemplo, o blog da devGo. Não há necessidade nenhuma deste blog ser em microsserviços, seria até mesmo um exagero, o famoso “matar uma barata com um canhão”. Por aqui, precisamos nos concentrar somente em disponibilizar postagens aos leitores, não há necessidade de um melhor controle de escalabilidade, ou uma performance diferenciada para determinado recurso. Sendo sincero, não há nem mesmo outro recurso, é apenas um blog: criar postagens, e exibir postagens.",
      "Como tudo em desenvolvimento de software, não existe uma regra. Você deve sempre pensar no seu projeto, o que ele pretende e o que você está disposto a fazer.",
      "Nos próximos textos da devGo, vamos aprofundar em microsserviços e aprender como realmente implementar um projeto em microsserviços ou até mesmo fazer uma migração de monólito para microsserviços. Participe do nosso canal no Discord e se inscreva em nossa newsletter para acompanhar a devGo!"
    ]
  },
  {
    "mainImage": {
      "tag": "IMG",
      "src": "https://cdn.hashnode.com/res/hashnode/image/upload/v1666955683386/4ZXYhBWGT.png?w=1600&h=840&fit=crop&crop=entropy&auto=compress,format&format=webp",
      "alt": "Como fazer o deploy de sua aplicação do jeito fácil",
      "decoding": "async",
      "dataNimg": "responsive",
      "style": "position:absolute;top:0;left:0;bottom:0;right:0;box-sizing:border-box;padding:0;border:none;margin:auto;display:block;width:0;height:0;min-width:100%;max-width:100%;min-height:100%;max-height:100%;background-size:cover;background-position:0% 0%;filter:blur(20px);background-image:url(\"https://cdn.hashnode.com/res/hashnode/image/upload/v1666955683386/4ZXYhBWGT.png?w=400&h=210&fit=crop&crop=entropy&auto=compress,format&format=webp&fm=blurhash\")"
    },
    "title": {
      "tag": "H1",
      "text": "Como fazer o deploy de sua aplicação do jeito fácil"
    },
    "authorInfo": {
      "name": "Paulo Vitor Cruz",
      "profile": "https://hashnode.com/@paulovitorcs",
      "image": {
        "tag": "IMG",
        "src": "https://cdn.hashnode.com/res/hashnode/image/upload/v1627584398465/UPvyr0vKeP.jpeg?w=200&h=200&fit=crop&crop=faces&auto=compress,format&format=webp",
        "alt": "Paulo Vitor Cruz's photo",
        "decoding": "async",
        "dataNimg": "intrinsic",
        "style": "position:absolute;top:0;left:0;bottom:0;right:0;box-sizing:border-box;padding:0;border:none;margin:auto;display:block;width:0;height:0;min-width:100%;max-width:100%;min-height:100%;max-height:100%"
      }
    },
    "data": {
      "hour": "14:00",
      "data": "Oct 28, 2022"
    },
    "contentText": [
      "Você já consegue desenvolver sua aplicação, mas agora precisa mostrar ela ao mundo! No texto hoje, vamos mostrar como fazer o “deploy” do seu projeto.",
      "Para uma aplicação estar disponível para acesso de todos na internet precisamos hospedar essa aplicação em algum servidor. Existem diversas maneiras, e serviços que você pode usar, e hoje, vamos fazer algumas recomendações:",
      "Heroku",
      "https://cdn.hashnode.com/res/hashnode/image/upload/v1666955495240/Ljl7ASj_2.png?auto=compress,format&amp;format=webp",
      "O Heroku é um serviço bastante popular entre os desenvolvedores. O Heroku consegue lidar com uma variedade de linguagens e frameworks, traz diversos outros serviços de banco de dados, cache e autenticação como plugins e facilita a hospedagem de seu projeto com processos de automatização de deploy.",
      "O Heroku costumava ser gratuito até certo ponto, mas está encerrando este modelo de serviço. Apesar da qualidade e popularidade, muitos desenvolvedores tem procurados outros serviços parecidos, mas você ainda pode avaliar o custo beneficio.",
      "Vercel",
      "https://cdn.hashnode.com/res/hashnode/image/upload/v1666955518591/-xR3eUGzx.png?auto=compress,format&amp;format=webp",
      "O Vercel é também um serviço de hospedagem de aplicações, mas apenas para sites estáticos e limitados a alguns frameworks frontend. Assim como o Heroku, possui um processo de automação e deploy bastante simplificado. É uma ótima opção para você que trabalha com frontend, e o melhor: possui um plano gratuito para sites não comerciais e projetos pessoais.",
      "Netlify",
      "https://cdn.hashnode.com/res/hashnode/image/upload/v1666955539428/wHHcSU6Cx.png?auto=compress,format&amp;format=webp",
      "O Netlify é uma alternativa ao Vercel: um serviço de hospedagem para sites estáticos. No mesmo formato, traz o padrão de automação de deploys facilitando bastante o seu trabalho. Também conta com um plano gratuito e pode ser bem interessante para o seu projeto.",
      "Fly.io",
      "https://cdn.hashnode.com/res/hashnode/image/upload/v1666955558579/5bEreqpmr.png?auto=compress,format&amp;format=webp",
      "O Vercel e o Netflity tratam somente de sites estáticos, e o Heroku, apesar de poder trabalhar com APIs e outros tipos de aplicações, não é mais gratuito. O Fly.io pode ser uma boa alternativa para hospedar a sua API gratuitamente.",
      "Diferente das outras opções, o Fly.io não é muito bem um serviço com uma interface focada em ter uma boa experiência de usuário. O Fly.io é, na verdade uma CLI, ainda bastante fácil de ser usada, e que tem suporte para diversos tipos de aplicações: Node, Python, Laravel, Go e inclusive Docker. Também diferente das outras opções, não conta com um deploy automatizado, mas nada que você não possa construir você mesmo com o Github Actions, Jenkins ou qualquer outra ferramente de CI/CD.",
      "Apesar de não ser tão completo assim, o Fly.io pode ser uma ótima opção para o seu projeto.",
      "Railway.app",
      "https://cdn.hashnode.com/res/hashnode/image/upload/v1666955580410/VZmTjqWM_.png?auto=compress,format&amp;format=webp",
      "O Railway.app já é uma boa alternativa bem mais completa. Assim com o Fly.io, tem suporte a diversas linguagens e frameworks e assim como o Heroku possui uma interface amigável que facilita a sua implementação, com automação de deploy também presente! O Railway possui um plano gratuito, que apesar de baixa performance, pode funcionar muito bem para o seu projeto.",
      "AWS",
      "https://cdn.hashnode.com/res/hashnode/image/upload/v1666955602186/QyiUX-l8h.png?auto=compress,format&amp;format=webp",
      "A AWS é o maior serviço de hospedagem de aplicações, o mais utilizado em todo o mundo por diversas empresas e aplicativos —é até capaz que os serviços que citamos aqui utilizem a AWS por trás.",
      "Apesar de trazer serviços bastante simplificados, como o AWS Amplify, o uso da AWS não é tão simples assim, mas é mesmo mais completo e seguro sistema. Até mesmo por isso, contamos com profissionais de DevOps e infraestrutura especializados e certificados pela AWS —é inclusive, uma ótima carreira a ser seguida.",
      "Para a AWS vamos trazer conteúdos específicos, explicando bem como funciona.",
      "Essas foram as nossas recomendações de hospedagem de projetos. Se você conhece mais alguma, com alguma dica para nós, participe do nosso canal do Discord e mande por lá! Assine nossa newsletter e fique por dentro dos conteúdos da devGo."
    ]
  },
  {
    "mainImage": {
      "tag": "IMG",
      "src": "https://cdn.hashnode.com/res/hashnode/image/upload/v1666349905696/sO30t-GUw.png?w=1600&h=840&fit=crop&crop=entropy&auto=compress,format&format=webp",
      "alt": "Explorando funções assíncronas no Javascript",
      "decoding": "async",
      "dataNimg": "responsive",
      "style": "position:absolute;top:0;left:0;bottom:0;right:0;box-sizing:border-box;padding:0;border:none;margin:auto;display:block;width:0;height:0;min-width:100%;max-width:100%;min-height:100%;max-height:100%;background-size:cover;background-position:0% 0%;filter:blur(20px);background-image:url(\"https://cdn.hashnode.com/res/hashnode/image/upload/v1666349905696/sO30t-GUw.png?w=400&h=210&fit=crop&crop=entropy&auto=compress,format&format=webp&fm=blurhash\")"
    },
    "title": {
      "tag": "H1",
      "text": "Explorando funções assíncronas no Javascript"
    },
    "authorInfo": {
      "name": "Paulo Vitor Cruz",
      "profile": "https://hashnode.com/@paulovitorcs",
      "image": {
        "tag": "IMG",
        "src": "https://cdn.hashnode.com/res/hashnode/image/upload/v1627584398465/UPvyr0vKeP.jpeg?w=200&h=200&fit=crop&crop=faces&auto=compress,format&format=webp",
        "alt": "Paulo Vitor Cruz's photo",
        "decoding": "async",
        "dataNimg": "intrinsic",
        "style": "position:absolute;top:0;left:0;bottom:0;right:0;box-sizing:border-box;padding:0;border:none;margin:auto;display:block;width:0;height:0;min-width:100%;max-width:100%;min-height:100%;max-height:100%"
      }
    },
    "data": {
      "hour": "14:00",
      "data": "Oct 21, 2022"
    },
    "contentText": [
      "Hoje vamos explorar a sincronicidade no Javascript? Você sabe como utilizar uma função assíncrona?",
      "Programação Assíncrona",
      "Se você já realizou alguma ação em seu código, e teve que esperar uma resposta —por exemplo, um fetch a uma API, você já trabalhou com programação assíncrona.",
      "Sincronicidade no Javascript, é quando precisamos trabalhar com uma função que acontece em segundo plano, enquanto o restante do nosso código continua a rodar normalmente.",
      "Na prática, isso pode parecer um pouco estranho, afinal estamos acostumados com uma linha de código rodando atrás da outra.",
      "Veja o exemplo:",
      "const mensagemAposSegundos = (mensagem, segundos) =&gt; {",
      "  setTimeout(() =&gt; {",
      "    console.log(mensagem);",
      "  }, segundos * 1000);",
      "}",
      "",
      "const iniciaPrograma = () =&gt; {",
      "  mensagemAposSegundos('mensagem 1', 2);",
      "  mensagemAposSegundos('mensagem 2', 1);",
      "}",
      "",
      "iniciaPrograma();",
      "",
      "No código acima, criei a função mensagemAposSegundos que escreve no console uma mensagem qualquer após x segundos. Veja utilizei essa função 2 vezes, querendo escrever a “mensagem 1” após 2 segundos e a “mensagem 2” após 1 segundos.",
      "Lendo este código naturalmente, sem pensar em sincronicidade, o esperado seria o meu programa começar a rodar e após 2 segundos a “mensagem 1” ser exibida. Depois de mais 1 segundo, teríamos a “mensagem 2” no console. Mas, na prática, a resposta é:",
      "mensagem 2",
      "mensagem 1",
      "Pode parecer estranho, mas com Javascript, o que acontece é: a primeira função para exibir a “mensagem 1” é lida, e começa a rodar em segundo plano. Enquanto isso, o código já passa para a linha seguinte, onde é chamada a função para exibir a “mensagem 2” e também começa a rodar em segundo plano. Como a “mensagem 2” precisa de apenas 1 segundo para ser exibida, ela acontece primeiro, e só depois de 2 segundos a “mensagem 1” é exibida.",
      "Em alguns casos, queremos que o código exibido na ordem correta, e precisamos pedir para “esperar” a função terminar para ir a próxima linha. Com Javascript, precisamos transformar essa em função comum em uma função assíncrona, utilizando os recursos de async, await e promises.",
      "Async, await e Promises",
      "Uma função assíncrona em Javascript é uma Promise, um método que “promete” de entregar um resultado, seja ele positivo com um resolve ou negativo com um reject. Ao chamar uma função que retorna uma Promise, transformo essa função em assíncrona, e posso pedir ao código que “espere” essa função terminar, utilizando o prefixo await ou o método then para resultados positivos e catch para resultados negativos.",
      "",
      "🚨 Importante: só é possível utilizar o prefixo await dentro de uma função assíncrona.",
      "",
      "",
      "",
      "Em nosso exemplo anterior, para funcionar como esperado, precisamos criar uma Promise na função mensagemAposSegundos, prometendo sinalizar a conclusão dessa função somente após a exibição da mensagem. Assim, ao chamar a função posso pedir explicitamente ao código para esperar ser concluída com await ou realize uma ação após a sua conclusão com then",
      "const mensagemAposSegundos = async (mensagem, segundos) =&gt; {",
      "  return new Promise((resolve, reject) =&gt; {",
      "    setTimeout(() =&gt; {",
      "      console.log(mensagem);",
      "      resolve();",
      "    }, segundos * 1000);",
      "  });",
      "}",
      "",
      "const iniciaPrograma = async () =&gt; {",
      "  await mensagemAposSegundos('mensagem 1', 2);",
      "  await mensagemAposSegundos('mensagem 2', 1);",
      "",
      "    //ou",
      "",
      "  mensagemAposSegundos('mensagem 1', 2).then(() =&gt; {",
      "    mensagemAposSegundos('mensagem 2', 1);",
      "  });",
      "}",
      "",
      "iniciaPrograma();",
      "",
      "Desta forma, estamos indicando que a nossa função, que promete entregar um resultado com a Promise só é concluída, a partir do resolve(), após a exibição da mensagem. Como ela é uma função assíncrona, marcada com async, podemos pedir para esperar a função ser concluída com await, ou criar uma árvore de resultados com then, chamando a segunda mensagem somente após a primeira ter sido concluída. Tendo como resultado:",
      "mensagem 1",
      "mensagem 2",
      "Na prática",
      "Funções assíncronas e Promises já são bastante comuns durante o desenvolvimento, seja em uma API quando você cria um registro no banco de dados, ou seja, no frontend quando há uma requisição para uma API. Essas funções devem ser usadas com bastante cuidado para não “dessincronizar o seu código”.",
      "No exemplo abaixo, você tem uma função fetch, para pegar os dados de um usuário a partir de um endpoint de uma API e conferir se este usuário está logado.",
      "const isUserLogged = (userId) =&gt; {",
      "  const response = fetch(`https://example.com/api/user/${userId}`);",
      "  const user = response.json();",
      "",
      "  return user.isLogged;",
      "}",
      "",
      "Neste formato, sua função estaria errada. O fetch e a resposta do fetch são Promises, ou seja, são funções assíncronas, que acontecem apenas em segundo plano. Sem um pedido explicito de pedido de espera de finalização dessa função, a variável user estará vazia, ainda sem resposta, no retorno user.isLogged. O correto é algo como:",
      "const isUserLogged = async (userId) =&gt; {",
      "  const response = await fetch(`https://example.com/api/user/${userId}`);",
      "  const user = await response.json();",
      "",
      "  return user.isLogged;",
      "}",
      "",
      "Dessa forma, estamos solicitando que o código espere a função fetch ser finalizada, e espere a resposta ser transformada em JSON com response.json(). Assim, ao ter a variável user lida em user.isLogged todos, os dados estarão presentes.",
      "Este é um assunto bastante importante para desenvolvedores iniciantes, e veja que um pequeno deslize no código pode deixar tudo bastante confuso; por isso, é importante sempre ter bastante atenção no uso de Promises, Asyncs e Awaits, mas principalmente, entender o que realmente está acontecendo por trás dos códigos. Estudar estes conceitos da linguagem com certeza irão resultar em melhores códigos em seus projetos.",
      "Para ficar por dentro dos nossos próximos conteúdos, participe do nosso canal no Discord e se inscreva em nossa newsletter!"
    ]
  },
  {
    "mainImage": {
      "tag": "IMG",
      "src": "https://cdn.hashnode.com/res/hashnode/image/upload/v1665747570074/IO97UH95x.png?w=1600&h=840&fit=crop&crop=entropy&auto=compress,format&format=webp",
      "alt": "Bibliotecas UI no desenvolvimento frontend",
      "decoding": "async",
      "dataNimg": "responsive",
      "style": "position:absolute;top:0;left:0;bottom:0;right:0;box-sizing:border-box;padding:0;border:none;margin:auto;display:block;width:0;height:0;min-width:100%;max-width:100%;min-height:100%;max-height:100%;background-size:cover;background-position:0% 0%;filter:blur(20px);background-image:url(\"https://cdn.hashnode.com/res/hashnode/image/upload/v1665747570074/IO97UH95x.png?w=400&h=210&fit=crop&crop=entropy&auto=compress,format&format=webp&fm=blurhash\")"
    },
    "title": {
      "tag": "H1",
      "text": "Bibliotecas UI no desenvolvimento frontend"
    },
    "authorInfo": {
      "name": "Paulo Vitor Cruz",
      "profile": "https://hashnode.com/@paulovitorcs",
      "image": {
        "tag": "IMG",
        "src": "https://cdn.hashnode.com/res/hashnode/image/upload/v1627584398465/UPvyr0vKeP.jpeg?w=200&h=200&fit=crop&crop=faces&auto=compress,format&format=webp",
        "alt": "Paulo Vitor Cruz's photo",
        "decoding": "async",
        "dataNimg": "intrinsic",
        "style": "position:absolute;top:0;left:0;bottom:0;right:0;box-sizing:border-box;padding:0;border:none;margin:auto;display:block;width:0;height:0;min-width:100%;max-width:100%;min-height:100%;max-height:100%"
      }
    },
    "data": {
      "hour": "13:30",
      "data": "Oct 14, 2022"
    },
    "contentText": [
      "Podemos otimizar o desenvolvimento frontend simplificando algumas etapas do processo. Você já utiliza alguma biblioteca UI no seu frontend? No artigo de hoje vamos te mostrar algumas opções, e como elas podem te ajudar no desenvolvimento.",
      "O que é uma biblioteca UI?",
      "Boa parte do desenvolvimento de um projeto frontend é estilizar a sua página, e tenho certeza que você já gastou muito tempo com isso. Criar classes no CSS e estilizar componentes demanda tempo, trabalho e bastante atenção. Mas existem ferramentas, como as bibliotecas UI, que podem te auxiliar neste processo.",
      "O princípio de uma biblioteca UI é compartilhar funções, classes e até componentes já estilizados e prontos para uso em seu projeto.",
      "Podemos partir do exemplo que o seu projeto, sempre irá utilizar um botão. Nativamente, um botão simples do HTML não tem estilo algum, e você precisaria construir este estilo: adicionar uma cor de fundo, criar bordas, efeitos, entre diversas outras possibilidades. Ao utilizar uma biblioteca UI você elimina este processo, já criando um botão muito bem estilizado.",
      "https://cdn.hashnode.com/res/hashnode/image/upload/v1665747267869/yBWf_H3f_.png?auto=compress,format&amp;format=webp",
      "A ideia é que, utilizando classes CSS já prontas, ou até mesmo um componente, você já tenha o componente completamente estilizado, por exemplo:",
      "&lt;button class=\"btn btn-primary\"&gt;Botão&lt;/button&gt;",
      "",
      "&lt;Button variant=\"solid\"&gt;Botão&lt;/Button&gt;",
      "",
      "Perceba que não é preciso escrever nenhuma classe btn ou btn-primary, nem ao mesmo construiu, um componente Button. Todos eles foram importados da biblioteca de UI e já estão prontos para uso na sua aplicação.",
      "Por que usar?",
      "O principal motivo é agilidade. Com o uso de uma biblioteca UI você poupa tempo de desenvolvimento com funções já prontas para o seu projeto. Não há mais necessidade de construir estilos e componentes do 0, tudo parte de adaptações do que já é entregue a você pelas bibliotecas de UI.",
      "Os componentes e classes entregues chegam mesmo é para facilitar o trabalho do desenvolvedor. Sabe aquela guerra para centralizar uma div em uma página? Casos comuns assim já chegam resolvidos por funcionalidades já criadas na biblioteca de UI.",
      "Outro ponto importante é também a acessibilidade e a experiência de usuário. Algo que você gastaria bastante tempo trabalhando e testando já vem pronto e preparados para essas situações. Pense que esses componentes foram criados por alguém que realmente estudou e se dedicou a trabalhar nestes pontos.",
      "Quais bibliotecas posso usar em meu projeto?",
      "A escolha de uma biblioteca UI para o seu projeto é sempre uma escolha pessoal. Veja a que mais te agrada, a que melhor se adapta a seu projeto, e a que melhor encaixa com a sua experiência. Mas trago aqui algumas das bibliotecas mais populares:",
      "Bootstrap:",
      "https://cdn.hashnode.com/res/hashnode/image/upload/v1665747358080/88aQjpSql.png?auto=compress,format&amp;format=webp",
      "O Bootstrap é uma biblioteca UI feita com CSS e jQuery. Ela te entrega classes CSS e você precisa apenas aplicar essas classes no seu HTML.",
      "O Bootstrap trás recursos bastantes interessantes, forcendo até mesmo elementos completos e prontos para uso como formulários, tabelas e até modais.",
      "Você pode conferir mais funcionalidades do Bootstrap a partir dessa documentação.",
      "Tailwind CSS",
      "https://cdn.hashnode.com/res/hashnode/image/upload/v1665747375731/5iVqdAZKm.png?auto=compress,format&amp;format=webp",
      "Assim como o Bootstrap, o Tailwind também é uma biblioteca UI feita com CSS, te entregando classes para serem aplicadas no seu HTML.",
      "Diferente do Bootstrap, o Tailwind trabalha apenas com classes utilitárias, facilitando a sintaxe e a escrita de elementos CSS no seu código. É bastante interessante e tem se tornado bem popular.",
      "Você pode conferir a documentação do Tailwind por este link.",
      "Material UI",
      "https://cdn.hashnode.com/res/hashnode/image/upload/v1665747386336/UjcRV2kxU.png?auto=compress,format&amp;format=webp",
      "O Material UI é um design system bastante completo, e uma biblioteca de UI criada pelo próprio Google e bastante utilizada em seus aplicativos e presente em vários frameworks.",
      "O Material UI já é um pouco mais robusto, compartilhando componentes completos dos mais variados tipos.",
      "Confira documentação do Material UI para React, Angular e Flutter.",
      "Chakra UI",
      "https://cdn.hashnode.com/res/hashnode/image/upload/v1665747398597/46ehzP9Yy.png?auto=compress,format&amp;format=webp",
      "Este é mesmo o meu preferido para React. O Chakra UI, assim como o Material UI é uma biblioteca bastante completa com diversos tipos de componentes. O Chakra UI utiliza também como base as funcionalidades do Tailwind como utilitários nos componentes, trazendo ainda mais agilidade para o desenvolvimento.",
      "Você pode acessar a documentação do Chakra UI por este link.",
      "Claro que ainda existem milhares de outras bibliotecas, e novas ainda sempre irão surgir.",
      "Uma ótima dica também pode ser construir a sua própria biblioteca de UI, que será assunto para um próximo texto!",
      "Acompanhe nosso canal no Discord, e se inscreva em nossa newsletter para ficar por dentro dos conteúdos da Devnology."
    ]
  },
  {
    "mainImage": {
      "tag": "IMG",
      "src": "https://cdn.hashnode.com/res/hashnode/image/upload/v1665149744885/Y9QXxXGFh.png?w=1600&h=840&fit=crop&crop=entropy&auto=compress,format&format=webp",
      "alt": "Entendendo Hooks no React",
      "decoding": "async",
      "dataNimg": "responsive",
      "style": "position:absolute;top:0;left:0;bottom:0;right:0;box-sizing:border-box;padding:0;border:none;margin:auto;display:block;width:0;height:0;min-width:100%;max-width:100%;min-height:100%;max-height:100%;background-size:cover;background-position:0% 0%;filter:blur(20px);background-image:url(\"https://cdn.hashnode.com/res/hashnode/image/upload/v1665149744885/Y9QXxXGFh.png?w=400&h=210&fit=crop&crop=entropy&auto=compress,format&format=webp&fm=blurhash\")"
    },
    "title": {
      "tag": "H1",
      "text": "Entendendo Hooks no React"
    },
    "authorInfo": {
      "name": "Paulo Vitor Cruz",
      "profile": "https://hashnode.com/@paulovitorcs",
      "image": {
        "tag": "IMG",
        "src": "https://cdn.hashnode.com/res/hashnode/image/upload/v1627584398465/UPvyr0vKeP.jpeg?w=200&h=200&fit=crop&crop=faces&auto=compress,format&format=webp",
        "alt": "Paulo Vitor Cruz's photo",
        "decoding": "async",
        "dataNimg": "intrinsic",
        "style": "position:absolute;top:0;left:0;bottom:0;right:0;box-sizing:border-box;padding:0;border:none;margin:auto;display:block;width:0;height:0;min-width:100%;max-width:100%;min-height:100%;max-height:100%"
      }
    },
    "data": {
      "hour": "14:00",
      "data": "Oct 7, 2022"
    },
    "contentText": [
      "Vamos nos aprofundar com React, e entender o que são os hooks!",
      "Se você conhece bem React, já deve ter visto alguns componentes criados utilizando “classes”. Este era o padrão até a versão 16.7, afinal, alguns recursos do React eram limitados a classe. Os hooks vieram para tirar essa limitação e abrir todos os recursos do React em um formato simples de “função”.",
      "O que antes era assim:",
      "class Example extends React.Component {",
      "  constructor(props) {",
      "    super(props);",
      "    this.state = { count: 0 };",
      "  }",
      "",
      "  handleButtonClick() {",
      "    this.setState({",
      "      count: this.state.count + 1,",
      "    });",
      "  }",
      "",
      "  render() {",
      "    return (",
      "      &lt;div&gt;",
      "        &lt;p&gt;Você clicou {this.state.count} vezes&lt;/p&gt;",
      "        &lt;button onClick={this.handleButtonClick}&gt;Clique aqui&lt;/button&gt;",
      "      &lt;/div&gt;",
      "    );",
      "  }",
      "}",
      "",
      "Ficou assim:",
      "const Example = props =&gt; {",
      "  const [count, setCount] = useState(0);",
      "",
      "  const handleButtonClick = () =&gt; {",
      "    setCount(count + 1);",
      "  };",
      "",
      "  return (",
      "    &lt;div&gt;",
      "      &lt;p&gt;Você clicou {count} vezes&lt;/p&gt;",
      "      &lt;button onClick={handleButtonClick}&gt;Clique aqui&lt;/button&gt;",
      "    &lt;/div&gt;",
      "  );",
      "};",
      "",
      "Com o uso dos hooks você pode ter acesso aos estados de um componente e até mesmo a rotina de criação/execução deste mesmo componente de forma muito mais simples e direta. Você pode até mesmo criar o seu próprio hook, segundo a sua necessidade e funcionalidade desejada.",
      "Vamos explorar alguns dos hooks mais utilizados:",
      "useState()",
      "O useState é o hook mais comum do React, afinal, é com ele que temos acesso à funcionalidade de estados de um componente.",
      "Com os estados, você pode mudar o valor de uma variável dinamicamente, após a sua página ter sido renderizada, e o próprio React irá atualizar o valor na página de forma automática.",
      "Para utilizar, é bem simples. Basta chamar a função useState e como parâmetro, enviar o valor default do estado. A função irá te entregar um array com duas variáveis, a primeira sendo o valor atual do estado, e a segunda uma função para mudar o valor do estado:",
      "const [valorAtualDoEstado, funcaoParaMudarOValor] = useState(valorDefault);",
      "",
      "useEffect()",
      "O useEffect é outro hook bastante popular e usado diariamente no nosso desenvolvimento com React, com ele, podemos monitorar cada mudança em nosso componente, desde a sua criação, a alguma alteração dentro do componente, ou o seu fim.",
      "Ao utilizar o useEffect em seu componente é esperado que você envie como parâmetro, uma função qualquer, que será utilizada em qualquer nova ação ou efeito dentro do seu componente —importante dizer que o retorno desta função é utilizado ao fim da ação, ou efeito. Além desta função, é esperado no segundo parâmetro um array que contenha as variáveis ou funções a serem observadas —quando vazio, considera-se o próprio componente, no fim, ou no final de seu ciclo de vida.",
      "const funcaoQualquer = () =&gt; {",
      "    console.log('Chamado no inicio da ação');",
      "",
      "    return () =&gt; {",
      "        console.log('Chamado no final da ação');",
      "    }",
      "};",
      "",
      "const variaveisObservadas = [];",
      "",
      "useEffect(funcaoQualquer, variaveisObservadas);",
      "",
      "É bastante comum com o useEffect, por exemplo, ao inicializar o componente realizar um fetch em uma API para buscar os dados a serem utilizados. Também é bastante comum monitorar a mudança de alguma variável para realizar uma ação posterior. Em alguns casos, durante o seu projeto pode ser preciso “desativar” alguma funcionalidade, como, por exemplo, parar de escutar um evento do DOM.",
      "Como criar o seu próprio hook",
      "Um recurso bastante interessante é poder criar seu próprio hook.",
      "Perceba que só é possível utilizar as funcionalidades do React somente dentro de um componente, e não em uma função, por exemplo. Desta forma, ficamos limitados no compartilhamento de código, visto que para reproduzir uma certa funcionalidade preciso de um componente para ela. Mas com essa nova possibilidade, você pode elevar o nível de função comum para o estado de “hook” permitindo compartilhar recursos nativos do React, inclusive outros hooks, em qualquer lugar.",
      "Para criar um hook, basta criar uma função com o prefixo use, assim o React reconhece como um hook e permite o uso de seus recursos dentro dessa função.",
      "Uso bastante o exemplo abaixo em meus projetos, quando preciso buscar o tamanho da página, em largura e altura. Poderíamos utilizar a variável window.innerWidth ou window.innerHeight, mas os valores não serão reativos conforme o que o usuário faz na tela (se diminui ou aumenta o tamanho da página, os valores serão os mesmos). A solução para isso, é criar um state para salvar a largura e a altura, assim terei os valores reativos. Ainda assim, preciso monitorar essa variável para mantê-la sempre atualizada, por isso, utilizo um useEffect para assistir o evento “resize” na página, que irá alterar o valor do meu estado que contém a largura e altura da página, da mesma forma que retiro esse evento quando a página é fechada. Desta forma, consigo retornar em minha função, ou hook, valores reativos da largura e altura de uma página.",
      "export const useWindowSize = () =&gt; {",
      "  const [windowSize, setWindowSize] = useState({",
      "    width: 0,",
      "    height: 0,",
      "  });",
      "",
      "  const handleSetWindowSize = () =&gt; {",
      "    setWindowSize({",
      "      width: window.innerWidth,",
      "      height: window.innerHeight,",
      "    });",
      "  };",
      "",
      "  const handleOnPageInit = () =&gt; {",
      "    window.addEventListener('resize', handleSetWindowSize);",
      "  };",
      "",
      "  const handleOnPageClose = () =&gt; {",
      "    window.removeEventListener('resize', handleSetWindowSize);",
      "  };",
      "",
      "  useEffect(() =&gt; {",
      "    handleSetWindowSize();",
      "    handleOnPageInit();",
      "",
      "    return () =&gt; handleOnPageClose();",
      "  }, []);",
      "",
      "  return windowSize;",
      "};",
      "",
      "E para usar, basta chamar:",
      "const { width, height } = useWindowSize();",
      "",
      "Como disse no texto “Como organizo meus projetos frontend”, gosto até de utilizar os hooks como use case de um projeto, onde agrupo diversas funcionalidades como fetch de dados e busca de informações no store para ter um código limpo e fácil de ser compartilhado.",
      "Hooks no React são bastante poderosos e você pode e deve abusar deste recurso.",
      "Em nossos projetos da devGo, traremos este conceito a prática. Você pode acompanhar nossos conteúdos participando de nosso canal no Discord e se inscrevendo na nossa newsletter."
    ]
  },
  {
    "mainImage": {
      "tag": "IMG",
      "src": "https://cdn.hashnode.com/res/hashnode/image/upload/v1664544730466/Z35VmYeoa.png?w=1600&h=840&fit=crop&crop=entropy&auto=compress,format&format=webp",
      "alt": "Boas práticas para desenvolvimento de uma API Rest",
      "decoding": "async",
      "dataNimg": "responsive",
      "style": "position: absolute; inset: 0px; box-sizing: border-box; padding: 0px; border: none; margin: auto; display: block; width: 0px; height: 0px; min-width: 100%; max-width: 100%; min-height: 100%; max-height: 100%;"
    },
    "title": {
      "tag": "H1",
      "text": "Boas práticas para desenvolvimento de uma API Rest"
    },
    "authorInfo": {
      "name": "Paulo Vitor Cruz",
      "profile": "https://hashnode.com/@paulovitorcs",
      "image": {
        "tag": "IMG",
        "src": "https://cdn.hashnode.com/res/hashnode/image/upload/v1627584398465/UPvyr0vKeP.jpeg?w=200&h=200&fit=crop&crop=faces&auto=compress,format&format=webp",
        "alt": "Paulo Vitor Cruz's photo",
        "decoding": "async",
        "dataNimg": "intrinsic",
        "style": "position:absolute;top:0;left:0;bottom:0;right:0;box-sizing:border-box;padding:0;border:none;margin:auto;display:block;width:0;height:0;min-width:100%;max-width:100%;min-height:100%;max-height:100%"
      }
    },
    "data": {
      "hour": "14:00",
      "data": "Sep 30, 2022"
    },
    "contentText": [
      "Você já sabe o que é uma API, mas conhece as boas práticas de desenvolvimento? Neste artigo vamos mostrar o que você pode fazer para ter uma API direta e objetiva, fácil de usar e bem documentada.",
      "Escreva bem as suas rotas",
      "A nomenclatura de rotas é bem importante na sua API. A dica é simplificar os endpoints, utilizar bem os métodos HTTP e manter um padrão referente a funcionalidade.",
      "Em um exemplo em um blog de postagens, como aqui na devGo, temos o objeto de “posts”. Desta forma, centralizamos todas as rotas e funcionalidades em cima deste modelo “posts”, utilizando sempre como base rota https://api.local/posts para tratar sobre postagens.",
      "",
      "Se você quer buscar todas as postagens, basta utilizar um GET diretamente na rota “posts”, com GET https://api.local/posts",
      "Se você quer adicionar uma nova postagem, não há necessidade de uma nova rota, apenas uma mudança no método, agora utilizando um POST com POST https://api.local/posts",
      "Se você quer buscar uma única postagem, ou seja, especificar uma postagem, utilizamos a mesma rota, mas agora trazendo alguma identificação da postagem a ter seus detalhes expostos, e sendo uma busca, utilizamos o método GET com GET https://api.local/posts/1",
      "Se você quer editar uma postagem, mantemos a especificação na rota, afinal, você edita apenas uma única postagem. Neste caso, utilizamos o método PUT, na rota identificada pelo ID da postagem com PUT https://api.local/posts/1",
      "Se você quer excluir uma postagem, realizamos o mesmo padrão na edição: especificamos o ID da postagem na rota, e utilizamos o método DELETE com DELETE https://api.local/posts/1",
      "",
      "As rotas devem sempre ser o mais simples e direta possível, sem necessidade de, por exemplo, especificar a ação, como: POST https://api.local/addNewPost ou GET https://api.local/getAllPosts. Essa não é uma boa prática e deve ser sempre evitada.",
      "Perceba que utilizamos apenas um único modelo de rota /posts/ e que em alguns casos pode até ser identificado por /posts/${id}. Muitas URLs acabam sendo as mesmas, mas que são diferenciadas com base no método HTTP utilizado. Com este padrão, simplificamos o nome das rotas deixando-a mais objetiva, com foco apenas no seu objeto, no caso dos exemplos, as postagens.",
      "Tratamento de erros",
      "Lembre-se que apenas você, que desenvolveu a API, sabe bem as suas regras. Uma API pode ser aberta ao público, ou algum outro desenvolvedor do seu time pode também estar usando e por isso tudo deve ser bem objetivo, inclusive, os erros da sua API.",
      "Não é uma boa prática exibir erros como “Internal Server Error” para o seu usuário, você deve sempre especificar o que aconteceu, como, por exemplo, ao adicionar uma nova postagem, você precisa que seja enviado no body da requisição o título da postagem, o nome do autor, e o conteúdo da postagem. Se o usuário não enviar o nome do autor, você deve retornar um erro dizendo que o nome do usuário está faltando. Uma boa mensagem de erro é algo como:",
      "Copy{",
      "    \"success\": false,",
      "    \"message\": \"Erro ao adicionar postagem\",",
      "    \"errors\": [\"Campo nome do autor está vazio\"],",
      "}",
      "",
      "Seja bem claro com os erros, e mostre ao usuário o que ele pode fazer para resolver o problema que foi encontrado na sua API.",
      "Utilize bem os códigos de status",
      "O protocolo HTTP naturalmente utiliza de status codes em suas requisições, e cada status, traz uma mensagem e um significado. Os mais comuns são:",
      "",
      "Status 200 para sucesso",
      "Status 401 para ação não autorizada",
      "Status 404 para dado não encontrado",
      "Status 422 para não foi possível processar os dados",
      "Status 500 para erro não identificado",
      "Status 504 para uma expiração de tempo de resposta",
      "",
      "Você pode encontrar uma lista completa dos status codes e seus significados neste link.",
      "As aplicações clientes podem utilizar estes códigos para identificar alguma ação ou realizar algum tratamento de erro no aplicativo. Eles também são bem úteis para monitorar a sua API, comparar taxas de sucesso e erro com maior facilidade e mapear ações de usuários.",
      "A grande dica é utilizar bem destes status.",
      "Use o Swagger",
      "O Swagger é uma ferramenta de documentação e visualização de sua API. O Swagger cria uma interface, onde você consegue ver todos os endpoints, todos os modelos de payloads e quais respostas e quais status podem ser recebidos em cada rota. Além disso, o Swagger permite que você use a API diretamente na interface, realizando requisições GET POST PUT DELETE com grande facilidade.",
      "https://cdn.hashnode.com/res/hashnode/image/upload/v1664544571315/r6AtsuPOE.png?auto=compress,format&amp;format=webp",
      "O Swagger é um ótimo serviço para você levar a sua API. É bem simples de usar, e a maioria dos frameworks já apresenta suporte: Laravel com Swagger, NestJS com Swagger, Flask com Swagger. ",
      "É bastante útil para você apresentar a sua API de forma mais amigável.",
      "Veja que com dicas simples você pode transformar a sua API. O que foi dito por aqui é bastante comum, os próprios desenvolvedores já esperam que uma API seja assim, portanto já é um padrão indispensável no seu desenvolvimento.",
      "Fique por dentro dos próximos conteúdos da DevGo, participe de nosso canal do Discord e se inscreva em nossa newsletter. Traremos conteudos em breve e essas dicas estarão bastante presentes."
    ]
  },
  {
    "mainImage": {
      "tag": "IMG",
      "src": "https://cdn.hashnode.com/res/hashnode/image/upload/v1663933447301/KSt3sFkWk.png?w=1600&h=840&fit=crop&crop=entropy&auto=compress,format&format=webp",
      "alt": "Porque você deve estudar Flutter",
      "decoding": "async",
      "dataNimg": "responsive",
      "style": "position:absolute;top:0;left:0;bottom:0;right:0;box-sizing:border-box;padding:0;border:none;margin:auto;display:block;width:0;height:0;min-width:100%;max-width:100%;min-height:100%;max-height:100%;background-size:cover;background-position:0% 0%;filter:blur(20px);background-image:url(\"https://cdn.hashnode.com/res/hashnode/image/upload/v1663933447301/KSt3sFkWk.png?w=400&h=210&fit=crop&crop=entropy&auto=compress,format&format=webp&fm=blurhash\")"
    },
    "title": {
      "tag": "H1",
      "text": "Porque você deve estudar Flutter"
    },
    "authorInfo": {
      "name": "Paulo Vitor Cruz",
      "profile": "https://hashnode.com/@paulovitorcs",
      "image": {
        "tag": "IMG",
        "src": "https://cdn.hashnode.com/res/hashnode/image/upload/v1627584398465/UPvyr0vKeP.jpeg?w=200&h=200&fit=crop&crop=faces&auto=compress,format&format=webp",
        "alt": "Paulo Vitor Cruz's photo",
        "decoding": "async",
        "dataNimg": "intrinsic",
        "style": "position:absolute;top:0;left:0;bottom:0;right:0;box-sizing:border-box;padding:0;border:none;margin:auto;display:block;width:0;height:0;min-width:100%;max-width:100%;min-height:100%;max-height:100%"
      }
    },
    "data": {
      "hour": "14:00",
      "data": "Sep 23, 2022"
    },
    "contentText": [
      "Flutter tem ganhado bastante espaço no desenvolvimento frontend, mas você sabe por quê? Hoje vamos falar um pouco sobre Flutter e por que você já deveria estar estudando!",
      "O que é Flutter?",
      "Flutter é um framework frontend em Dart, criado pelo Google, que promete desenvolver aplicativos para “qualquer tela”.",
      "O legal do Flutter é ser mesmo multiplataforma. Começou com a ideia de desenvolver aplicativos mobile, tanto para iOS quanto para Android com o mesmo código —o que, antes, era exigido utilizar linguagens especificas para cada plataforma. Hoje em dia, o Flutter é ainda maior: com o mesmo código você pode fazer aplicações mobile, web e desktop!",
      "Da mesma forma que isso chamou a sua atenção, chamou também a de grandes empresas: Nubank, iFood, eBay, Alibaba e claro, o próprio Google utiliza Flutter no desenvolvimento de seus projetos, e eles têm toda razão em fazer isso: economizam em código, melhoram o desempenho e trazem mais agilidade no desenvolvimento.",
      "É sempre bom conhecer um pouco sobre mobile",
      "Se você está começando na área de desenvolvimento, saiba que é importante conhecer um pouco o mundo do mobile. Toda aplicação tem a sua versão para mobile e por isso o mercado de desenvolvedores frontend mobile tem crescido bastante.",
      "Mas perceba que até então, frontend web e frontend mobile sempre foram duas áreas bem diferentes, cada qual com seus frameworks, linguagens e tecnologias. Saber desenvolver uma aplicação web, com HTML/CSS, React, Angular ou Vue não garante em absolutamente nada que você irá conseguir desenvolver um aplicativo mobile, por isso, é bastante comum que os desenvolvedores estudem um pouco de mobile para se garantirem no fluxo completo de desenvolvimento.",
      "Especialmente para desenvolvimento mobile, Flutter domou bem o mercado e há diversas vagas abertas para especialistas em Flutter em grandes empresas no Brasil e ao redor do mundo. Estudar Flutter é ampliar suas chances de ter sua primeira oportunidade como desenvolvedor.",
      "Fácil adaptação",
      "Flutter tem uma curva de aprendizado muito rápida. Não só sua própria sintaxe é simples e fácil de ser compreendida, como também não requer que você tenha conhecimentos da plataforma que você está desenvolvendo —algo bem comum ao desenvolver para Android ou iOS.",
      "De fato, por utilizar de uma linguagem de programação não tão comum como o Dart, você irá sentir uma leve diferença, mas lembre-se que, linguagens de programação são sempre linguagens de programação. Na prática, Flutter tem uma estrutura muito parecida com a de outros frameworks frontend como React ou Angular, e da mesma forma utiliza-se bastante da construção de componentes, aqui chamados de “Widgets”: o jogo é sempre o mesmo.",
      "Por ser de código aberto, tem grande apoio da comunidade e existem diversas bibliotecas que auxiliam o desenvolvimento de um aplicativo, como o próprio Material Design em Flutter, GetX para gerenciamento de estados, Dio para requisições a APIs, entre várias outras.",
      "2 coelhos com uma cajadada só",
      "A grande vantagem de Flutter é ter suporte para plataformas diferentes. Android, iOS, Web, Windows, MacOS, Linux.",
      "Não se preocupe, não há mesmo necessidade de pensar que aplicativos mobiles e aplicativos web precisam ser diferentes. Em Flutter com o mesmo código, você pode ter “builds” diferentes para cada plataforma, atendendo o seu usuário da forma que ele melhor desejar sem a necessidade de estudar outra tecnologia, construir uma nova aplicação e repassar por todo o processo novamente. Não há diferença de performance, não há diferença de aparências e não há diferença em desenvolvimento, pode confiar!",
      "Na Devnology começamos a implementar Flutter em nossas aplicações e tem sido uma ótima experiência: agilizamos o desenvolvimento de um projeto entregando versões web e desktop de uma mesma aplicação em um tempo bem menor, com apenas uma única equipe de desenvolvimento e evitando a necessidade de testes duplicados —afinal, a aplicação web é exatamente igual à aplicação mobile. Em questão de adaptação entre tecnologias, um mesmo time, bastante familiarizado com React, precisou de um pouco mais de um mês para se adaptar ao Flutter e ter a mesma produtividade com o novo framework, e com boa aceitação do time.",
      "Obviamente o Flutter ainda tem muito o que evoluir, e por isso, há atualizações e novos recursos sendo entregues constantemente, e vamos comentar alguns deles por aqui nos próximos artigos da devGo.",
      "A comunidade de desenvolvimento tem sido bastante receptiva a tecnologia e você como um bom desenvolvedor não deveria ficar de fora. Tecnologias mudam constantemente, e com tantas vantagens assim Flutter só tem a te trazer vantagens!",
      "Traremos bastante projetos com Flutter aqui na devGo. Participe de nosso canal de Discord, inscreva-se em nossa newsletter e fique por dentro dos nossos conteúdos aqui na devGo!"
    ]
  },
  {
    "mainImage": {
      "tag": "IMG",
      "src": "https://cdn.hashnode.com/res/hashnode/image/upload/v1663334135750/aibWTemjH.png?w=1600&h=840&fit=crop&crop=entropy&auto=compress,format&format=webp",
      "alt": "Conhecendo o GraphQL",
      "decoding": "async",
      "dataNimg": "responsive",
      "style": "position:absolute;top:0;left:0;bottom:0;right:0;box-sizing:border-box;padding:0;border:none;margin:auto;display:block;width:0;height:0;min-width:100%;max-width:100%;min-height:100%;max-height:100%;background-size:cover;background-position:0% 0%;filter:blur(20px);background-image:url(\"https://cdn.hashnode.com/res/hashnode/image/upload/v1663334135750/aibWTemjH.png?w=400&h=210&fit=crop&crop=entropy&auto=compress,format&format=webp&fm=blurhash\")"
    },
    "title": {
      "tag": "H1",
      "text": "Conhecendo o GraphQL"
    },
    "authorInfo": {
      "name": "Paulo Vitor Cruz",
      "profile": "https://hashnode.com/@paulovitorcs",
      "image": {
        "tag": "IMG",
        "src": "https://cdn.hashnode.com/res/hashnode/image/upload/v1627584398465/UPvyr0vKeP.jpeg?w=200&h=200&fit=crop&crop=faces&auto=compress,format&format=webp",
        "alt": "Paulo Vitor Cruz's photo",
        "decoding": "async",
        "dataNimg": "intrinsic",
        "style": "position:absolute;top:0;left:0;bottom:0;right:0;box-sizing:border-box;padding:0;border:none;margin:auto;display:block;width:0;height:0;min-width:100%;max-width:100%;min-height:100%;max-height:100%"
      }
    },
    "data": {
      "hour": "13:57",
      "data": "Sep 16, 2022"
    },
    "contentText": [
      "GraphQL é uma ótima ferramenta e tem se tornado bastante popular no desenvolvimento de APIs. No artigo de hoje vamos entender o que é, quais as vantagens e por que usar GraphQL.",
      "O que é",
      "GraphQL é uma linguagem para escrita de “querys”. Isso mesmo, uma query: da mesma forma que você escreve em, por exemplo, um banco de dados, para buscar/adicionar/editar/excluir determinada informação, você pode escrever utilizando GraphQL.",
      "Mas calma, GraphQL não é um banco de dados. O legal do GraphQL é que ele permite que você escreve querys diretamente em uma API, tendo total liberdade sobre as informações que você quer e precisa.",
      "Vamos supor que você quer buscar uma lista de produtos, basta utilizar a query:",
      "query {",
      "    products {",
      "      id,",
      "        name,",
      "        price,",
      "        discount",
      "    }",
      "}",
      "",
      "E você terá como resultado um JSON como:",
      "{",
      "    \"products\": {",
      "        \"id\": 1",
      "        \"name\": \"Product 1\",",
      "        \"price\": 10.00,",
      "        \"discount\": 2.00",
      "    }",
      "}",
      "",
      "E quando digo sobre liberdade, é porque você pode escolher apenas as informações que você precisa. Vamos supor que em determinada situação você precisa apenas do nome do produto, basta então pedir apenas o name:",
      "query {",
      "    products {",
      "        name",
      "    }",
      "}",
      "",
      "Como resultado:",
      "{",
      "    \"products\": {",
      "        \"name\": \"Product 1\",",
      "    }",
      "}",
      "",
      "Pense bem o quão poderoso é esse recurso. Já pensou o seu frontend podendo controlar as informações que vem da API?",
      "Qual a diferença entre um API Restful?",
      "Já estamos todos acostumados com uma API Restful com requisições GET e POST para endpoints bem definidos. Com GraphQL já é bem diferente.",
      "Aqui não há mais necessidade de endpoints como um GET /products ou GET /products/:id , com GraphQL existe apenas um único endpoint e as queries que você envia para este endpoint. As informações são montadas todas em cima das querys.",
      "Outra grande diferença é a versatilidade que o GraphQL traz para o uso de uma API. Diferente do modelo Restful, em que endpoints possuem regras e retornam um padrão de dados bem definidos, o GraphQL permite que você trabalhe com mais liberdade, excluindo até mesmo a necessidade de versionamento ou múltiplos endpoints com tratamentos de dados diferentes. Com GraphQL todo esse controle vem diretamente do usuário, ou da aplicação que constrói a query.",
      "Essas diferenças podem ser bastante uteis durante o desenvolvimento, principalmente na etapa de integração entre um frontend e uma API. Com isso, o GraphQL tem chamado bastante atenção dos desenvolvedores e tomando um espaço que antes eram de sistemas Restful.",
      "Schemas, Types, Querys, Mutations",
      "Com GraphQL não existem requisições, muito menos métodos HTTP como GET, POST, PUT e DELETE. As coisas são um pouco diferentes e fazemos os tratamentos de query a partir de Querys, Mutations e Subscriptions",
      "Schemas e Types:",
      "Em GraphQL, Schemas e Types funcionam como uma “modelação” dos dados, permitindo ser usados até mesmo como documentação de sua API.",
      "Os Types são usados para descrever quais dados uma query pode entregar a você:",
      "type Product {",
      "    id: Int,",
      "    name: String,",
      "    price: Float,",
      "    discount: Float",
      "}",
      "",
      "Já os Schemas são mesmo uma definição do que a sua API é capaz de fazer, contendo todas as querys e mutations disponibilizadas:",
      "type Query {",
      "    products(id: Int): Product",
      "}",
      "",
      "type Mutation {",
      "    newProduct(name: String, price: Float, discount: Float): Product,",
      "    editProduct(id: Int, discount: Float): Product,",
      "    deleteProduct(id: Int): Product",
      "}",
      "",
      "schema {",
      "    query: Query",
      "  mutation: Mutation",
      "}",
      "",
      "Querys:",
      "Já vimos nos exemplos a cima que as querys podem ser formadas dinamicamente para trazer a exata informação que você precisa. Ainda nas querys, podemos usar parâmetros e alguns argumentos para deixar a sua query mais poderosa com filtros:",
      "query {",
      "    products(id: 1) {",
      "      id,",
      "        name,",
      "        price,",
      "        discount",
      "    }",
      "}",
      "",
      "Mutations",
      "Perceba que as querys são como um GET em um sistema Restful, apenas trazem as informações. Mas ações como POST, PUT e DELETE são vistas no GraphQL como “mutations”. Elas também são realizadas como querys e da mesma forma, você pode montar o formato como quiser, a diferença é que esta query agora realiza uma função na sua API:",
      "mutation {",
      "  newProduct(name: \"Product 2\", price: 15.00, discount: 3.00) {",
      "    id,",
      "    name",
      "  }",
      "}",
      "",
      "mutation {",
      "  editProduct(id: 1, discount: 1.00) {",
      "    id,",
      "    name,",
      "        price",
      "  }",
      "}",
      "",
      "mutation {",
      "  deleteProduct(id: 1) {",
      "    id,",
      "    name",
      "  }",
      "}",
      "",
      "Trabalhando com GraphQL",
      "Para utilizar o GraphQL você precisa mesmo de uma ferramenta extra, para habilitar o uso na sua API, e também outra ferramenta para permitir que o seu frontend possa utilizar esta API em GraphQL. Nestes casos recomendo bastante o uso do Apollo, com o Apollo Server para API e o Apollo Client para o frontend.",
      "Ainda há muito mais para explorar do GraphQL, o artigo de hoje é apenas uma introdução. Nos próximos conteúdos da devGo tentaremos montar alguns projetos utilizando essa tecnologia e ver na prática como ela pode nos ajudar."
    ]
  },
  {
    "mainImage": {
      "tag": "IMG",
      "src": "https://cdn.hashnode.com/res/hashnode/image/upload/v1662762156386/tQsbrrT6V.png?w=1600&h=840&fit=crop&crop=entropy&auto=compress,format&format=webp",
      "alt": "Como organizo meus projetos frontend",
      "decoding": "async",
      "dataNimg": "responsive",
      "style": "position:absolute;top:0;left:0;bottom:0;right:0;box-sizing:border-box;padding:0;border:none;margin:auto;display:block;width:0;height:0;min-width:100%;max-width:100%;min-height:100%;max-height:100%;background-size:cover;background-position:0% 0%;filter:blur(20px);background-image:url(\"https://cdn.hashnode.com/res/hashnode/image/upload/v1662762156386/tQsbrrT6V.png?w=400&h=210&fit=crop&crop=entropy&auto=compress,format&format=webp&fm=blurhash\")"
    },
    "title": {
      "tag": "H1",
      "text": "Como organizo meus projetos frontend"
    },
    "authorInfo": {
      "name": "Paulo Vitor Cruz",
      "profile": "https://hashnode.com/@paulovitorcs",
      "image": {
        "tag": "IMG",
        "src": "https://cdn.hashnode.com/res/hashnode/image/upload/v1627584398465/UPvyr0vKeP.jpeg?w=200&h=200&fit=crop&crop=faces&auto=compress,format&format=webp",
        "alt": "Paulo Vitor Cruz's photo",
        "decoding": "async",
        "dataNimg": "intrinsic",
        "style": "position:absolute;top:0;left:0;bottom:0;right:0;box-sizing:border-box;padding:0;border:none;margin:auto;display:block;width:0;height:0;min-width:100%;max-width:100%;min-height:100%;max-height:100%"
      }
    },
    "data": {
      "hour": "22:23",
      "data": "Sep 9, 2022"
    },
    "contentText": [
      "Essa é uma dúvida que sempre surge: como organizo meu projeto frontend? Hoje vou compartilhar como eu faço essa organização, e como pode te ajudar.",
      "Costumo utilizar essa mesma estrutura para todo projeto frontend que eu desenvolvo, independente do framework: pode ser React, pode ser Flutter, pode ser Vue, nada disso importa, pois tudo parte do mesmo princípio básico, seguindo as boas práticas de programação: cada função é independente, com sua própria responsabilidade e o mais simples possível.",
      "Cada coisa em seu lugar",
      "Existem alguns modelos que costumam trabalhar com “módulos”, trazendo todos os componentes e funcionalidades para dentro de um cenário bem específico. Por mais que uma organização como essa até faça sentido, gosto de separar bem cada coisa.",
      "Componentes são organizados como componentes, repositórios são organizados como repositórios, services são organizados como services, estilos são organizados como estilos.",
      "Dessa forma consigo trazer uma grande independência a cada etapa do desenvolvimento, melhorando bastante o compartilhamento dessas funções, afinal, se não existe um módulo que é dono desse componente, então o componente é de todo mundo.",
      "É um conceito que vem adaptado do Atomic Design, que já conversamos por aqui. Não só componentes, mas cada função cresce em responsabilidade conforme o que e onde é utilizado, focando ao máximo  no compartilhamento de código.",
      "Não precisa complicar demais",
      "Levo isso para qualquer código que eu faço: todo código deve ser o mais simples possível. É claro que cuidados ainda são tomados e as boas práticas de programação continuam sendo seguidas como devem ser, mas não há necessidade de complicar demais, abstrair funções em excesso ou ter mais camadas que o necessário.",
      "Justamente por cada função ter a sua independência e própria responsabilidade já consigo simplificar o processo bastante, e continuo aplicando isso em todas as etapas, com um código bastante objetivo até.",
      "A Estrutura",
      ".",
      "├── components/",
      "│   └── button/",
      "│       ├── button.jsx",
      "│       └── index.js",
      "├── styles/",
      "│   ├── colors.js",
      "│   ├── fonts.js",
      "│   └── index.js",
      "├── usecases/",
      "│   └── products.js",
      "├── services/",
      "│   └── products.jsx",
      "├── repositories/",
      "│   └── product.jsx",
      "├── plugins/",
      "│   ├── axios.js",
      "│   └── sentry.js",
      "├── utils/",
      "│   ├── cpf.js",
      "│   ├── validators.js",
      "│   └── date.js",
      "├── configs/",
      "│   └── index.js",
      "└── pages/",
      "    ├── index.jsx",
      "    └── products.jsx",
      "Organizo os componentes todos dentro de uma única pasta components e eles são os responsáveis por montar toda a estrutura da página. Os componentes trazem muita informação de estilos, também organizados em uma única pasta styles, assim consigo ter um estilo “global”, e quando alterado todos recebem a mesma atualização. Os componentes são todos agrupados, em uma etapa final, como uma página, e por isso, um diretório pages para organizar todas as páginas da aplicação.",
      "Ainda nos componentes, estes não trazem função alguma, exceto se seja referente ao próprio componente —por exemplo, uma alteração de estado singular a este componente, mas todas as “integrações” com outras funcionalidades da aplicação vem de um “use case”.",
      "Crio esses use cases justamente para realizar as integrações de acordo com seu próprio contexto. Por exemplo, em um e-commerce, um use case de produtos que traz todas as funções e informações referentes aos produtos: listagem, filtro, etc. A função de um use case, é apenas “agrupar” as funcionalidades que vem dos services, repositories ou plugins da aplicação. Em React, costumo até criar como um “hook”, assim tenho acesso a todas funcionalidades do React e o código fica bem mais limpo.",
      "Dito isso, um use case é o responsável por se comunicar com os services, que trazem de fato as funções da aplicação: a aplicação de um filtro, o gerenciamento de um local storage, a comunicação com um store e a interação com os repositories. Algo bem comum é uma função no service interagir com um repository, responsável por fazer as chamadas as APIs, e essa mesma função armazenar a resposta em uma store para posteriormente ser utilizada em um use case. Um service também interage com os plugins, funções e pacotes externas a nossa aplicação. Os plug-ins contém todas as funções que usam estes pacotes, construídos de forma que estes pacotes e funções possam ser abstraidas e utilizadas segundo o nosso contexto — abrindo espaço também para facilitar futuras mudanças e atualizações, algo que vem lá do",
      "É sempre bom também ter uma pasta utils para funções de utilidades, bem genéricas como uma validação de CPF, formatação de datas, etc. Da mesma forma, crio uma pasta para as configurações do nosso projeto como a URL base da api.",
      "Esteja aberto a adaptações",
      "Aqui não digo que o seu código esteja preparado para uma adaptação, mas você mesmo desenvolvedor estar preparado para adaptar essa estrutura de acordo com a sua realidade.",
      "A depender da sua experiência, equipe e até linguagem de programação ou framework utilizado, essa estrutura pode crescer em alguma funcionalidade, ou limitada a algum recurso. Esteja preparado para isso, e lembre-se que nada em programação é uma lei e tudo pode mudar.",
      "Para os projetos de frontend que iremos desenvolver na DevGo utilizaremos uma estrutura como essa. Participe de nosso canal no Discord, se inscreva na nossa newsletter e fique atento aos nossos próximos conteúdos."
    ]
  },
  {
    "mainImage": {
      "tag": "IMG",
      "src": "https://cdn.hashnode.com/res/hashnode/image/upload/v1662032994886/6FHZpyu83.png?w=1600&h=840&fit=crop&crop=entropy&auto=compress,format&format=webp",
      "alt": "O que são testes automatizados",
      "decoding": "async",
      "dataNimg": "responsive",
      "style": "position:absolute;top:0;left:0;bottom:0;right:0;box-sizing:border-box;padding:0;border:none;margin:auto;display:block;width:0;height:0;min-width:100%;max-width:100%;min-height:100%;max-height:100%;background-size:cover;background-position:0% 0%;filter:blur(20px);background-image:url(\"https://cdn.hashnode.com/res/hashnode/image/upload/v1662032994886/6FHZpyu83.png?w=400&h=210&fit=crop&crop=entropy&auto=compress,format&format=webp&fm=blurhash\")"
    },
    "title": {
      "tag": "H1",
      "text": "O que são testes automatizados"
    },
    "authorInfo": {
      "name": "Paulo Vitor Cruz",
      "profile": "https://hashnode.com/@paulovitorcs",
      "image": {
        "tag": "IMG",
        "src": "https://cdn.hashnode.com/res/hashnode/image/upload/v1627584398465/UPvyr0vKeP.jpeg?w=200&h=200&fit=crop&crop=faces&auto=compress,format&format=webp",
        "alt": "Paulo Vitor Cruz's photo",
        "decoding": "async",
        "dataNimg": "intrinsic",
        "style": "position:absolute;top:0;left:0;bottom:0;right:0;box-sizing:border-box;padding:0;border:none;margin:auto;display:block;width:0;height:0;min-width:100%;max-width:100%;min-height:100%;max-height:100%"
      }
    },
    "data": {
      "hour": "12:00",
      "data": "Sep 2, 2022"
    },
    "contentText": [
      "Quer saber como melhorar a qualidade de seus projetos e trazer mais segurança e agilidade para os seus testes? A solução são os testes automatizados!",
      "O que são testes automatizados",
      "Um teste automatizado nada mais é do que um “teste comum”, que você mesmo poderia fazer em seu projeto, mas que utilizando de programação conseguimos automatizar todo o processo, ganhando em eficiência, segurança e agilidade.",
      "Pense da seguinte forma:",
      "",
      "Se você precisa testar uma função X, que faz uma soma a + b, e você sabe que 1 + 2 é igual a 3, crie uma função Y, que chame a função Y passando como parâmetros a = 1 e b = 2 e compare se o resultado é realmente 3.",
      "Se você precisa testar um botão, que ao clicar apareça um modal, crie uma função que entre na página, clique no botão e confira se um novo elemento modal está sendo exibido da página",
      "Se você precisa conferir o desempenho de seu sistema, e uma página não pode demorar mais de 5 segundos para exibir o conteúdo, crie uma função que acesse essa página e faça uma contagem do tempo que levou",
      "",
      "Perceba que estes testes, podem sido feitos facilmente por um “humano”, em um processo bastante natural. A ideia por trás de um teste automatizado é incluir um software que faça este trabalho para você.",
      "Porque fazer testes automatizados",
      "A automação de testes vem para poupar trabalho e economizar tempo.",
      "Em um sistema real, estes mesmos testes devem ser feitos várias e várias vezes, a cada vez que um novo recurso é implementado, a cada vez que a versão é atualizada e em diversas outras situações. Ter um “humano” fazendo estes testes é bastante cansativo e uma tarefa bem monótoma, além de levar bastante tempo.",
      "Mas se você tem um computador por trás destes testes, eles serão feitos em uma velocidade muito maior e com um esforço muito menor, não importando quantas vezes este teste será realizado. Ter um processo automatizado também garante uma segurança e uma menor chance de erros em seu projeto.",
      "Como é um teste automatizado",
      "Existem diferentes ferramentas que você pode utilizar em seu teste a depender do teste que será feito e da linguagem de programação que será usada. ",
      "Bibliotecas bastante comuns para desenvolvimento de testes automatizados são o Selenium ou o  Playwrigt, focadas em testes “end-to-end” —quando você testa de ponta a ponta a sua aplicação, inclusive elementos no frontend com cliques, exibição de componentes, etc. Outra bastante comum, essa para testes unitários —quando você testa apenas o próprio código de uma função, é o Jest.",
      "Com o Jest, ou em qualquer outro teste unitário, a ideia é sempre criar um contexto de teste, que simula um caso que você já conhece o resultado que deve ser retornado. Podemos apresentar nosso cenário de teste: “Sendo utilizada a função de soma, quando os parametros forem 1 e 2 , é esperado que o valor seja igual a 3”. E este mesmo contexto, é aplicado em código:",
      "// Definição da função de soma",
      "const sum = (a, b) =&gt; {",
      "    return a + b;",
      "};",
      "",
      "// Contexto para testes unitários",
      "describe('Sendo utilizada a função de soma', () =&gt; {",
      "    test('quando os parametros forem 1 e 2', () =&gt; {",
      "        expect(sum(1, 2)).toBe(3);",
      "    });",
      "});",
      "",
      "Com o seguinte resultado:",
      "PASS  ./index.test.js",
      "  Sendo utilizada a função de soma",
      "    ✓ quando os parametros forem 1 e 2 (2 ms)",
      "",
      "Diferentes cenários de testes são criados testando cada situação possível de uso para cada função do seu código. Assim, com um único comando como npm run test você tem toda a sua aplicação testada.",
      "Testes unitários como este podem ser incluídos diretamente no código da sua aplicação, e na maioria dos frameworks, este já é um recurso nativo.",
      "Testes automatizados na prática",
      "Na prática, costumamos incluir estes testes como rotinas dentro do fluxo do nosso novo software: uma mudança no código? Rode a rotina de testes e confira que nenhum pedaço de código foi quebrado no caminho; uma nova demanda? Rode a rotina de testes e confira que a performance não foi afetada. ",
      "Existem até metodologias, como o Test Driven Development, a qual é “construir o teste, antes de desenvolver”. Você desenvolve com base no próprio teste a ser realizado. É uma prática bem interessante, que iremos abordar em artigos futuros.",
      "Mas não se engane se você acha que testes automatizados excluem o trabalho de testers e analistas de QA: um bom teste, mesmo que automatizado, é muito mais do que algo técnico, um bom teste é sempre aquele feito por alguém que entende o processo, prevê falhas e sabe o que e onde testar.",
      "Em nossos projetos na devGo, vamos tentar sempre trabalhar com testes automatizados. Confiram nosso canal no Discord e se inscrevam em nossa newsletter para acompanhar nossos próximos conteúdos."
    ]
  },
  {
    "mainImage": {
      "tag": "IMG",
      "src": "https://cdn.hashnode.com/res/hashnode/image/upload/v1661518799595/zZG1cfwdH.png?w=1600&h=840&fit=crop&crop=entropy&auto=compress,format&format=webp",
      "alt": "Como fazemos o Gitflow",
      "decoding": "async",
      "dataNimg": "responsive",
      "style": "position: absolute; inset: 0px; box-sizing: border-box; padding: 0px; border: none; margin: auto; display: block; width: 0px; height: 0px; min-width: 100%; max-width: 100%; min-height: 100%; max-height: 100%;"
    },
    "title": {
      "tag": "H1",
      "text": "Como fazemos o Gitflow"
    },
    "authorInfo": {
      "name": "Paulo Vitor Cruz",
      "profile": "https://hashnode.com/@paulovitorcs",
      "image": {
        "tag": "IMG",
        "src": "https://cdn.hashnode.com/res/hashnode/image/upload/v1627584398465/UPvyr0vKeP.jpeg?w=200&h=200&fit=crop&crop=faces&auto=compress,format&format=webp",
        "alt": "Paulo Vitor Cruz's photo",
        "decoding": "async",
        "dataNimg": "intrinsic",
        "style": "position:absolute;top:0;left:0;bottom:0;right:0;box-sizing:border-box;padding:0;border:none;margin:auto;display:block;width:0;height:0;min-width:100%;max-width:100%;min-height:100%;max-height:100%"
      }
    },
    "data": {
      "hour": "14:01",
      "data": "Aug 26, 2022"
    },
    "contentText": [
      "Já falamos por aqui sobre como trabalhar com Git, mas ter um bom fluxo de branchs e features no seu Git, que garanta uma entrega ágil e segura para a sua equipe, pode ser um pouco mais complicado do que parece. No artigo de hoje, vamos contar como gerenciamos o Git por aqui na Devnology.",
      "Dificuldades de um bom fluxo no Git",
      "Algo bem popular no gerenciamento de projetos no Git é ter as conhecidas branchs develop para um ambiente de desenvolvimento,homolog para um ambiente de testes e finalmente main para o ambiente de produção do nosso projeto. Um modelo bastante comum de Git Flow é a cada nova demanda uma branch feature é criada, e finalizado é feito um merge para a branch de desenvolvimento. Terminada o processo de desenvolvimento, com a branch develop  é feito um merge para a branch homolog para os testes. Concluído os testes, a branch main é atualizada com a branch homolog. Assim vemos um fluxo muito claro de feature → develop → homolog → main. ",
      "Este processo faz bastante sentido em um momento inicial quando o seu projeto ainda está em desenvolvimento e não foi lançado em produção, mas a partir do momento em que o projeto está no ar, pessoas estão utilizando e novas melhorias continuam sendo feitas, este fluxo pode dificultar bastante a sua entrega.",
      "Vamos imaginar um momento em que seu projeto está no ar, e há 3 novas melhorias sendo desenvolvidas. As 3 novas melhorias, nas branchs feature1, feature2 e feature3  passaram pelo develop e foram para a branch homolog para que o processo de teste se inicie. Durante os testes a melhoria 1 e a melhoria 3 foram aprovadas, mas a melhoria 2 precisou de ser feito um ajuste e a branch feature2 voltou para o início do processo. Agora, você tem a feature1 e feature3 aprovadas em homolog prontas para subir em produção, mas seguindo este fluxo comum, em que você não pode fazer uma atualização homolog → main porque a branch homolog está “suja”, pois também contem a feature2 que ainda não foi aprovada. Você deverá parar todo seu processo de entrega, e esperar que seja retestado e aprovada para fazer um novo release em produção.",
      "https://cdn.hashnode.com/res/hashnode/image/upload/v1661518640359/SCsFspID0.png?auto=compress,format&amp;format=webp",
      "Se você quer agilidade na sua entrega esse modelo não é suficiente. Pense que se a melhoria 1 e a melhoria 3 estão prontas, você já deveria poder atualizá-las em produção. Já pensou se esse ajuste que será feito na melhoria 2 é mais complexo do que parece, e demore mais de 1 mês?",
      "Um modelo de estratégia para agilidade na entrega",
      "Para melhorar a nossa entrega, focamos em um modelo de “independência” entre as branchs. Nessa nova estratégia, quebramos as relações entre os de ambiente de desenvolvimento develop, homolog e main. Essas branchs não entram mais uma em contato com a outra, e o fluxo develop → homolog → main não existe mais. Cada branch de melhoria sobe independente uma da outra, em um fluxo como: feature→ develop , depois feature → homolog e por fim feature → main.",
      "https://cdn.hashnode.com/res/hashnode/image/upload/v1661518650618/oRgbrNzxy.png?auto=compress,format&amp;format=webp",
      "Voltando ao nosso exemplo de 3 melhorias sendo desenvolvidas paralelamente, em que as 3 melhorias estão em teste no ambiente homolog, mas apenas as melhorias 1 e 3 foram aprovadas: podemos fazer feature1 → main e feature3→ main imediatamente, sem aguardar para que a feature2 seja ajustada.",
      "Possíveis problemas e como contornar",
      "Nossa grande preocupação neste fluxo é manter a branch “limpa”, ou seja, a branch feature conter apenas a melhoria onde ela se refere.",
      "Com tudo ocorrendo bem, isso acontece naturalmente: não misturamos as branchs feature e elas sobem uma de cada vez para cada ambiente. Mas ainda pode ocorrer um conflito —quando as mesmas branchs mexem no mesmo arquivo. ",
      "Em exemplo: foi feito um merge para a branch feature1 em homolog. Algum tempo depois, foi também feito um merge para a branch feature2 em homolog. Neste momento foi entregue um alerta de conflito. Para resolver um conflito, basta que a feature2 fosse atualizada com a branch homolog e o conflito resolvido internamente, mas perceba que se fizer isso a branch feature2 irá também conter a branch feature1, pois ela estava em homolog naquele momento. Isso faz com que sua branch feature2 fique suja e pode ser um grande problema. Caso ocorra uma situação como em nossos exemplos, de que a feature2 seja aprovada, mas a feature1 ainda precise de ajustes, você não poderia mais subir a feature2 em produção, pois ela irá acabar levando em conjunto a feature1. ",
      "Este não é um problema impossível de ser resolvido. Basta duplicar, criando uma branch secundária, com base na feature2 apenas para a resolução de conflito, algo como feature2-homolog. Use essa nova branch para resolver o conflito, e realize o merge de feature2-homolog para homolog. Com isso, a feature2 continua limpa e pode ser realizado um merge para a main sem mais preocupações —perceba até que feature2-homolog foi usada em apenas um único momento.",
      "E se a melhoria 2 precisar de um ajuste? Resolva o ajuste naturalmente na branch feature2. Continue com o fluxo normalmente, envie-a para develop e ao chegar em homolog, onde ocorreu um conflito anteriormente, atualize a sua branch feature2-homolog com o ajuste, e continue usando essa branch para resolução de conflito.",
      "https://cdn.hashnode.com/res/hashnode/image/upload/v1661518688192/KzaIqxri2.png?auto=compress,format&amp;format=webp",
      "Perceba que nosso grande problema são em casos de conflitos. Uma boa dica é criar uma rotina de atualização das branchs develop e homolog. Essas branchs devem sempre ser independentes, mas não é bom que elas se percam no fluxo e acabem sempre por indicar conflitos. Confira estes ambientes de tempo em tempo e os deixem sempre atualizados com a main. ",
      "Como se adaptar a este fluxo",
      "Na prática, este fluxo “ágil” funciona bastante bem e podemos ver resultados rapidamente após sua implementação. Para uma boa implementação deste fluxo é preciso uma mudança na mentalidade e comprometimento da equipe. Tudo deve ser feito com bastante cuidado para evitar problemas, mas a partir do momento que as ideias se encaixam tudo passa a fluir naturalmente.",
      "Lembre-se sempre de criar suas branchs com base na main e siga o fluxo com bastante calma, uma vez para develop, outra para homolog e finalmente para a main. Jamais resolva conflitos diretamente na branch feature e tudo ocorrerá bem.",
      "Devo dizer também que nenhum fluxo ou metodologia é uma “lei”. Para uma real boa adaptação é importante que pensar na sua equipe, no projeto e principalmente na experiência em que foi construída ao redor destes dois pontos. Traga os métodos e conhecimentos que você tem estudado para a sua própria realidade.",
      "Nos próximos projetos da devGo tentaremos levar este fluxo a prática durante a etapa de desenvolvimento. Acompanhe nosso canal no Discord, inscreva-se em nossa newsletter e acompanhe os nossos conteúdos de perto."
    ]
  },
  {
    "mainImage": {
      "tag": "IMG",
      "src": "https://cdn.hashnode.com/res/hashnode/image/upload/v1660907999642/gPDWueV3g.png?w=1600&h=840&fit=crop&crop=entropy&auto=compress,format&format=webp",
      "alt": "O que é Atomic Design",
      "decoding": "async",
      "dataNimg": "responsive",
      "style": "position:absolute;top:0;left:0;bottom:0;right:0;box-sizing:border-box;padding:0;border:none;margin:auto;display:block;width:0;height:0;min-width:100%;max-width:100%;min-height:100%;max-height:100%;background-size:cover;background-position:0% 0%;filter:blur(20px);background-image:url(\"https://cdn.hashnode.com/res/hashnode/image/upload/v1660907999642/gPDWueV3g.png?w=400&h=210&fit=crop&crop=entropy&auto=compress,format&format=webp&fm=blurhash\")"
    },
    "title": {
      "tag": "H1",
      "text": "O que é Atomic Design"
    },
    "authorInfo": {
      "name": "Paulo Vitor Cruz",
      "profile": "https://hashnode.com/@paulovitorcs",
      "image": {
        "tag": "IMG",
        "src": "https://cdn.hashnode.com/res/hashnode/image/upload/v1627584398465/UPvyr0vKeP.jpeg?w=200&h=200&fit=crop&crop=faces&auto=compress,format&format=webp",
        "alt": "Paulo Vitor Cruz's photo",
        "decoding": "async",
        "dataNimg": "intrinsic",
        "style": "position:absolute;top:0;left:0;bottom:0;right:0;box-sizing:border-box;padding:0;border:none;margin:auto;display:block;width:0;height:0;min-width:100%;max-width:100%;min-height:100%;max-height:100%"
      }
    },
    "data": {
      "hour": "14:00",
      "data": "Aug 19, 2022"
    },
    "contentText": [
      "Uma boa técnica para melhorar a sua estrutura de código e entrega de um projeto frontend é aplicar a metodologia de Atomic Design. Neste texto, vamos explorar um pouco mais esse conceito.",
      "O que é",
      "Atomic design é uma metodologia de desenvolvimento focada no desenvolvimento de componentes para construção de uma página. Esse conceito se amplia a um ponto em que o foco não é mais desenvolver páginas, e sim criar um “design system”.",
      "A base dessa metodologia é uma hierarquia de componentes, onde eles são completamente abstraídos de uma página e crescem em relação a seu tamanho e responsabilidade em novos componentes, que podem ser reutilizados em diversas pontas da aplicação.",
      "O desenvolvimento com Atomic Design começa sempre por baixo, do menor nível de componentes, como, por exemplo, um botão. Esse botão, pode se juntar com outros componentes de um nível menor, como um Input, e se tornar um formulário. Um formulário, pode ganhar um pouco mais de responsabilidade para ser um formulário de cadastro de usuário. O formulário de cadastro pode ser utilizado em conjunto com outros elementos e por fim, se tornar uma página.",
      "Atomos, Moleculas, Organismos, Templates e Páginas",
      "A hierarquia do Atomic Design faz um ótimo paralelo com uma estrutura química, e é daí que vem o nome dessa metodologia. Os componentes costumam ser interpretados como átomos, moléculas, organismos, templates e páginas.",
      "https://cdn.hashnode.com/res/hashnode/image/upload/v1660907805908/BYZzUSwTW.png?auto=compress,format&amp;format=webp",
      "O exemplo que dei se encaixa muito bem nessa hierarquia:",
      "",
      "O botão e os inputs são um átomo",
      "O formulário é uma molécula",
      "O formulário de cadastro é um organismo",
      "A combinação do formulário de cadastros com outros elementos é um template",
      "A utilização desse template dentro de um contexto de uma aplicação é a página",
      "",
      "Melhorando o desenvolvimento de código",
      "Em estrutura como essa é importante mudar o seu pensamento de desenvolvimento: ao desenvolver um atómo, como um botão, não importa o que esse botão faça. Ele é apenas um botão. Ao evoluir para uma molécula, como um formulário, este é um formulário qualquer, sem qualquer função atribuída. E então, quanto mais o componente é evoluído, como em um organismo, podemos atribuir uma função para esse formulário, sendo ele um formulário de cadastro. O mesmo processo se repete na construção de um template: organismos são combinados, mas o próposito ainda não é completamente claro, isso só acontece quando é desenvolvida a página.",
      "Um botão, por exemplo, deve ser um botão qualquer, mas preparado com opções para todos os casos de usabilidade: um botão com texto, um botão com texto e ícone, um botão com loading, um botão desabilitado, etc.",
      "Mudança no formato de entrega",
      "O atomic design muda bastante a entrega da aplicação. Aqui o foco não é mais a construção das páginas, e sim dos componentes. Na prática, todos os átomos são desenvolvidos, depois as moléculas, os organismos, os templates e por fim as páginas.",
      "Pode parecer um pouco contraintuitivo, e em alguns momentos aparenta não ter evolução nenhuma na aplicação. Mas a partir do momento em que você precisa apenas juntar componentes e atribuir responsabilidades a eles, a entrega flui, e no fim, a aplicação é desenvolvida com muito mais agilidade.",
      "Porque usar Atomic Design?",
      "A grande diferença do Atomic Design é desenvolver um “design system”. Dessa forma, o grande foco em reutilização de código vai trazer diversos benefícios para a sua aplicação.",
      "Ainda no exemplo, se tem um formulário sem qualquer função, mas pronto para evoluir para um organismo, ele pode muito bem ser utilizado em diferentes cenários: um formulário de cadastro, um formulário de login ou até um formulário de envio de e-mails. Perceba que nesse formato, quanto maior o nível do componente, mais fácil vai ser desenvolvê-lo, não?",
      "Se o seu código é reutilizado em várias pontas, isso facilita bastante a manuntenção. Vamos imaginar que em algum momento, o estilo do botão mude: você não precisa alterar todos os botões, em todas as páginas, basta alterar o componente átomo do botão e todo o projeto irá ter a mesma alteração.",
      "Reparando bem, essa metodologia segue bem os conceitos de código limpo e boas práticas de programação, com componentes (funções) pequenas que fazem somente o necessário. O Atomic Design naturalmente irá deixar o seu código mais legível.",
      "Atomic Design é uma metodologia criada pelo Brad Frost, e você pode ler seu livro completo neste link.",
      "Nos projetos da devGo, tentaremos levar esse conceito a prática em todo o desenvolvimento do frontend. Acompanhe nosso canal no Discord, inscreva-se em nossa newsletter e acompanhe os nossos conteúdos de perto."
    ]
  },
  {
    "mainImage": {
      "tag": "IMG",
      "src": "https://cdn.hashnode.com/res/hashnode/image/upload/v1660304319662/BXqvJPd9a.png?w=1600&h=840&fit=crop&crop=entropy&auto=compress,format&format=webp",
      "alt": "Código limpo e boas práticas de programação",
      "decoding": "async",
      "dataNimg": "responsive",
      "style": "position:absolute;top:0;left:0;bottom:0;right:0;box-sizing:border-box;padding:0;border:none;margin:auto;display:block;width:0;height:0;min-width:100%;max-width:100%;min-height:100%;max-height:100%;background-size:cover;background-position:0% 0%;filter:blur(20px);background-image:url(\"https://cdn.hashnode.com/res/hashnode/image/upload/v1660304319662/BXqvJPd9a.png?w=400&h=210&fit=crop&crop=entropy&auto=compress,format&format=webp&fm=blurhash\")"
    },
    "title": {
      "tag": "H1",
      "text": "Código limpo e boas práticas de programação"
    },
    "authorInfo": {
      "name": "Paulo Vitor Cruz",
      "profile": "https://hashnode.com/@paulovitorcs",
      "image": {
        "tag": "IMG",
        "src": "https://cdn.hashnode.com/res/hashnode/image/upload/v1627584398465/UPvyr0vKeP.jpeg?w=200&h=200&fit=crop&crop=faces&auto=compress,format&format=webp",
        "alt": "Paulo Vitor Cruz's photo",
        "decoding": "async",
        "dataNimg": "intrinsic",
        "style": "position:absolute;top:0;left:0;bottom:0;right:0;box-sizing:border-box;padding:0;border:none;margin:auto;display:block;width:0;height:0;min-width:100%;max-width:100%;min-height:100%;max-height:100%"
      }
    },
    "data": {
      "hour": "14:01",
      "data": "Aug 12, 2022"
    },
    "contentText": [
      "Escrever código não é tão simples quanto parece. Não basta saber a linguagem e desenvolver uma aplicação extremamente complexa, o seu código deve ser legível! Hoje vamos discutir algumas técnicas e boas práticas de programação para manter o seu código limpo.",
      "Porque código limpo",
      "Pense sempre que você não irá trabalhar sozinho em um sistema, e mesmo que trabalhe, algum dia esse sistema precisará de manutenção, seja sua, ou de algum colega. Já pensou trabalhar em um código que você não faz a mínima ma ideia do que está escrito? É uma experiência que não recomendo a ninguém.",
      "O objetivo de ter um código limpo é ter um código legível. De que qualquer pessoa, ou até você mesmo daqui a alguns meses, ou anos no futuro consiga voltar ao código, entender todas as funções e processos realizados.",
      "Boas práticas",
      "Durante o desenvolvimento aplicamos alguns conceitos que apesar de básicos, ajudam consideravelmente a manter o seu código limpo:",
      "Nomes intuitivos",
      "Os nomes de variáveis e funções devem ser extremamente intuitivas. Não se preocupe se o nome ficar “grande demais”, isso não é um problema. O importante aqui é que você entenda o que é essa variável, ou a função, por exemplo:",
      "const n = 'Paulo';",
      "const npn = () =&gt; {};",
      "",
      "O que é variável n? O que é a função npn? Hoje você pode até entender o que significam esses termos, mas o seu colega entende? Daqui a alguns meses, depois de vários outros códigos, você irá entender? Estes são péssimos exemplos de como pode ser o seu código.",
      "O ideal é que você use algo extremamente claro, como:",
      "const name = 'Paulo';",
      "const getNumberOfPostsByName = () =&gt; {};",
      "",
      "Funções e classes são pequenas, e fazem somente o necessário",
      "Da mesma forma que o nome de uma função é importante e deva dizer exatamente o que ela faz, é importante que essa função tenha um objetivo bastante específico e apenas um único objetivo.",
      "Uma função que faz 3 coisas ao mesmo tempo, pode ser bastante confuso para um bom entendimento de código. Veja o exemplo:",
      "const addNewPost = (title, content) =&gt; {",
      "    const fixedContent = content.replace(/(&lt;([^&gt;]+)&gt;)/ig, \"\");",
      "",
      "    const post = postRepository.add(title, fixedContent);",
      "",
      "    const subscribed = newsletterRepository.getAll();",
      "",
      "    subscribed.forEach((client) =&gt; {",
      "        mailService.sendNotification(client.mail, \"Novo post na devGo\", post);",
      "    });",
      "}",
      "",
      "Uma função deve ser o mais simples possível e ter apenas uma única funcionalidade. Não se importe com o número de funções, quanto maior, melhor. Isso fará até que suas funções sejam bem menores, facilitando também a compreensão do sistema.",
      "Pequenas funções, claras e objetivas, eliminam até mesmo a necessidade de comentários no código —outra prática que é bom ser evitada.",
      "Veja a diferença:",
      "",
      "const parseContent = () =&gt; {",
      "    const parsedContent = content.replace(/(&lt;([^&gt;]+)&gt;)/ig, \"\");",
      "    return parsedContent;",
      "}",
      "",
      "const sendPostToNewsletter = (post) =&gt; {",
      "    const mailTitle = \"Novo post na devGo\";",
      "    const subscribed = newsletterRepository.getAll();",
      "",
      "    subscribed.forEach((client) =&gt; {",
      "        mailService.sendNotification(client.mail, mailTitle, post);",
      "    });",
      "}",
      "",
      "const handleNewPost = (title, content) =&gt; {",
      "    const parsedContent = parseContent(content);",
      "    const post = postRepository.add(title, parsedContent);",
      "",
      "    sendPostToNewsletter(post);",
      "}",
      "",
      "Formate o seu código",
      "Um código bem formatado traz uma organização visual ao seu código imensa!",
      "Existem algumas ferramentas que podem te ajudar a formatar, como o ESLint ou Prettier. Com elas você pode deixar todos os parâmetros bem configurados e com o auxílio de algumas extensões do VSCode essa organização pode acontecer automaticamente.",
      "Commits também fazem parte do desenvolvimento",
      "Se ainda assim o código estiver difícil de entender, vamos recorrer aos commits. Um commit deve dizer exatamente o que ocorreu naquele momento do desenvolvimento.",
      "Commits genéricos, são uma péssima prática. Não faça nada como:",
      "git commit -m \"update code\"",
      "",
      "Tenha em mente que commits não só uma “atualização”, commits são também documentação do desenvolvimento. Uma boa prática é a cada funcionalidade acrescentada no código ter um novo commit. A ideia são sempre vários commits pequenos, documentando cada ponto acrescentado, como:",
      "git commit -m \"feat: add function to post on page\"",
      "git commit -m \"feat: add trigger to new post on newsletter\"",
      "",
      "KISS, DRY e YAGNI",
      "Os métodos trazidos aqui podem evoluir para outros princípios de design de código, como o KISS, DRY e YAGNI. Estes princípios foram pensados em como deixar o seu código organizado, estável e legível e é extremamente recomendado que você passe a utilizar em seus projetos.",
      "",
      "DRY - Don’t Repeat Yourself: O seu código não se repete. Divida seu sistema em funções genericas que você possa repetir em diversas pontas do sistema.",
      "KISS - Keep it Simple, Stupid: O seu código deve ser o mais simples possível. Não precisa exagerar nas funções e criar coisas mirabolantes, na maioria das vezes a solução menos complexa funciona e é suficiente para você",
      "YAGNI - You ain’t gonna need it: só faça algo se for realmente utilizar. Funções abandonadas, comentários desnecessários, variáveis exageradas, não precisam estar no seu código.",
      "",
      "Faço ainda uma menção ao SOLID: 5 princípios bem relevantes de implementação ao seu código. SOLID acaba sendo tão importante que vamos preparar um único artigo para podermos explorar melhor todos os métodos.",
      "Levaremos esses conceitos por todas as postagens, projetos e conteúdos produzidos aqui na devGo. A ideia por trás de todas essas práticas são ter um código limpo. É claro que para cada caso, a um método diferente, e nem tudo deve ser tratado como uma “lei”: programar é se adaptar. Apenas tenha como objetivo um código fácil de ser compreendido, compartilhado e modificado."
    ]
  },
  {
    "mainImage": {
      "tag": "IMG",
      "src": "https://cdn.hashnode.com/res/hashnode/image/upload/v1659707340589/g95LrfZOi.png?w=1600&h=840&fit=crop&crop=entropy&auto=compress,format&format=webp",
      "alt": "O que são frameworks",
      "decoding": "async",
      "dataNimg": "responsive",
      "style": "position:absolute;top:0;left:0;bottom:0;right:0;box-sizing:border-box;padding:0;border:none;margin:auto;display:block;width:0;height:0;min-width:100%;max-width:100%;min-height:100%;max-height:100%;background-size:cover;background-position:0% 0%;filter:blur(20px);background-image:url(\"https://cdn.hashnode.com/res/hashnode/image/upload/v1659707340589/g95LrfZOi.png?w=400&h=210&fit=crop&crop=entropy&auto=compress,format&format=webp&fm=blurhash\")"
    },
    "title": {
      "tag": "H1",
      "text": "O que são frameworks"
    },
    "authorInfo": {
      "name": "Paulo Vitor Cruz",
      "profile": "https://hashnode.com/@paulovitorcs",
      "image": {
        "tag": "IMG",
        "src": "https://cdn.hashnode.com/res/hashnode/image/upload/v1627584398465/UPvyr0vKeP.jpeg?w=200&h=200&fit=crop&crop=faces&auto=compress,format&format=webp",
        "alt": "Paulo Vitor Cruz's photo",
        "decoding": "async",
        "dataNimg": "intrinsic",
        "style": "position:absolute;top:0;left:0;bottom:0;right:0;box-sizing:border-box;padding:0;border:none;margin:auto;display:block;width:0;height:0;min-width:100%;max-width:100%;min-height:100%;max-height:100%"
      }
    },
    "data": {
      "hour": "13:50",
      "data": "Aug 5, 2022"
    },
    "contentText": [
      "Quanto mais você avança na programação, mais complexa suas tarefas, demandas e o próprio sistema que você desenvolve fica. Mas nem tudo precisa ser tão díficil, os frameworks estão aí para te ajudar!",
      "O que é",
      "Um framework é um conjunto de código, bibliotecas e funções prontas, que acabam se tornando um próprio “ambiente” de desenvolvimento.",
      "Quanto mais complexa a sua aplicação mais “complicado” fica o seu código, mas com um framework isso mal faz diferença: ele é criado justamente pensando em simplificar essas situações. Frameworks costumam utilizar de uma linguagem de programação, e usar ao máximo desta linguagem para criar ferramentas e funções que facilitem o desenvolvimento do seu código.",
      "Utilizar um framework pode até ser bem diferente do que você estudou na linguagem de programação. As regras diferem, os métodos, as funções e principalmente os conceitos.",
      "Um exemplo, bem simples, é a alteração de um dado na tela em tempo real. Vamos supor que você tenha criado com HTML um “contador”. Você clica em um botão, e então é feito uma contagem de cliques. Não que isso seja complicado de ser feito:",
      "&lt;html&gt;",
      "  &lt;head&gt;",
      "    &lt;script&gt;",
      "      let count = 0;",
      "",
      "      function doCounting() {",
      "        const countElement = document.getElementById('count');",
      "        count++;",
      "",
      "        countElement.innerHTML = `${count} cliques`;",
      "      }",
      "    &lt;/script&gt;",
      "  &lt;/head&gt;",
      "  &lt;body&gt;",
      "    &lt;div&gt;",
      "      &lt;span id=\"count\"&gt;0 cliques&lt;/span&gt;",
      "      &lt;button onClick=\"doCounting()\"&gt;Click&lt;/button&gt;",
      "    &lt;/div&gt;",
      "  &lt;/body&gt;",
      "&lt;/html&gt;",
      "",
      "Mas, se você utilizar um framework de frontend, como o React, veja como fica o código:",
      "import React, { useState } from 'react';",
      "",
      "export const App = () =&gt; {",
      "  let [count, setCount] = useState(0);",
      "",
      "  const doCounting = () =&gt; {",
      "    setCount(count++);",
      "  }",
      "",
      "  return (",
      "    &lt;div&gt;",
      "      &lt;span id=\"count\"&gt;{count} cliques&lt;/span&gt;",
      "      &lt;button onClick={doCounting}&gt;Click&lt;/button&gt;",
      "    &lt;/div&gt;",
      "  );",
      "}",
      "",
      "Os dois códigos fazem a mesma coisa: exibem um texto na página com o número de cliques e um botão. A cada clique no botão, a contagem aumenta. Mas veja que os conceitos aplicados são outros:",
      "",
      "O primeiro, apenas com HTML e Javascripts puros, fazem o que já é esperado da linguagem: um texto estático, mudado manualmente em uma função que troca o texto dentro de um elemento em HTML.",
      "O segundo não é nem um HTML, é uma função em Javascript que retorna um HTML. Além disso, possui uma variável escrita diretamente dentro de uma tag HTML. Veja também que aqui não há a troca de texto: ao alteramos a variável count por meio da função setCount, o valor muda automaticamente no HTML.",
      "",
      "Uma estrutura como a do segundo exemplo não é nem possível utilizando apenas HTML e Javascript. Mas aqui, estamos utilizando um framework, e este framework quebra alguns padrões, e cria outras. Com esse framework é possível escrever um HTML dentro de uma função Javascript; é possível alterar o valor de uma variável e ela automaticamente mudar em toda a página. Isso te ajudaria bastante, não?",
      "Mas apesar das grandes mudanças, os frameworks facilitam o seu trabalho no desenvolvimento. Posso ter usado um exemplo bobo, e que não traga tanta diferença visualmente em um código. Mas lembre-se, quanto maior a complexidade, mais você precisará de alguma ferramenta que te ajude no código. Já pensou em usar apenas HTML e Javascript em um sistema enorme como um ecommerce?",
      "Os frameworks trazem até mais do que uma “simplificação” do código. A maioria deles fazem também melhorias de perfomance, segurança e padronizações que te ajudam a organizar o seu trabalho, coisas que utilizando apenas uma linguagem de programação em seu mais puro estado requer bastante estudo, bastante teste e bastante tempo preparando um sistema carregado com todas essas funcionalidades.",
      "Frameworks, na prática",
      "Hoje em dia, para ser um desenvolvedor, você precisa conhecer algum framework. Pode ter certeza, toda aplicação web, todo aplicativo mobile, toda API, todo sistema tem algum framework por trás.",
      "É bastante comum que durante seu estudo em programação, você estude, por exemplo, bastante Javascript e depois comece estudar um framework bastante específico como React para desenvolvimento frontend, ou NestJS para desenvolvimento backend.",
      "Como cada framework possui o seu próprio ecosistema e padrões diferentes, recomendo que você foque em apenas um framework para que você aprender e se especializar. Vão aqui algumas dicas:",
      "",
      "Para os desenvolvedores frontends: React, Vue ou Angular. Flutter, agora que é possível desenvolver web e mobile, tem chamado bastante atenção.",
      "Para os desenvolvedores backend, depende muito da linguagem que você está estudando: para Javascript temos NestJS, AdonisJS, Express. Para PHP, o popular Laravel. Para Python, Flask e Django.",
      "",
      "Durante seus estudos, e processo de “escolha” de framework tenha em mente que: tudo em programação acontece muito rápido. O mercado de frameworks é bastante novo e está sempre cheio de mudanças. O “jQuery” por exemplo, era uma biblioteca bastante popular a algum tempo atrás e foi completamente subjulgada pelo React. E quem garante que daqui a 2 ou 3 anos algum outro framework não irá ultrapassar o React?",
      "Estudar frameworks é extremamente importante, mas não devemos nunca nos esquecer do básico. Por trás de um framework existe uma linguagem de programação e é ela que importa. Tenha sempre a linguagem como a sua base, e não importa qual framework você trabalhe, você vai conseguir desenvolver.",
      "Este texto foi apenas uma introdução ao assunto, mas nos nossos próximos artigos, vamos explorar um pouco mais alguns frameworks, destrinchando cada recurso que é disponibilizado durante o desenvolvimento. Acompanhe nosso canal no Discord, e se inscreva em nossa newsletter para acompanhar todos os nossos conteúdos na devGo",
      "Quanto mais você avança na programação, mais complexa suas tarefas, demandas e o próprio sistema que você desenvolve fica. Mas nem tudo precisa ser tão difícil, os frameworks estão aí para te ajudar!"
    ]
  },
  {
    "mainImage": {
      "tag": "IMG",
      "src": "https://cdn.hashnode.com/res/hashnode/image/upload/v1659103709448/7ZnzwSVsW.png?w=1600&h=840&fit=crop&crop=entropy&auto=compress,format&format=webp",
      "alt": "O que é uma API",
      "decoding": "async",
      "dataNimg": "responsive",
      "style": "position:absolute;top:0;left:0;bottom:0;right:0;box-sizing:border-box;padding:0;border:none;margin:auto;display:block;width:0;height:0;min-width:100%;max-width:100%;min-height:100%;max-height:100%;background-size:cover;background-position:0% 0%;filter:blur(20px);background-image:url(\"https://cdn.hashnode.com/res/hashnode/image/upload/v1659103709448/7ZnzwSVsW.png?w=400&h=210&fit=crop&crop=entropy&auto=compress,format&format=webp&fm=blurhash\")"
    },
    "title": {
      "tag": "H1",
      "text": "O que é uma API"
    },
    "authorInfo": {
      "name": "Paulo Vitor Cruz",
      "profile": "https://hashnode.com/@paulovitorcs",
      "image": {
        "tag": "IMG",
        "src": "https://cdn.hashnode.com/res/hashnode/image/upload/v1627584398465/UPvyr0vKeP.jpeg?w=200&h=200&fit=crop&crop=faces&auto=compress,format&format=webp",
        "alt": "Paulo Vitor Cruz's photo",
        "decoding": "async",
        "dataNimg": "intrinsic",
        "style": "position:absolute;top:0;left:0;bottom:0;right:0;box-sizing:border-box;padding:0;border:none;margin:auto;display:block;width:0;height:0;min-width:100%;max-width:100%;min-height:100%;max-height:100%"
      }
    },
    "data": {
      "hour": "14:10",
      "data": "Jul 29, 2022"
    },
    "contentText": [
      "Com certeza você já ouviu falar sobre APIs. Nesse artigo, vou te explicar o que é, como usamos, e porquê é tão importante saber o que é uma API!",
      "O que é uma API",
      "Vamos começar com um exemplo bem básico, uma atividade que todo programador iniciante vai acabar fazendo em algum curso por aí: montar uma “Pokedex”. O seu trabalho, é criar uma página, que liste todos os pokemons que existem. Mas vamos com calma, já imaginou o trabalho que é montar essa lista? A não ser que você seja um verdadeiro mestre pokemon, e gastado horas e horas do seu tempo procurando todos os pokemons de cada jogo já lançado, você não vai saber de cabeça todos os pokemons que existem. Mas alguém sabe! E você poderia até pesquisar, e achar uma Pokedex, e ir copiando Pokemon por Pokemon para a sua página, mas você é um programador, e programadores sempre tem uma solução mais fácil de ser aplicada. Essa solução é o que chamamos de API.",
      "Alguém, que conhece tudo sobre Pokemon, conseguiu montar um enorme banco de dados com todas as informações possíveis. Esse mesmo alguém foi lá, e montou um código, que lista todos os Pokemons que existem. E disponibilizou essas informações por meio de uma API.",
      "A ideia por trás de uma API é justamente “abrir” o seu programa para a internet. A expressão API vem de “Application Programming Interface”, uma interface criada em seu programa para compartilhar as funções de seu código, para outro código.",
      "Então para você montar página que liste todos os pokemons, você realmente não precisa saber todos os pokemons. Você precisa de uma API, que disponibilize essa informação para você, conectar o seu código com essa API e exibir as informações.",
      "E sim, existem APIs para tudo! Você pode encontrar todo o tipo de informação por meio de uma API. Antes que você pergunte, existe a PokeApi para você montar a sua Pokedex, mas também temos essa lista com centenas de outras APIs para cada tema que você imaginar.",
      "Como funciona uma API",
      "Existem vários formatos para você externalizar as funções de seu código: SOAP, REST, até um GraphQL. O mais comum entre as APIs é o formato em REST. Uma API em REST utiliza de um padrão bastante comum na internet, o HTTP: em qualquer site que você entra, tem um HTTP por trás —perceba que todo site é como um https://devgo.com.br/. HTTP é um protocolo de rede, por onde mensagens e informações fluem de um canto a outro: um pergunta, alguém responde; o seu navegador pergunta o conteúdo de um endereço (a URL de um site) e o servidor deste site responde; você pergunta a API quais pokemons existem e a API responde. Chamamos isso de cliente/servidor, onde o cliente envia uma requisição (HTTP Request) e o servidor envia uma resposta (HTTP Response).",
      "https://cdn.hashnode.com/res/hashnode/image/upload/v1659105378267/mecGNKnUT.png?auto=compress,format&amp;format=webp",
      "Cada “pergunta”, pode ser feita de diferentes formas, seguindo uma convenção de diferentes “métodos” HTTP: se você quer buscar uma informação, o método GET; se você quer pedir que numa nova informação seja adicionada a base de dados, o método POST; se você quer editar uma informação, os métodos PUT ou PATCH; se você quer deletar uma informação, o método DELETE.",
      "É claro que, na prática, cada função deve ser programada dentro de uma API. Uma API é um código “aberto” para a internet, mas também não é um mundo sem leis. Cada API tem sua regra, e cada funcionalidade dentro de uma API também pode ter a sua regra. Vamos usar de exemplo a PokeAPI: para buscar a lista de pokemons, foi programado que você deve realizar um GET na rota https://pokeapi.co/api/v2/pokemon. Além disso, o desenvolvedor criou uma opção para você poder buscar o número de Pokemons que você quiser, adicionando o parâmetro, um “Query Param”, “limit” na URL https://pokeapi.co/api/v2/pokemon?limit=150. E ainda tem mais, você pode buscar todas as informações de um pokemon especifico com o nome do Pokemon, um “Route Param” diretamente na URL como https://pokeapi.co/api/v2/pokemon/pikachu",
      "",
      "Por padrão, todo site que você entra em seu navegador usa o método GET em um servidor. Com isso, você consegue acessar qualquer URL de uma API direto do seu navegador, desde que ela esteja programada para receber o método GET.",
      "",
      "Utilizando uma API com JS",
      "Agora vamos aprender como fazer o seu código se conectar com uma API! Toda linguagem de programação tem suporte para isso, mas vamos começar com Javascript.",
      "Como padrão da linguagem, o JS tem a função fetch, e você pode utilizar ela tranquilamente. Mas eu, particularmente, gosto bastante de utilizar outra biblioteca, o Axios, e vou te recomendar que use também.",
      "Você pode instalar o Axios em seu projeto com o Yarn, ou NPM:",
      "npm install axios",
      "## ou",
      "yarn add axios",
      "",
      "Ou então, incluindo essa tag de importação de script entre as tags &lt;header&gt; do seu HTML:",
      "&lt;script src=\"https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js\"&gt;&lt;/script&gt;",
      "",
      "Depois disso de instalado, é só usar o Axios:",
      "const axios = require('axios');",
      "",
      "// Para um GET",
      "axios.get('https://pokeapi.co/api/v2/pokemon')",
      "  .then((response) =&gt; {",
      "    console.log(response.data);",
      "  });",
      "",
      "E com isso, as informações da API vão estar dentro do seu código. Não tem mistério. O grande segredo para o seu projeto, é o que você faz com essas informações!",
      "Criando sua própria API",
      "E não só de utilizar APIs vive um programador, também podemos desenvolver APIs. É até aí que entra o trabalho de um desenvolvedor backend: criar APIs.",
      "Para criar uma API, temos que fazer o nosso código se comportar como um “servidor”. E é por isso que é imprescendível o uso de alguma biblioteca para isso acontecer. Com Javascript, você pode utilizar o Express.",
      "Para instalar o Express:",
      "npm install express",
      "## ou",
      "yarn add express",
      "",
      "Para montar o ambiente para API, basta utilizar a estrutura:",
      "const express = require('express');",
      "const app = express();",
      "const port = 3000;",
      "",
      "// Suas funções aqui",
      "",
      "app.listen(port, () =&gt; {",
      "  console.log(`Seu servidor irá rodar em http://localhost:${port}`)",
      "});",
      "",
      "O que esse pedaço de código faz, é utilizar o Express para montar um servidor na sua máquina que está disponível na URL localhost:3000. O Express estará assistindo à porta 3000 a todo momento, e toda e qualquer requisição feita será identificada pela API.",
      "A partir daí, é o que você quiser fazer. Você pode pegar qualquer função do seu código, e externalizar da forma que você quiser. Como exemplo, vamos tentar montar uma função para realizar a soma de dois números (a e b):",
      "const express = require('express');",
      "const app = express();",
      "const port = 3000;",
      "",
      "app.get('/calculo', (request, response) =&gt; {",
      "    const a = request.query.a;",
      "    const b = request.query.b;",
      "    const result = parseFloat(a) + parseFloat(b);",
      "",
      "    response.send({",
      "        message: `O resultado é: ${result}`,",
      "        result: result,",
      "    });",
      "});",
      "",
      "app.listen(port, () =&gt; {",
      "  console.log(`Seu servidor irá rodar em http://localhost:${port}`);",
      "});",
      "",
      "No código acima, estamos dizendo que toda requisição com método GET para a URL http://localhost:3000/calculo com os parametros a e b, como http://localhost:3000/calculo?a=2&amp;b=5 irão fazer um cálculo de a + b e devem retornar a mensagem “O resultado é 7”.",
      "Perceba que todas as funções são ligadas diretamente a variável app, ela que é sua API. É com ela que você cria as suas “rotas”, e externaliza cada função sua. O que cada função vai fazer, e a regra que será aplicada é você que define em seu código.",
      "Ainda tem mais!",
      "Ainda tem muita coisa para falar com API. Este texto aborda o assunto de forma bem genérica, e API um tema bastante extenso, não é atoa que temos profissionais focados em desenvolver apenas APIs, o desenvolvedor backend.",
      "Costumamos até utilizar frameworks mais complexos, cheios de funcionalidade, como, por exemplo o NestJS ou AdonisJS. E claro, você também pode fazer APIs com outras linguagens. Temos o Flask e Django como frameworks de APIs para Python, temos o Laravel para PHP, Springboot para Java e por aí vai.",
      "Nós vamos evoluir bastante nesse assunto nos próximos textos! Nos acompanhe no Discord, se inscreva em nossa newsletter e fique por dentro da devGo!"
    ]
  },
  {
    "mainImage": {
      "tag": "IMG",
      "src": "https://cdn.hashnode.com/res/hashnode/image/upload/v1658498088950/WZbGhfPOG.png?w=1600&h=840&fit=crop&crop=entropy&auto=compress,format&format=webp",
      "alt": "Começando com HTML e CSS",
      "decoding": "async",
      "dataNimg": "responsive",
      "style": "position:absolute;top:0;left:0;bottom:0;right:0;box-sizing:border-box;padding:0;border:none;margin:auto;display:block;width:0;height:0;min-width:100%;max-width:100%;min-height:100%;max-height:100%;background-size:cover;background-position:0% 0%;filter:blur(20px);background-image:url(\"https://cdn.hashnode.com/res/hashnode/image/upload/v1658498088950/WZbGhfPOG.png?w=400&h=210&fit=crop&crop=entropy&auto=compress,format&format=webp&fm=blurhash\")"
    },
    "title": {
      "tag": "H1",
      "text": "Começando com HTML e CSS"
    },
    "authorInfo": {
      "name": "Paulo Vitor Cruz",
      "profile": "https://hashnode.com/@paulovitorcs",
      "image": {
        "tag": "IMG",
        "src": "https://cdn.hashnode.com/res/hashnode/image/upload/v1627584398465/UPvyr0vKeP.jpeg?w=200&h=200&fit=crop&crop=faces&auto=compress,format&format=webp",
        "alt": "Paulo Vitor Cruz's photo",
        "decoding": "async",
        "dataNimg": "intrinsic",
        "style": "position:absolute;top:0;left:0;bottom:0;right:0;box-sizing:border-box;padding:0;border:none;margin:auto;display:block;width:0;height:0;min-width:100%;max-width:100%;min-height:100%;max-height:100%"
      }
    },
    "data": {
      "hour": "14:07",
      "data": "Jul 22, 2022"
    },
    "contentText": [
      "É por aqui que vamos começar os nossos primeiros passos na programação. Hoje, vamos entender um pouquinho como funciona e o que pode ser feito com HTML e CSS.",
      "O que é",
      "É importante entender que HTML e CSS não são linguagens de programação. A explicação é bem simples: não conseguimos construir “lógica”, ou criar relações por aqui. No caso, HTML é chamada de “linguagem de marcação” e o CSS é conhecido por ser uma “linguagem de estilo”. Mas apesar de realmente não serem linguagens de programação, o HTML e o CSS são imprescindíveis para montar o seu projeto.",
      "É geralmente com HTML e com CSS que começamos a montagem do “frontend”. E como explicamos no artigo “O que existe por trás de um aplicativo”, é pelo frontend que o usuário acessa, vê e utiliza as funcionalidades de seu programa.",
      "Com HTML montamos toda a base e a estrutura que será visualmente apresentada. E com CSS, estilizamos com cores, posicionamento, espaçamentos e deixamos esteticamente agradável ao usuário.",
      "HTML",
      "O HTML é responsável por montar toda a estrutura de uma página: um cabeçalho, um link, uma imagem, enfim, todo e qualquer conteúdo presente em uma página na internet é montado pelo HTML. Montamos essa estrutura com o que chamamos de “tags”, e cada pedacinho de um site, é como se fosse um “bloco”, montado por essa “tag”. Vamos usar a devGo como exemplo:",
      "Cada área marcada, ou cada “bloco” é um elemento criado com uma tag em HTML. Deixamos cada pedacinho do site estruturado dessa forma, e de pouco em pouco, tag por tag, vamos montando a nossa página.",
      "No código, criamos nossas tags utilizando &lt; e &gt; entre o nome da tag, como por exemplo &lt;div&gt;. O conteúdo é escrito dentro dessa tag e fechado por um &lt;/div&gt;, algo como:",
      "&lt;div&gt;Conteúdo dentro da tag&lt;/div&gt;",
      "",
      "A própria montagem de uma página HTML segue um padrão de tags: tudo deve estar dentro de uma tag &lt;html&gt; , que contem as tags &lt;head&gt; para configuração de alguns meta dados da página, e a tag &lt;body&gt; com o real conteúdo da página:",
      "&lt;html&gt;",
      "    &lt;head&gt;",
      "        &lt;!-- Aqui dentro ficam elementos responsáveis pelo \"metadata\" da página --&gt;",
      "        &lt;title&gt;Título da Página&lt;/title&gt;",
      "    &lt;/head&gt;",
      "    &lt;body&gt;",
      "        &lt;!-- Aqui fica o conteudo da página --&gt;",
      "        &lt;div&gt;Um conteudo qualquer&lt;/div&gt;",
      "    &lt;/body&gt;",
      "&lt;/html&gt;",
      "",
      "Temos diversas tags, e cada tag tem a sua função, por exemplo:",
      "&lt;span&gt; para conter um texto:",
      "&lt;span&gt;Um texto qualquer&lt;/span&gt;",
      "",
      "&lt;h1&gt; ou &lt;h2&gt; , &lt;h3&gt; e etc para conter um título:",
      "&lt;h1&gt;Um título aqui&lt;/h1&gt;",
      "&lt;h2&gt;Um segundo título aqui&lt;/h2&gt;",
      "",
      "&lt;p&gt; para criar um parágrafo:",
      "&lt;p&gt;Um texto qualquer&lt;/p&gt;",
      "",
      "&lt;a&gt; para gerar um link, e neste caso, por conter esse tipo de tag ao clicar, abre-se uma nova página:",
      "&lt;a href=\"&lt;https://devgo.com.br/&gt;\"&gt;Um link para a página da DevGo&lt;/a&gt;",
      "",
      "&lt;button&gt; para criar um botão",
      "&lt;button&gt;Um botão qualquer&lt;/button&gt;",
      "",
      "&lt;img&gt; para gerar uma imagem —perceba que aqui, não há um conteúdo entre a tag:",
      "&lt;img src=\"URL_DA_IMAGEM\" /&gt;",
      "",
      "&lt;div&gt; como a tag mais comum de todas, pois gera um elemento genérico:",
      "&lt;div&gt;Você pode fazer o que quiser dentro de uma tag div&lt;/div&gt;",
      "",
      "Existem diversos outros elementos, como por exemplo, para criar formulários, campos de input, uma tabela e até elementos que aparentemente não mudam nada na sua página mas contém uma informação importante como por exemplo um endereço, um artigo, etc. Você pode encontrar uma lista de todas tags HTML neste link.",
      "Na prática, em um elemento como o bloco para uma postagem na devGo poderia ficaria como:",
      "&lt;div&gt;",
      "    &lt;h1&gt;Título da postagem&lt;/h1&gt;",
      "    &lt;img src=\"LINK_DA_IMAGEM_DO_POST\" /&gt;",
      "    &lt;span&gt;Autor da postagem&lt;/span&gt;",
      "    &lt;p&gt;Aqui todo conteúdo do texto&lt;/p&gt;",
      "&lt;/div&gt;",
      "",
      "CSS",
      "Uma coisa é montar a estrutura da página, outra coisa é deixar ela “bonita”. E como estamos falando de frontend, o que o usuário vê, deixar uma aplicação bonita é trabalho importantíssimo.",
      "Enquanto o HTML é responsável pela estrutura, o CSS é responsável pela estilização. O trabalho do CSS é buscar um elemento no HTML e aplicar propriedades de cor, tamanho do texto, fonte utilizada, posicionamento, entre vários outros estilos.",
      "O primeiro passo para aplicar um estilo CSS em um elemento é “marcar” este elemento no HTML. Existem duas formas: o “id” ou uma “classe” —IDs costumam ser mais específicos, por fim de identificação mesmo; classes costumam ser mais gênericas, quando há estilos compartilhados entre vários elementos, e um elemento pode até ter mais de uma classe. Essa identificação é aplicada no próprio elemento HTML, como:",
      "&lt;div class=\"classe1 classe2\"&gt;Conteudo&lt;/div&gt;",
      "&lt;div id=\"id1\"&gt;Conteudo&lt;/div&gt;",
      "",
      "O segundo passo, é “integrar” o CSS na sua página HTML. Para isso existem dois formatos:",
      "",
      "Na página HTML, você pode utilizar a tag style:",
      "",
      "&lt;style&gt;",
      "    ##Estilos aqui",
      "&lt;/style&gt;",
      "",
      "",
      "Ou, criando um novo arquivo styles.css e importar este arquivo no HTML. Colocamos a tag abaixo, dentro das tags &lt;head&gt; do HTML:",
      "",
      "&lt;head&gt;",
      "    &lt;link rel=\"stylesheet\" href=\"styles.css\"&gt;",
      "&lt;/head&gt;",
      "",
      "O terceiro passo é criar os estilos para cada elemento. Os elementos podem ser identificados pela tag, pelo ID utilizando # antes do nome aplicado na identificação ou pela classe utilizando um. Antes do nome aplicado na classe:",
      "## Aplicando em uma tag",
      "p {",
      "    font-size: 16px;",
      "    color: black;",
      "}",
      "",
      "## Aplicando em uma classe",
      ".classe1 {",
      "    background-color: gray;",
      "    padding: 50px;",
      "    text-align: center;",
      "}",
      "",
      "## Aplicando em um ID",
      "#id1 {",
      "    margin: 20px;",
      "    border: 1px solid red;",
      "}",
      "",
      "Cada propriedade aplicada irá afetar todos os elementos que possuem a tag, classe ou ID, por isso é bastante comum que você tenha inúmeras classes para cada elemento —claro, dependerá muito da forma em que você irá organizar o seu projeto. Você pode aplicar quantas propriedades quiser no CSS, e existem uma infinidade de propriedades que podem ser aplicadas:",
      "",
      "color para definir a cor do texto",
      "background-color para definir a cor de fundo de um elemento",
      "margin para criar margens de espaçamento nos elementos",
      "font-size para definir o tamanho da fonte",
      "text-align para o alinhamento do texto",
      "border aplicação de bordas no entorno do elemento",
      "",
      "Você pode encontrar a lista de propriedades neste link.",
      "Trabalhando com HTML e CSS na prática",
      "Desenvolver uma página com HTML e CSS é uma questão de prática. Por mais que você tenha entendido como deve funcionar uma estrutura e a estilização de um elemento, temos uma diversidade de tags e propriedade bastante grande, é impossível ter tudo isso “decorado”.",
      "Em um projeto real, devemos lembrar também que nem tudo são flores: propriedades entram em conflitos entre si, estruturas precisam ser melhor adaptadas para cada caso e por aí vai. É até uma questão de tentativa de erro. Por isso, quanto mais projetos você fizer, quando mais experiência tiver, mais tranquilo será o seu desenvolvimento.",
      "Nos nossos próximos artigos, vamos evoluindo estes conceitos e montando projetos! Nos acompanhe em nosso canal do Discord, inscreva-se em nossa newsletter e acompanhe de perto os conteúdos da DevGo."
    ]
  },
  {
    "mainImage": {
      "tag": "IMG",
      "src": "https://cdn.hashnode.com/res/hashnode/image/upload/v1657893427204/iZUCdBfuM.png?w=1600&h=840&fit=crop&crop=entropy&auto=compress,format&format=webp",
      "alt": "Como preparar o seu PC para desenvolvimento",
      "decoding": "async",
      "dataNimg": "responsive",
      "style": "position: absolute; inset: 0px; box-sizing: border-box; padding: 0px; border: none; margin: auto; display: block; width: 0px; height: 0px; min-width: 100%; max-width: 100%; min-height: 100%; max-height: 100%;"
    },
    "title": {
      "tag": "H1",
      "text": "Como preparar o seu PC para desenvolvimento"
    },
    "authorInfo": {
      "name": "Paulo Vitor Cruz",
      "profile": "https://hashnode.com/@paulovitorcs",
      "image": {
        "tag": "IMG",
        "src": "https://cdn.hashnode.com/res/hashnode/image/upload/v1627584398465/UPvyr0vKeP.jpeg?w=200&h=200&fit=crop&crop=faces&auto=compress,format&format=webp",
        "alt": "Paulo Vitor Cruz's photo",
        "decoding": "async",
        "dataNimg": "intrinsic",
        "style": "position:absolute;top:0;left:0;bottom:0;right:0;box-sizing:border-box;padding:0;border:none;margin:auto;display:block;width:0;height:0;min-width:100%;max-width:100%;min-height:100%;max-height:100%"
      }
    },
    "data": {
      "hour": "14:01",
      "data": "Jul 15, 2022"
    },
    "contentText": [
      "Uma das dúvidas mais comuns de quem quer virar um desenvolvedor é: o que preciso em meu computador para começar a programar? Nesse artigo vamos explicar como preparar o seu ambiente de desenvolvimento!",
      "Editor de Texto",
      "Se você quer escrever um código, a primeira coisa que você precisa é de um editor de texto. E sim, serve qualquer editor de texto, até mesmo o bloco de notas do Windows, o importante é mesmo escrever um código.",
      "Mas claro, vamos usar um que nos traga alguma funcionalidade a mais, com uma interface mais compreensível que realmente nos ajude em nosso dia a dia como desenvolvedor. Você pode escolher qualquer editor de texto, mas aqui vão algumas recomendações: VS Code, Atom, Webstorm, Pycharm, e por aí vai.",
      "Eu gosto bastante do VS Code, e é o que eu uso diariamente. Com ele, instalo algumas extensões, personalizo com o tema que eu quero trago algumas funcionalidades novas e está pronto! Dicas: você pode achar uns temas legais por aqui, e extensões que não podem faltar: LiveServer, IntelliCode, Auto Import, GitLens.",
      "Linguagem de programação",
      "Para cada linguagem de programação que você for trabalhar, precisa ser instalado um “interpretador” dessa linguagem em seu computador, que faça com que ele consiga entender aquela linguagem de programação. Cada linguagem precisa de um processo de instalação diferente, afinal, são interpretadores diferentes. Por exemplo, para programar em Python, você precisa ter o Python instalado em seu computador. Para PHP, a mesma coisa, você precisa ter o PHP instalado em seu computador.",
      "Hoje vamos focar mais no Javascript: uma das linguagens mais populares entre os desenvolvedores, com possibilidade uso tanto no backend quanto no frontend. O legal do Javascript é que ele já “está instalado”. Todos os navegadores já vem nativamente com o Javascript instalado, por isso, um “Ctrl +Shift +J” no seu navegador para abrir o console já é suficiente para você conseguir rodar alguns códigos. Mas na prática, não usamos o Javascript assim certo? Então vamos partir para a instalação do NodeJS. O Node permite que você rode Javascript fora do seu navegador, tendo mais controle sobre seu projeto.",
      "Gerenciador de pacotes",
      "Vamos com calma. Você sabe o que é um pacote? Um pacote nada mais é que do que uma biblioteca de códigos, feitas por outros desenvolvedores com funcionalidades já prontas para te ajudar em seu projeto. E fique tranquilo, não é problema algum utilizar dessas bibliotecas: elas são de código aberto, qualquer pessoa pode usar e não te faz menos programador ter elas em seus códigos.",
      "Cada linguagem tem o seu gerenciador de pacotes, por exemplo: com PHP usamos o Composer, em Javascript utilizamos o NPM (já vem instalado com o Node) ou Yarn, em Python temos o Pip (a instalação do Python geralmente já vem com o Pip também).",
      "Esses pacotes são para realmente te ajudar em seus projetos, e você pode utilizar ou não. Mas vai à dica: sempre tenha instalado em seu computador. Na prática, você utiliza deles para instalar alguma biblioteca e importar em seu código, como por exemplo:",
      "## Para Javascript",
      "npm install react",
      "yarn add react",
      "",
      "## Para PHP",
      "composer require \"laravel/installer=~1.1\"",
      "",
      "## Python",
      "pip install -U Flask",
      "Rodando o seu projeto",
      "Você pode criar um arquivo, seguindo a extensão de sua linguagem (.py, .php ou .js) e escrever seu código por ali mesmo. A maioria das linguagens, após ter instalado em seu computador o seu devido interpretador, permite que você rode este arquivo por meio de um terminal de comandos. Basta estar na mesma pasta que o seu arquivo e rodar algo como:",
      "py arquivo.py",
      "php arquivo.php",
      "node arquivo.js",
      "Em alguns casos, para rodar uma aplicação inteira, seja ela uma API ou um aplicativo web ou mobile, você pode precisar fazer que seu computador se comporte como um “servidor”, então é sempre bom ter o Nginx ou o Apache instalado em sua máquina. Mas saiba que em boa parte dos casos, para desenvolver esse tipo de aplicações contamos com a ajuda de um framework —uma biblioteca de código, completamente estruturada para suportar uma aplicação de maior complexidade. Esses frameworks, como Laravel para montar uma API em PHP, ou React para montar uma aplicação web com javacript já trazem suporte para que seu computador rode o projeto sem a necessidade de outras instalações ou configurações. E nestes casos, vai da documentação de cada framework o que deve ser feito para rodar o seu código.",
      "Próximos passos",
      "O próximo passo é realmente programar. Em um primeiro momento é realmente importante que você tenha o seu computador preparado para começar o código. Cada linguagem de programação, e em alguns casos até mesmo os projetos terão processos diferentes de instalação, e nós vamos explorar cada um desses casos nos próximos artigos com aplicações na prática de cada projeto.",
      "Nos acompanhe em nosso canal do Discord, inscreve-se na nossa newsletter e fique atento aos nossos próximos conteúdos."
    ]
  },
  {
    "mainImage": {
      "tag": "IMG",
      "src": "https://cdn.hashnode.com/res/hashnode/image/upload/v1657719753224/oEQn-bpuC.jpg?w=1600&h=840&fit=crop&crop=entropy&auto=compress,format&format=webp",
      "alt": "Pós-graduação em TI - Qual devo escolher?",
      "decoding": "async",
      "dataNimg": "responsive",
      "style": "position:absolute;top:0;left:0;bottom:0;right:0;box-sizing:border-box;padding:0;border:none;margin:auto;display:block;width:0;height:0;min-width:100%;max-width:100%;min-height:100%;max-height:100%;background-size:cover;background-position:0% 0%;filter:blur(20px);background-image:url(\"https://cdn.hashnode.com/res/hashnode/image/upload/v1657719753224/oEQn-bpuC.jpg?w=400&h=210&fit=crop&crop=entropy&auto=compress,format&format=webp&fm=blurhash\")"
    },
    "title": {
      "tag": "H1",
      "text": "Pós-graduação em TI - Qual devo escolher?"
    },
    "authorInfo": {
      "name": "Thiago Bussola da Silva",
      "profile": "https://hashnode.com/@TBussola",
      "image": {
        "tag": "IMG",
        "src": "https://cdn.hashnode.com/res/hashnode/image/upload/v1657719449417/RNprE3qUW.jpeg?w=200&h=200&fit=crop&crop=faces&auto=compress,format&format=webp",
        "alt": "Thiago Bussola da Silva's photo",
        "decoding": "async",
        "dataNimg": "intrinsic",
        "style": "position:absolute;top:0;left:0;bottom:0;right:0;box-sizing:border-box;padding:0;border:none;margin:auto;display:block;width:0;height:0;min-width:100%;max-width:100%;min-height:100%;max-height:100%"
      }
    },
    "data": {
      "hour": "13:47",
      "data": "Jul 13, 2022"
    },
    "contentText": [
      "Hoje vamos falar sobre uma pergunta que assombra muitos que terminaram a graduação, ou estão terminando, qual categoria de pós-graduação eu devo escolher?",
      "Quando falamos em pós-graduação geralmente temos 3 caminhos que podemos seguir:",
      "A especialização, ou Lato Sensu, é a que geralmente pensamos quando falamos em pós-graduação. Ela tem um foco maior em quem já está trabalhando na área e fornecesse matérias e conteúdos que podem lhe auxiliar em sua profissão, no emprego atual, ou até para uma mudança de segmento.",
      "Temos o MBA, ou Master Business Administration, que também é um curso Lato Sensu, porém no exterior é considerado como um mestrado, mas no Brasil é considerada somente como uma especialização na área de administração. E geralmente os cursos de MBA que encontramos são mais focados nessa área de administração, negócios e gerenciamento de projetos.",
      "E por último temos os cursos de pós-graduação Stricto Sensu. Essa categoria de cursos estão voltados de forma restrita ao Mestrado e ao Doutorado. Geralmente são cursados por pessoas que buscam seguir na vida acadêmica, seja na área da docência ou até mesmo na área da pesquisa.",
      "Mas nós que trabalhamos em TI, que curso devemos escolher?",
      "Bom, a resposta como em quase tudo no mundo da TI é bem simples: depende!",
      "Tudo irá realmente depender de muitas variáveis, a grade do curso, para onde você quer direcionar sua carreira, e muitas vezes até mesmo o valor.",
      "Mas para não deixar ninguém na mão e somente com um depende, vou dar o meu ponto de vista como um estudante de pós-graduação, no meu caso estou cursando o mestrado. Primeiro, vamos por partes.",
      "Especialização - Lato Sensu",
      "Essa categoria vai ser perfeita para você se a grade curricular e os conteúdos baterem exatamente com o que você já trabalha, ou com o que você deseja aprender para mudar de área ou tecnologia.",
      "O motivo para eu não ter buscado uma pós-graduação nessa categoria é que atualmente os conteúdos não eram nem um pouco condizentes com as tecnologias que trabalho, além-claro da maioria deles serem pagos e com um difícil acesso a bolsa, nada impossível, só era mais complexo que fazer um mestrado na universidade pública. Mas voltando a questão das matérias, infelizmente, ou felizmente para a galera do Java (sem preconceito galera haha), a maioria das pós gira dentro dessa tecnologia, e não em tecnologias mais modernas que estão emergentes no mercado. Dependendo da região onde você mora isso pode variar, em Maringá, onde moro, muitas empresas trabalham com Java e bancos de dados relacionais, então é óbvio que as universidades irão ofertar cursos de especialização voltados para esses dois segmentos.",
      "MBA",
      "O MBA provavelmente vai brilhar mais aos olhos daqueles que buscam uma promoção no trabalho que os direcione mais para o gerenciamento de pessoas do que uma promoção para um cargo mais técnico. Os cursos são focados em muitas matérias gerenciais e administrativas, e se isso condizer com seus planos é algo que vale muito a pena cursar.",
      "Mestrado / Doutorado - Stricto Sensu",
      "Essa foi a categoria de especialização que decidi fazer então vou poder falar um pouco mais sobre ela, e com um pouco mais de propriedade. Já gostaria de começar desmistificando muitas coisas.",
      "Primeiro mito - O Mestrado / Doutorado são somente para as pessoas que querem dar aula ou fazer pesquisa (ou os dois ao mesmo tempo, porque não?), no meu caso eu escolhi fazer o mestrado em ciência da computação porque eu queria conhecimento! Bom, que resposta mais tosca, o conhecimento pode ser obtido também nos cursos acima não é mesmo? Claro que sim! Porém, no mestrado as matérias, no meu ponto de vista, nos proporcionam uma melhor visão do que está acontecendo não só no mundo acadêmico mas também no mundo da indústria, e é essa a experiência que venho tendo no decorrer do curso.",
      "Segundo mito - Se eu for seguir para área da docência irei ganhar pouco! Isso não é de fato verdade, somente com o mestrado as remunerações em universidades públicas já são de certa forma ótimas, principalmente para o cenário econômico atual, e para aqueles que possuem o doutorado o valor é ainda maior. Mas ai você pode perguntar (ou até mesmo afirmar) : nossa, com todos esses anos de estudo, se você comprar com alguém que só trabalha na área ele vai estar ganhando muito mais! Bom, isso realmente é uma verdade, trabalhar para indústria rende uma remuneração muito maior que a da área da docência, mas também você não precisa ser professor aqui no Brasil, muitas universidades no exterior pagam muito bem para professores e até mais para pesquisadores!",
      "Terceiro mito - As empresas querem alguém com especialização, não alguém com mestrado que só sabe dar aula! Bom, é aí que vocês se enganam caros leitores, muitas empresas grandes de tecnologia, como, por exemplo, a IBM, procuram ativamente profissionais que tenham essa categoria de formação, e você deve estar se perguntando o porque, e ele é bem simples, a vida de desenvolvedor vai muito além de fazer um CRUD e uma API REST, essas empresas procuram pessoas para trabalhar no famoso setor de PD, Pesquisa e Desenvolvimento, onde você vai ter oportunidade de trabalhar com Ciência de dados e algoritmos de inteligência artificial, nem preciso dizer que a remuneração também é muito satisfatória, preciso?",
      "Quarto mito -  Mestrado / Doutorado é muito difícil! Vou ter que me matar de estudar! Bom, de fato é difícil, mas você não vai precisar dedicar tantas horas de estudo quanto na graduação, a quantidade de matérias por semestre é menor, o que lhe permite ter mais tempo para estudar aquela matéria que lhe apresenta uma maior dificuldade, mas no final, essa conclusão pode doer um pouco: se você não gosta de estudar ou ler, nenhuma pós-graduação é para você, talvez nem mesmo a área de TI e desenvolvimento de software! Nossa área requer estudo e aprendizado constante para estarmos alinhados sempre com as melhores técnicas e tecnologias!",
      "Agora contando um pouco sobre minha experiência no primeiro semestre do mestrado.",
      "Logo de cara já digo, eu escolhi essa modalidade porque eu gosto de estudar, e como dito acima, julguei pelas matérias que seria o melhor caminho a se trilhar para minha carreira, no mestrado o foco de minha pesquisa é em microsserviços e na migração de sistemas monolíticos para microsserviços. Também escolhi devido ao valor, que me custou a incrível bagatela de  R$ 0,00, pois na universidade pública tudo que precisa fazer é escrever um pré projeto de pesquisa e se for aprovado e tiverem vagas o suficiente você poderá se matricular no curso, a única taxa que deve ser paga é a de matrícula.",
      "No mestrado consegui aprender sobre novos métodos de desenvolvimento de software, entender complexidade de algoritmos muito além do simples Big O, aprender mais sobre engenharia de software, microsserviços, Inteligência Artificial e claro a fazer pesquisa e escrever artigos.",
      "Hoje sei que foi uma decisão acertada, o mestrado proporcionou uma visão muito mais atual das tecnologias e técnicas utilizadas no mercado (inter)nacional do que uma especialização Lato Sensu poderia proporcionar. Tudo até agora vem me ajudando muito em meu trabalho, pois tenho agora  uma visão mais ampla e até mais atual das novas tendências que estão surgindo. Além de que claro, muitas matérias não exigem uma prova como acontece na graduação, muitas vezes são apresentados seminários e entregues trabalhos escritos ou artigos para compor a nota, trazendo um certo alívio de não ter que ficar fazendo prova toda hora. Muito disso é porque estão instigando sua habilidade de pesquisar, que será necessária para escrever sua dissertação (no caso do mestrado) ou tese (no caso do Doutorado)",
      "Concluindo o nosso pequeno papo! Tudo irá depender jovens padawns, avalie muito bem antes qual área profissional almeja e qual o desenvolvimento que você precisa para chegar lá. E lembre-se, você também não precisa de alguma dessas especializações para ser o cara em Banco de Dados, Inteligência Artificial ou até mesmo Java, você pode estudar sozinho ou com cursos na internet e se tornar uma pessoa extremamente capaz, porém, algumas empresas têm como requisito essa categoria de formação, então estudo bem que caminho tomar e se ele irá ser satisfatório para a sua carreira"
    ]
  },
  {
    "mainImage": {
      "tag": "IMG",
      "src": "https://cdn.hashnode.com/res/hashnode/image/upload/v1657289417371/1ucA0NcPw.png?w=1600&h=840&fit=crop&crop=entropy&auto=compress,format&format=webp",
      "alt": "Como trabalhar com Git",
      "decoding": "async",
      "dataNimg": "responsive",
      "style": "position:absolute;top:0;left:0;bottom:0;right:0;box-sizing:border-box;padding:0;border:none;margin:auto;display:block;width:0;height:0;min-width:100%;max-width:100%;min-height:100%;max-height:100%;background-size:cover;background-position:0% 0%;filter:blur(20px);background-image:url(\"https://cdn.hashnode.com/res/hashnode/image/upload/v1657289417371/1ucA0NcPw.png?w=400&h=210&fit=crop&crop=entropy&auto=compress,format&format=webp&fm=blurhash\")"
    },
    "title": {
      "tag": "H1",
      "text": "Como trabalhar com Git"
    },
    "authorInfo": {
      "name": "Paulo Vitor Cruz",
      "profile": "https://hashnode.com/@paulovitorcs",
      "image": {
        "tag": "IMG",
        "src": "https://cdn.hashnode.com/res/hashnode/image/upload/v1627584398465/UPvyr0vKeP.jpeg?w=200&h=200&fit=crop&crop=faces&auto=compress,format&format=webp",
        "alt": "Paulo Vitor Cruz's photo",
        "decoding": "async",
        "dataNimg": "intrinsic",
        "style": "position:absolute;top:0;left:0;bottom:0;right:0;box-sizing:border-box;padding:0;border:none;margin:auto;display:block;width:0;height:0;min-width:100%;max-width:100%;min-height:100%;max-height:100%"
      }
    },
    "data": {
      "hour": "14:11",
      "data": "Jul 8, 2022"
    },
    "contentText": [
      "Com certeza você já ouviu falar de Git, ou até mesmo Github. Se você está começando agora na sua carreira de programação, saiba que Git é a ferramenta que você mais precisa dominar, afinal, você vai usar em todos os seus dias de trabalho. ",
      "O que é o Git",
      "O Git é uma ferramenta de versionamento e controle de código. Usada pela maioria dos desenvolvedores, o Git permite compartilhamento de código e controle de cada nova alteração feita em cima desse código.",
      "Vamos imaginar que você tem um projeto em desenvolvimento e neste projeto, você terá que desenvolver uma nova funcionalidade. Pense que se for ser um novo recurso você terá bastante trabalho para desenvolver, levará bastante tempo, muito código será alterado, instabilidades poderão ser geradas. A melhor solução então é ter uma “cópia” do código original, e trabalhar em cima dessa cópia, certo? É isso que o git permite!",
      "O git trabalha com o código em um esquema linear no tempo, ramificando o código em diferentes versões. Cada versão, aqui chamada de “branch”, é criada a partir do código original —identificado pela branch “main” ou “master”, que você pode trabalhar tranquilamente sem medo de alterar algo no original. Cada alteração feita no código você registra no Git como um “commit”, e quando o seu novo recurso estiver desenvolvido, testado e pronto, nós atualizamos a branch “main” com a nova versã: ação conhecida como “merge”.",
      "https://cdn.hashnode.com/res/hashnode/image/upload/v1657289447509/2fJXp19Be.png?auto=compress,format&amp;format=webp",
      "Git no dia a dia",
      "Trabalho em equipe",
      "No dia a dia, usar Git é importante para trabalhos em equipe. Você não estará desenvolvendo um código sozinho, sempre terá outros desenvolvedores juntos com você. Já imaginou todo mundo mexendo no mesmo código? E se você e o seu colega mexerem no mesmo arquivo, ou até na mesma função? O ideal é então que cada desenvolvedor trabalhe em branches diferentes, versões diferentes do mesmo código, para evitar todo e qualquer tipo de conflito.",
      "Versionamento",
      "O seu projeto está pronto, rodando em produção, pessoas do mundo inteiro acessando. Entre um recurso novo e outro, um bug surgiu e seu aplicativo está todo travado. E agora para saber que alteração pode ter dado errado? E para dar um Ctrl Z e voltar para uma versão mais estável? O Git mantem um histórico de tudo que acontece no seu projeto. Cada ponto de “merge”, cada nova versão criada, cada linha de código alterada. Desse jeito, é fácil voltar atrás de uma versão em que o bug não existia.",
      "Controle de código",
      "Se você tem uma equipe trabalhando em um mesmo código, o seu projeto pode virar uma bagunça bem fácil. Até falamos que cada desenvolvedor trabalha em uma branch, mas já pensou como é juntar 5 versões diferentes em um mesmo lugar? É ótimo que o Git já organize isso para você, evita conflitos e caso exista algum você será avisado. O grande benefício nesse controle de código é permitir que aconteça revisões, mapeamento de alterações e principalmente o grande controle de “merge” através das “Pull Requests” ou “Merge Requests”: toda e qualquer alteração só vai para a versão original, a branch “main” se for autorizada (geralmente, depois de uma revisão de código e teste de funcionalidade).",
      "Compartilhamento de código",
      "Se você já ouviu falar de Git, com certeza já ouviu falar de Github. E sim, são coisas diferentes: Git é a ferramenta de versionamento e controle de código, Github é uma plataforma que utiliza dessa ferramenta. Claro que dentro de projetos e empresas de TI utilizamos bastante o Github (ou Gitlab) no nosso processo de desenvolvimento, é realmente uma plataforma bem útil. Mas o Github também serve para você compartilhar o seu código com outras pessoas. Principalmente se você estiver começando a sua carreira agora, monte o seu portfolio em seu perfil no Github. Compartilhe todo e qualquer código que você faça, tudo que esteja estudando. É uma ótima maneira de chamar atenção para o seu trabalho como desenvolvedor.",
      "Comando uteis",
      "Criar nova branch",
      "Para criar uma nova versão do código, você deve criar uma nova branch. Veja que você pode criar essa nova versão a partir de qualquer outra versão, por isso, esteja sempre atento para criar a partir da “main” ou “master” —a não ser que seja um caso especial",
      "git checkout -b nomeDaSuaNovaBranch",
      "",
      "Mudar de branch",
      "Para mudar a versão de seu código é o mesmo comando de criar uma nova branch:",
      "git checkout main",
      "",
      "Atualizar a branch",
      "A sua branch pode estar desatualizada! Se por exemplo, a branch main foi atualizada no git, você precisa atualizar a sua branch localmente em seu computador. O comando abaixo atualiza a branch que você está atualmente:",
      "git fetch ## Baixa em seu computador a versão atualizada",
      "git pull ## Efetua a atualização de código",
      "",
      "Enviando suas alterações para a branch",
      "Você editou o código no seu computador mas ainda precisa enviar este código para o Git! Primeiro, registramos todas as alterações, confirmamos essas alterações, e depois, enviamos ao servidor remoto.",
      "git add nomeDoArquivoEditado.js ## Registro das alterações",
      "git commit -m \"Uma mensagem de descrição das alterações feitas\" ## Confirmação",
      "git push ## Envio ao servidor remoto",
      "",
      "Juntando versões",
      "Existem duas branches e você precisa juntar as duas em uma única versão. Esteja no branch que irá receber a atualização e use o comando",
      "git merge nomeDaSuaNovaBranch",
      "",
      "Reverter alterações",
      "Se você quer voltar atrás em alguma alteração que foi feita, você pode dar um “revert”. Uma outra possibilidade, é também ir diretamente para o commit —ponto de alteração dentro de uma branch.",
      "git revert HEAD ## \"Head\" é a ultima alteração feita. Você pode utilizar o código de um commit aqui",
      "git checkout codigoDeUmCommit",
      "",
      "Interfaces gráficas",
      "Realmente, são muitos comandos. É legal que você saiba alguns desses comandos, mas você também pode utilizar interfaces gráficas para utilizar o Git: aplicativos que vão trazer todas as informações e permitir que você gerencie mais fácil os recursos disponíves. Vou deixar aqui algumas recomendações: Github Desktop, Git Kraken, Sourcetree, Gitbox, Git Tower",
      "Git é uma ferramenta extremamente importante e que usamos diariamente como desenvolvedores. Use e abuse, tente usar todos os recursos disponíveis, vá ganhando experiência e acostume-se com o Git. Com isso finalizamos nossa introdução ao Git mas tenha certeza que voltaremos a falar sobre o assunto. Nos acompanhe em nosso canal do Discord, inscreva-se na nossa newsletter e fique por dentro da devGo!"
    ]
  },
  {
    "mainImage": {
      "tag": "IMG",
      "src": "https://cdn.hashnode.com/res/hashnode/image/upload/v1657047105873/ENh05vJlz.png?w=1600&h=840&fit=crop&crop=entropy&auto=compress,format&format=webp",
      "alt": "Desmistificando o TypeScript 🧐",
      "decoding": "async",
      "dataNimg": "responsive",
      "style": "position:absolute;top:0;left:0;bottom:0;right:0;box-sizing:border-box;padding:0;border:none;margin:auto;display:block;width:0;height:0;min-width:100%;max-width:100%;min-height:100%;max-height:100%;background-size:cover;background-position:0% 0%;filter:blur(20px);background-image:url(\"https://cdn.hashnode.com/res/hashnode/image/upload/v1657047105873/ENh05vJlz.png?w=400&h=210&fit=crop&crop=entropy&auto=compress,format&format=webp&fm=blurhash\")"
    },
    "title": {
      "tag": "H1",
      "text": "Desmistificando o TypeScript 🧐"
    },
    "authorInfo": {
      "name": "Andrew Adams",
      "profile": "https://hashnode.com/@andrew1adams",
      "image": {
        "tag": "IMG",
        "src": "https://cdn.hashnode.com/res/hashnode/image/upload/v1657025333839/7MyWPnPdX.png?w=200&h=200&fit=crop&crop=faces&auto=compress,format&format=webp",
        "alt": "Andrew Adams's photo",
        "decoding": "async",
        "dataNimg": "intrinsic",
        "style": "position:absolute;top:0;left:0;bottom:0;right:0;box-sizing:border-box;padding:0;border:none;margin:auto;display:block;width:0;height:0;min-width:100%;max-width:100%;min-height:100%;max-height:100%"
      }
    },
    "data": {
      "hour": "21:01",
      "data": "Jul 5, 2022"
    },
    "contentText": [
      "O TypeScript foi inicialmente criado para uso interno da Microsoft por Anders Hejlsberg, arquiteto do C# e criador de linguagens como Turbo Pascal e Delphi, com o intuito de elevar o nível do código JavaScript, que era usado apenas do lado cliente em trechos menores e em outubro de 2012 foi quando o TypeScript estava sendo publicado oficialmente para a comunidade. Devido ao TypeScript foi possível expandir o poder da linguagem possibilitando aplicar uma arquitetura mais sólida e com melhores práticas.",
      "Neste artigo irei desmistificar o TypeScript e citar algumas funcionalidades importantes que ele trouxe para o JavaScript, de forma que possa esclarecer e motivá-los a usar essa ferramenta incrível.",
      "Desmistificando o TypeScript",
      "https://cdn.hashnode.com/res/hashnode/image/upload/v1657041159939/fY0DHc1QU.jpg?auto=compress,format&amp;format=webp",
      "O que é?",
      "Afinal o que é o TypeScript? Essa é uma das dúvida que percorre quase todos os desenvolvedores iniciantes, já que há uma divisão da comunidade entre “linguagem” e “superset”, fico com a segunda, onda há mais embasamento.",
      "De acordo com o site oficial do TypeScript ele não é uma linguagem de programação, não por enquanto, mas isso é um assunto para outro momento, ele é categorizado como superset ou superconjunto devido a ele se acoplar diretamente a linguagem JavaScript, e trazer a ela novas funcionalidades ou aprimoramento de outras que amparam no desenvolvimento de determinada aplicação.",
      "Onde posso utilizar o TypeScript?",
      "Devido a busca em aprimorar ferramentas para trabalhar de forma mais produtiva hoje em dia podemos citar o JavaScript como um grande emergente nos dias de hoje, anteriormente essa linguagem só era possível ser utilizada no lado do cliente, com pequenos trechos de código que lidavam diratemante com interações web x usuário. Hoje em dia a história é outra, é possível usar dessa tecnologia também no lado servidor, graças ao Node.js.",
      "Dito isso, é indiscutível como o TypeScript cabe como uma luva em aplicações que utilizam do JavaScript auxiliando ambos os lados da aplicação, adicionando diversas funcionalidades a linguagem como, melhor suporte a programação orientada a objetos, tipagem estática opcional a linguagem, validação em tempo de compilação, além de trazer consigo uma melhor documentação do código escrito.",
      "E qual a real vantagem de utilizar-se dessa tecnologia?",
      "O TypeScript traz consigo uma gama de ferramentas que auxiliam na construção de uma aplicação como citado anteriormente, dito isso, vamos destrinchar algumas delas para elucidar um pouco as vantagens de ter uma aplicação bem arquitetada e composta por ele.",
      "Umas das vantagens é a possibilidade de explicitar o tipo de determinada variável, amarrando mais o código de forma que há uma melhor leitura de determinado escopo, assim, será possível identificar o retorno esperado, e com o intellisense em conjunto com a IDE de sua preferência, essa tipagem possibilita um feedback (type checking) mais assertivo caso haja alguma incongruência no código.",
      "Outra vantagem que clareia muito com o uso do TypeScript é o suporte a Programação Orientada a Objetos, melhorando a aplicabilidade de conceitos como: de Herança que permite com que classes filhas herdam propriedades de seus pais, de forma mais intuitiva; Encapsulamento que por sua vez nos permite trabalhar com getters e setters dando possibilidade de acessar propriedades privadas de uma entidade, entre outros.",
      "Podemos citar também o uso de Interfaces que age como um contrato a ser respeitado por determinada variável que resolva empregar esse contrato.",
      "É claro que existem outras vantagens de ter uma ferramenta tão completa como essa em sua stack, mas com isso é possível ter uma prévia conclusão que o TypeScript trás consigo uma gama de ferramentas que possibilitam a facilidade de escalonamento de uma determinada aplicação, é claro que, não há bala de prata, porém, não há dúvidas de que o TypeScript veio para somar e muito com a comunidade.",
      "Fácil entendimento, curva de aprendizado simples, aumento de produtividade, fácil manutenção do código, entre outras vantagens podem ser observadas também em aplicações que resolvem empregar o uso de TypeScript em sua stack.",
      "Deixem seu feedback, comentem e compartilhem para termos ideia do quão valoroso é nosso conteúdo para vocês! Breve estarei criando novos conteúdos, novas dinâmicas, etc, sobre essa ferramenta que sou apaixonado que é o TypeScript.",
      "Acesse nosso Discord - DevGO, lá vocês terão acesso a novas publicações de nossa comunidade, sempre buscamos os melhores conteúdos para deixá-los informados e melhor amparado tecnicamente! Não perca, se junte a essa comunidade incrível."
    ]
  },
  {
    "mainImage": {
      "tag": "IMG",
      "src": "https://cdn.hashnode.com/res/hashnode/image/upload/v1656676347788/iB-iFKs0K.png?w=1600&h=840&fit=crop&crop=entropy&auto=compress,format&format=webp",
      "alt": "O que existe por trás de um aplicativo",
      "decoding": "async",
      "dataNimg": "responsive",
      "style": "position: absolute; inset: 0px; box-sizing: border-box; padding: 0px; border: none; margin: auto; display: block; width: 0px; height: 0px; min-width: 100%; max-width: 100%; min-height: 100%; max-height: 100%;"
    },
    "title": {
      "tag": "H1",
      "text": "O que existe por trás de um aplicativo"
    },
    "authorInfo": {
      "name": "Paulo Vitor Cruz",
      "profile": "https://hashnode.com/@paulovitorcs",
      "image": {
        "tag": "IMG",
        "src": "https://cdn.hashnode.com/res/hashnode/image/upload/v1627584398465/UPvyr0vKeP.jpeg?w=200&h=200&fit=crop&crop=faces&auto=compress,format&format=webp",
        "alt": "Paulo Vitor Cruz's photo",
        "decoding": "async",
        "dataNimg": "intrinsic",
        "style": "position:absolute;top:0;left:0;bottom:0;right:0;box-sizing:border-box;padding:0;border:none;margin:auto;display:block;width:0;height:0;min-width:100%;max-width:100%;min-height:100%;max-height:100%"
      }
    },
    "data": {
      "hour": "12:52",
      "data": "Jul 1, 2022"
    },
    "contentText": [
      "Para começar sua carreira como desenvolvedor é preciso que você entenda o que existe por trás de aplicativo e onde você pode se encaixar como desenvolvedor. O que acontece quando você acessa um site, ou usa um aplicativo? A gente te explica!",
      "Como funciona um aplicativo",
      "Um aplicativo, seja ele mobile, desktop ou até mesmo uma página na web, nada mais é que um sistema, ou “programa” que você acessa diretamente do seu celular ou computador. Vamos começar com um exemplo bem simples, um login: o usuário entrou em uma página, digitou seu usuário e senha, clicou em um botão, aguardou alguns segundos, e uma nova página abriu.",
      "https://cdn.hashnode.com/res/hashnode/image/upload/v1656676048020/IE3eNO8ID.png?auto=compress,format&amp;format=webp",
      "Para entender como isso funciona vamos aprofundar um pouco na estrutura que essa aplicação pode ter. Claro que cada aplicativo pode possuir uma estrutura, ou arquitetura mais específicas, mas os mais comuns trazem uma premissa bastante básica: uma interface, que se comunica com um sistema que busca e manipula informações de alguma fonte de dados. ",
      "Durante o desenvolvimento, a forma mais comum de dividir essas frentes são: a interface que é disponibilizada para o usuário, o frontend; e o sistema que gerencia as informações de um banco dados, o backend.",
      "https://cdn.hashnode.com/res/hashnode/image/upload/v1656676058774/l0A7ZZLMg.png?auto=compress,format&amp;format=webp",
      "O que é frontend?",
      "Frontend é o que você “vê” em um aplicativo. O papel de um desenvolvedor no frontend é construir toda a interface: botões, formulários, quadros, posicionamento de imagens e textos, e principalmente programar como estes componentes irão reagir com a interação de um usuário: o que acontece quando um botão é clicado, um texto é digitado, ou um link é acessado.",
      "Desenvolver frontend é até um pouco diferente do que se espera em programação, não contamos muito com lógica, operações ou alguma manipulação. Aqui é realmente sobre montar uma interface, saber estilizar, deixar acessível e principalmente funcional ao usuário. Até a forma de programar é diferente: é bastante HTML, CSS e outras ferramentas de estilização e componentização que possuem uma sintaxe de código bastante diferente e não são nem mesmo linguagens de programação —mas é claro que sim, você usa linguagens de programação em diversos momentos e nós vamos falar um pouco mais sobre isso em outros artigos.",
      "É um trabalho bastante delicado e importante, pois para o usuário, é tudo o que ele vê do sistema e é a partir do frontend que o usuário tem uma impressão sobre o aplicativo. Por isso também que é um ótimo ponto de partida para seus estudos como um desenvolvedor, afinal, independente do que você desenvolve, um pouquinho de frontend você vai precisar fazer.",
      "O que é backend?",
      "Backend, sendo o oposto, e a camada por trás do frontend é tudo aquilo que você “não vê” em um aplicativo. O backend contém toda a lógica da aplicação, todas as regras, todas as ações e todas as manipulações de dados. Programar um sistema backend é realmente o que vemos sobre código: é lógica de programação, é perfomance, é ter controle todo sobre o sistema. ",
      "Podemos até dizer que o backend é o coração de qualquer sistema. Toda ação, todo fluxo de dados, toda a responsabilidade de funcionamento do sistema passa pelo backend. Até mesmo a responsabilidade de gerenciar o banco de dados é do backend. Nada acontece sem o backend aprovar.",
      "Em sua maioria das vezes é construído no formato de uma API —um mecanismo de comunicação entre aplicações que surge como um segundo sistema, muitas vezes chamado de “servidor”, completamente independente e dedicado ao backend, e responsável por toda funcionalidade da aplicação. Esse é mais um tópico que vamos falar em outros artigos. ",
      "O que acontece, na prática, quando uso um aplicativo?",
      "A prática de uso de um aplicativo não foge muito de sua premissa e estrutura básica: uma interface, que se comunica com um servidor e apresenta informações e permite que um usuário as manipule. ",
      "Voltando ao exemplo do login: o usuário entrou em uma página, digitou seu usuário e senha, clicou em um botão, aguardou alguns segundos, e uma nova página abriu.",
      "Tudo começa com o frontend: é responsabilidade dele carregar a página para o usuário e exibir para ele sua real função: fazer um login. Com um formulário de usuário e senha disponível para o usuário, ele digita seus dados, e ao digitar, o frontend guarda essa informações até que o usuário clique no botão para realizar a ação de login. O frontend não possui lógicas de programação, certo? Até então o frontend não faz a minima ideia se esses dados são verdadeiros —se o usuário existe ou se a senha está correta. Quem possui essas informações é o backend, então uma pergunta é feita para esse responsável: os dados de usuário e senha chegam agora no backend, que confere em um banco de dados se são reais, se é válido e se pode prosseguir com o login. Dados validados, a resposta é enviada para o frontend, que tendo o “ok” do backend prossegue com uma ação: redirecionar o usuário para uma nova página.",
      "https://cdn.hashnode.com/res/hashnode/image/upload/v1656676075820/yTnRdXEhP.png?auto=compress,format&amp;format=webp",
      "Esta é uma estrutura bastante padrão para toda aplicação: o frontend recebe a interação do usuário, envia os dados dessa interação para o backend; o backend envia uma resposta para o frontend, e este por fim, reflete essa resposta em uma ação para o usuário.",
      "",
      "Dica: você pode ver essa interação acontecendo na maioria de sites que você acessa em seu computador. Aperte F12 e abrirá uma janela em seu navegador com a aba “Network” ou “Rede” ativa. Nessa aba, aparecem todas as requisições —as perguntas que o frontend, envia para o backend!",
      "",
      "Nos nossos próximos passos vamos falar e mostrar como construir cada um desses sistemas, de frontend a um backend. Acompanhe nosso canal no Discord, e fique por dentro de nossa série de conteúdos sobre como se tornar um desenvolvedor."
    ]
  },
  {
    "mainImage": {
      "tag": "IMG",
      "src": "https://cdn.hashnode.com/res/hashnode/image/upload/v1656070770974/LVWULNOdy.png?w=1600&h=840&fit=crop&crop=entropy&auto=compress,format&format=webp",
      "alt": "Como se tornar um desenvolvedor de software",
      "decoding": "async",
      "dataNimg": "responsive",
      "style": "position:absolute;top:0;left:0;bottom:0;right:0;box-sizing:border-box;padding:0;border:none;margin:auto;display:block;width:0;height:0;min-width:100%;max-width:100%;min-height:100%;max-height:100%;background-size:cover;background-position:0% 0%;filter:blur(20px);background-image:url(\"https://cdn.hashnode.com/res/hashnode/image/upload/v1656070770974/LVWULNOdy.png?w=400&h=210&fit=crop&crop=entropy&auto=compress,format&format=webp&fm=blurhash\")"
    },
    "title": {
      "tag": "H1",
      "text": "Como se tornar um desenvolvedor de software"
    },
    "authorInfo": {
      "name": "Paulo Vitor Cruz",
      "profile": "https://hashnode.com/@paulovitorcs",
      "image": {
        "tag": "IMG",
        "src": "https://cdn.hashnode.com/res/hashnode/image/upload/v1627584398465/UPvyr0vKeP.jpeg?w=200&h=200&fit=crop&crop=faces&auto=compress,format&format=webp",
        "alt": "Paulo Vitor Cruz's photo",
        "decoding": "async",
        "dataNimg": "intrinsic",
        "style": "position:absolute;top:0;left:0;bottom:0;right:0;box-sizing:border-box;padding:0;border:none;margin:auto;display:block;width:0;height:0;min-width:100%;max-width:100%;min-height:100%;max-height:100%"
      }
    },
    "data": {
      "hour": "12:28",
      "data": "Jun 24, 2022"
    },
    "contentText": [
      "Está pensando em se tornar um desenvolvedor de software? Faz todo sentido: mercado aquecido, de fácil acesso, bons salários, liberdade para trabalhar de onde quiser e com perspectivas de crescimento bem altas. Mas você sabe por onde começar? O que estudar? ",
      "1º - Aprenda lógica de programação",
      "O primeiro passo é que você estude lógica de programação. Aprenda o que são variáveis, condições, loopings. ",
      "Saiba que programar não é só escrever linhas e linhas de código, programar é resolver problemas. E resolver problemas, ainda mais problemas lógicos, é saber como pensar. Acontece que computadores tem uma forma bastante especifica de “pensar” e você precisa se adaptar a isso, “pensar igual a um computador”, para ser capaz de construir algoritmos no seu dia a dia como desenvolvedor.",
      "",
      "A esposa do programador disse:- Vá ao mercado e traga um litro de leite. Se tiver ovos, traga seis. O programador voltou com seis litros de leite, então sua esposa disse:- Programador! Porquê você trouxe seis litros de leite? E o Programador respondeu:- Eles tinham ovos...",
      "",
      "2ª - Escolha uma linguagem",
      "Mesmo que você “pense igual a um computador” você ainda precisa falar a lingua dele, e para isso nós usamos as linguagens de programação. ",
      "Python, Javascript, Dart, PHP, C, Go, R, Java, enfim, temos uma infinidade de linguagens de programação, cada uma delas com um objetivo e finalidade própria. Quer trabalhar com dados? Python ou R. Quer trabalhar desenvolvendo APIs? Javascript, PHP ou Java. Quer trabalhar desenvolvendo aplicativos? Javascript ou Dart. É importante que você escolha uma, e pelo menos nesse primeiro momento, se especialize em uma única linguagem.",
      "3ª - Pratique",
      "Nada adianta se você não praticar. Conheça todos os recursos da linguagem que você escolheu, pratique até dizer chega. É importante que você entenda cada funcionalidade, para que na hora de aplicar você não se sinta um pouco perdido. Tenha tudo na ponta da lingua para conseguir desenvolver sua aplicação da forma mais confortável possível.",
      "Uma dica legal é usar aplicações como o Code Wars ou Hackerank. Lá tem bastante desafio para você ir praticando.",
      "4ª - Faça projetos",
      "Faça uma infinidade de projetos, experimente técnicas novas, tenha dificuldades, resolva essas dificuldades, e siga para o próximo projeto.",
      "Programar é mesmo uma questão de experiência. Nenhum programa é o mesmo, e quanto mais programas diferentes você tiver, mais você vai aprender.",
      "Aproveite até para montar o seu portfolio. Crie uma conta no Github, poste tudo o que você tiver por lá, é uma ótima forma de mostrar o que você vêm aprendendo.",
      "5ª - Participe de comunidades",
      "Programar com outras pessoas, compartilhar conhecimento e ter amigos por perto nesta jornada para aprender desenvolvimento é o melhor que você pode fazer. Ter pessoas por perto, sejam elas alguém que também esteja aprendendo junto com você, ou até programadores mais avançados é sempre uma troca de experiências, e é isso o que você mais precisa agora. Por isso, participe de comunidades de desenvolvedores, conheça novas pessoas, faça projetos juntos e aprenda coisas novas.",
      "A devGo é uma comunidade para desenvolvedores e estaremos por lá, junto com vários outros desenvolvedores para te ajudar nesta jornada.",
      "Iremos preparar uma série de conteúdos, seja para quem que está começando agora a programar, ou quem quer evoluir e avançar ainda mais na programação. Participe do nosso canal do Discord e nos acompanhe nas redes sociais!"
    ]
  }
]